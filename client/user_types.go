// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/jamesallain/goa-fhir/design
// --out=$(GOPATH)\src\github.com\jamesallain\goa-fhir
// --version=v1.1.0-dirty
//
// API "Secure": Application User Types
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"github.com/goadesign/goa"
	"unicode/utf8"
)

// allergyIntolerancePayload user type.
type allergyIntolerancePayload struct {
	Active  *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	Address *struct {
		// City
		City   *string `form:"city,omitempty" json:"city,omitempty" xml:"city,omitempty"`
		Number *struct {
			// Street name
			Other *string `form:"other,omitempty" json:"other,omitempty" xml:"other,omitempty"`
		} `form:"number,omitempty" json:"number,omitempty" xml:"number,omitempty"`
		// Street name
		Street *string `form:"street,omitempty" json:"street,omitempty" xml:"street,omitempty"`
	} `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	BirthDate     *string `form:"birthDate,omitempty" json:"birthDate,omitempty" xml:"birthDate,omitempty"`
	Country       *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Deceased      *bool   `form:"deceased,omitempty" json:"deceased,omitempty" xml:"deceased,omitempty"`
	Gender        *string `form:"gender,omitempty" json:"gender,omitempty" xml:"gender,omitempty"`
	MultipleBirth *bool   `form:"multiple_birth,omitempty" json:"multiple_birth,omitempty" xml:"multiple_birth,omitempty"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	Review        *string `form:"review,omitempty" json:"review,omitempty" xml:"review,omitempty"`
	Sweetness     *int    `form:"sweetness,omitempty" json:"sweetness,omitempty" xml:"sweetness,omitempty"`
}

// Validate validates the allergyIntolerancePayload type instance.
func (ut *allergyIntolerancePayload) Validate() (err error) {
	if ut.Address != nil {
		if ut.Address.City == nil {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`response.address`, "city"))
		}
	}
	if ut.BirthDate != nil {
		if utf8.RuneCountInString(*ut.BirthDate) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.birthDate`, *ut.BirthDate, utf8.RuneCountInString(*ut.BirthDate), 4, true))
		}
	}
	if ut.Country != nil {
		if utf8.RuneCountInString(*ut.Country) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.country`, *ut.Country, utf8.RuneCountInString(*ut.Country), 2, true))
		}
	}
	if ut.Gender != nil {
		if !(*ut.Gender == "male" || *ut.Gender == "female" || *ut.Gender == "other" || *ut.Gender == "unknown") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.gender`, *ut.Gender, []interface{}{"male", "female", "other", "unknown"}))
		}
	}
	if ut.Review != nil {
		if utf8.RuneCountInString(*ut.Review) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.review`, *ut.Review, utf8.RuneCountInString(*ut.Review), 3, true))
		}
	}
	if ut.Review != nil {
		if utf8.RuneCountInString(*ut.Review) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.review`, *ut.Review, utf8.RuneCountInString(*ut.Review), 300, false))
		}
	}
	if ut.Sweetness != nil {
		if *ut.Sweetness < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.sweetness`, *ut.Sweetness, 1, true))
		}
	}
	if ut.Sweetness != nil {
		if *ut.Sweetness > 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.sweetness`, *ut.Sweetness, 5, false))
		}
	}
	return
}

// Publicize creates AllergyIntolerancePayload from allergyIntolerancePayload
func (ut *allergyIntolerancePayload) Publicize() *AllergyIntolerancePayload {
	var pub AllergyIntolerancePayload
	if ut.Active != nil {
		pub.Active = ut.Active
	}
	if ut.Address != nil {
		pub.Address = &struct {
			// City
			City   string `form:"city" json:"city" xml:"city"`
			Number *struct {
				// Street name
				Other *string `form:"other,omitempty" json:"other,omitempty" xml:"other,omitempty"`
			} `form:"number,omitempty" json:"number,omitempty" xml:"number,omitempty"`
			// Street name
			Street *string `form:"street,omitempty" json:"street,omitempty" xml:"street,omitempty"`
		}{}
		if ut.Address.City != nil {
			pub.Address.City = *ut.Address.City
		}
		if ut.Address.Number != nil {
			pub.Address.Number = &struct {
				// Street name
				Other *string `form:"other,omitempty" json:"other,omitempty" xml:"other,omitempty"`
			}{}
			if ut.Address.Number.Other != nil {
				pub.Address.Number.Other = ut.Address.Number.Other
			}
		}
		if ut.Address.Street != nil {
			pub.Address.Street = ut.Address.Street
		}
	}
	if ut.BirthDate != nil {
		pub.BirthDate = ut.BirthDate
	}
	if ut.Country != nil {
		pub.Country = ut.Country
	}
	if ut.Deceased != nil {
		pub.Deceased = ut.Deceased
	}
	if ut.Gender != nil {
		pub.Gender = ut.Gender
	}
	if ut.MultipleBirth != nil {
		pub.MultipleBirth = ut.MultipleBirth
	}
	if ut.Region != nil {
		pub.Region = ut.Region
	}
	if ut.Review != nil {
		pub.Review = ut.Review
	}
	if ut.Sweetness != nil {
		pub.Sweetness = ut.Sweetness
	}
	return &pub
}

// AllergyIntolerancePayload user type.
type AllergyIntolerancePayload struct {
	Active  *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	Address *struct {
		// City
		City   string `form:"city" json:"city" xml:"city"`
		Number *struct {
			// Street name
			Other *string `form:"other,omitempty" json:"other,omitempty" xml:"other,omitempty"`
		} `form:"number,omitempty" json:"number,omitempty" xml:"number,omitempty"`
		// Street name
		Street *string `form:"street,omitempty" json:"street,omitempty" xml:"street,omitempty"`
	} `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	BirthDate     *string `form:"birthDate,omitempty" json:"birthDate,omitempty" xml:"birthDate,omitempty"`
	Country       *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Deceased      *bool   `form:"deceased,omitempty" json:"deceased,omitempty" xml:"deceased,omitempty"`
	Gender        *string `form:"gender,omitempty" json:"gender,omitempty" xml:"gender,omitempty"`
	MultipleBirth *bool   `form:"multiple_birth,omitempty" json:"multiple_birth,omitempty" xml:"multiple_birth,omitempty"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	Review        *string `form:"review,omitempty" json:"review,omitempty" xml:"review,omitempty"`
	Sweetness     *int    `form:"sweetness,omitempty" json:"sweetness,omitempty" xml:"sweetness,omitempty"`
}

// Validate validates the AllergyIntolerancePayload type instance.
func (ut *AllergyIntolerancePayload) Validate() (err error) {
	if ut.Address != nil {
		if ut.Address.City == "" {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`response.address`, "city"))
		}
	}
	if ut.BirthDate != nil {
		if utf8.RuneCountInString(*ut.BirthDate) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.birthDate`, *ut.BirthDate, utf8.RuneCountInString(*ut.BirthDate), 4, true))
		}
	}
	if ut.Country != nil {
		if utf8.RuneCountInString(*ut.Country) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.country`, *ut.Country, utf8.RuneCountInString(*ut.Country), 2, true))
		}
	}
	if ut.Gender != nil {
		if !(*ut.Gender == "male" || *ut.Gender == "female" || *ut.Gender == "other" || *ut.Gender == "unknown") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.gender`, *ut.Gender, []interface{}{"male", "female", "other", "unknown"}))
		}
	}
	if ut.Review != nil {
		if utf8.RuneCountInString(*ut.Review) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.review`, *ut.Review, utf8.RuneCountInString(*ut.Review), 3, true))
		}
	}
	if ut.Review != nil {
		if utf8.RuneCountInString(*ut.Review) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.review`, *ut.Review, utf8.RuneCountInString(*ut.Review), 300, false))
		}
	}
	if ut.Sweetness != nil {
		if *ut.Sweetness < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.sweetness`, *ut.Sweetness, 1, true))
		}
	}
	if ut.Sweetness != nil {
		if *ut.Sweetness > 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.sweetness`, *ut.Sweetness, 5, false))
		}
	}
	return
}

// A human's name with the ability to identify parts and usage.
type humanNamePayload struct {
	// The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
	Family []string `form:"family,omitempty" json:"family,omitempty" xml:"family,omitempty"`
	// Given names (not always 'first'). Includes middle names
	Given *string `form:"given,omitempty" json:"given,omitempty" xml:"given,omitempty"`
	// Indicates the period of time when this name was valid for the named person.
	Period *period `form:"period,omitempty" json:"period,omitempty" xml:"period,omitempty"`
	// Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
	Prefix *string `form:"prefix,omitempty" json:"prefix,omitempty" xml:"prefix,omitempty"`
	// Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
	Suffix *string `form:"suffix,omitempty" json:"suffix,omitempty" xml:"suffix,omitempty"`
	// Identifies the purpose for this name.
	Use *string `form:"use,omitempty" json:"use,omitempty" xml:"use,omitempty"`
}

// Validate validates the humanNamePayload type instance.
func (ut *humanNamePayload) Validate() (err error) {
	if ut.Use == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "use"))
	}
	if ut.Use != nil {
		if !(*ut.Use == "usual" || *ut.Use == "official" || *ut.Use == "temp" || *ut.Use == "nickname" || *ut.Use == "anonymous" || *ut.Use == "old" || *ut.Use == "maiden") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.use`, *ut.Use, []interface{}{"usual", "official", "temp", "nickname", "anonymous", "old", "maiden"}))
		}
	}
	return
}

// Publicize creates HumanNamePayload from humanNamePayload
func (ut *humanNamePayload) Publicize() *HumanNamePayload {
	var pub HumanNamePayload
	if ut.Family != nil {
		pub.Family = ut.Family
	}
	if ut.Given != nil {
		pub.Given = ut.Given
	}
	if ut.Period != nil {
		pub.Period = ut.Period.Publicize()
	}
	if ut.Prefix != nil {
		pub.Prefix = ut.Prefix
	}
	if ut.Suffix != nil {
		pub.Suffix = ut.Suffix
	}
	if ut.Use != nil {
		pub.Use = *ut.Use
	}
	return &pub
}

// A human's name with the ability to identify parts and usage.
type HumanNamePayload struct {
	// The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
	Family []string `form:"family,omitempty" json:"family,omitempty" xml:"family,omitempty"`
	// Given names (not always 'first'). Includes middle names
	Given *string `form:"given,omitempty" json:"given,omitempty" xml:"given,omitempty"`
	// Indicates the period of time when this name was valid for the named person.
	Period *Period `form:"period,omitempty" json:"period,omitempty" xml:"period,omitempty"`
	// Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
	Prefix *string `form:"prefix,omitempty" json:"prefix,omitempty" xml:"prefix,omitempty"`
	// Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
	Suffix *string `form:"suffix,omitempty" json:"suffix,omitempty" xml:"suffix,omitempty"`
	// Identifies the purpose for this name.
	Use string `form:"use" json:"use" xml:"use"`
}

// Validate validates the HumanNamePayload type instance.
func (ut *HumanNamePayload) Validate() (err error) {
	if ut.Use == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "use"))
	}
	if !(ut.Use == "usual" || ut.Use == "official" || ut.Use == "temp" || ut.Use == "nickname" || ut.Use == "anonymous" || ut.Use == "old" || ut.Use == "maiden") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.use`, ut.Use, []interface{}{"usual", "official", "temp", "nickname", "anonymous", "old", "maiden"}))
	}
	return
}

// nutritionRequestPayload user type.
type nutritionRequestPayload struct {
	Address                *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	AddressPostalCode      *string `form:"address_postal_code,omitempty" json:"address_postal_code,omitempty" xml:"address_postal_code,omitempty"`
	EnteralFormula         *string `form:"enteralFormula,omitempty" json:"enteralFormula,omitempty" xml:"enteralFormula,omitempty"`
	FoodPreferenceModifier *struct {
		Coding *string `form:"coding,omitempty" json:"coding,omitempty" xml:"coding,omitempty"`
		ID     *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
		Text   *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	} `form:"foodPreferenceModifier,omitempty" json:"foodPreferenceModifier,omitempty" xml:"foodPreferenceModifier,omitempty"`
	Href             *string           `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	ID               *string           `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Identifier       *string           `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	Links            *string           `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	NutritionRequest *nutritionRequest `form:"nutritionRequest,omitempty" json:"nutritionRequest,omitempty" xml:"nutritionRequest,omitempty"`
	OralDiet         *string           `form:"oralDiet,omitempty" json:"oralDiet,omitempty" xml:"oralDiet,omitempty"`
	Patient          *struct {
		ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
		Reference *string `form:"reference,omitempty" json:"reference,omitempty" xml:"reference,omitempty"`
	} `form:"patient,omitempty" json:"patient,omitempty" xml:"patient,omitempty"`
	Supplement *string `form:"supplement,omitempty" json:"supplement,omitempty" xml:"supplement,omitempty"`
}

// Validate validates the nutritionRequestPayload type instance.
func (ut *nutritionRequestPayload) Validate() (err error) {
	if ut.AddressPostalCode != nil {
		if utf8.RuneCountInString(*ut.AddressPostalCode) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_postal_code`, *ut.AddressPostalCode, utf8.RuneCountInString(*ut.AddressPostalCode), 5, true))
		}
	}
	if ut.NutritionRequest != nil {
		if err2 := ut.NutritionRequest.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates NutritionRequestPayload from nutritionRequestPayload
func (ut *nutritionRequestPayload) Publicize() *NutritionRequestPayload {
	var pub NutritionRequestPayload
	if ut.Address != nil {
		pub.Address = ut.Address
	}
	if ut.AddressPostalCode != nil {
		pub.AddressPostalCode = ut.AddressPostalCode
	}
	if ut.EnteralFormula != nil {
		pub.EnteralFormula = ut.EnteralFormula
	}
	if ut.FoodPreferenceModifier != nil {
		pub.FoodPreferenceModifier = &struct {
			Coding *string `form:"coding,omitempty" json:"coding,omitempty" xml:"coding,omitempty"`
			ID     *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
			Text   *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
		}{}
		if ut.FoodPreferenceModifier.Coding != nil {
			pub.FoodPreferenceModifier.Coding = ut.FoodPreferenceModifier.Coding
		}
		if ut.FoodPreferenceModifier.ID != nil {
			pub.FoodPreferenceModifier.ID = ut.FoodPreferenceModifier.ID
		}
		if ut.FoodPreferenceModifier.Text != nil {
			pub.FoodPreferenceModifier.Text = ut.FoodPreferenceModifier.Text
		}
	}
	if ut.Href != nil {
		pub.Href = ut.Href
	}
	if ut.ID != nil {
		pub.ID = ut.ID
	}
	if ut.Identifier != nil {
		pub.Identifier = ut.Identifier
	}
	if ut.Links != nil {
		pub.Links = ut.Links
	}
	if ut.NutritionRequest != nil {
		pub.NutritionRequest = ut.NutritionRequest.Publicize()
	}
	if ut.OralDiet != nil {
		pub.OralDiet = ut.OralDiet
	}
	if ut.Patient != nil {
		pub.Patient = &struct {
			ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
			Reference *string `form:"reference,omitempty" json:"reference,omitempty" xml:"reference,omitempty"`
		}{}
		if ut.Patient.ID != nil {
			pub.Patient.ID = ut.Patient.ID
		}
		if ut.Patient.Reference != nil {
			pub.Patient.Reference = ut.Patient.Reference
		}
	}
	if ut.Supplement != nil {
		pub.Supplement = ut.Supplement
	}
	return &pub
}

// NutritionRequestPayload user type.
type NutritionRequestPayload struct {
	Address                *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	AddressPostalCode      *string `form:"address_postal_code,omitempty" json:"address_postal_code,omitempty" xml:"address_postal_code,omitempty"`
	EnteralFormula         *string `form:"enteralFormula,omitempty" json:"enteralFormula,omitempty" xml:"enteralFormula,omitempty"`
	FoodPreferenceModifier *struct {
		Coding *string `form:"coding,omitempty" json:"coding,omitempty" xml:"coding,omitempty"`
		ID     *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
		Text   *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	} `form:"foodPreferenceModifier,omitempty" json:"foodPreferenceModifier,omitempty" xml:"foodPreferenceModifier,omitempty"`
	Href             *string           `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	ID               *string           `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Identifier       *string           `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	Links            *string           `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	NutritionRequest *NutritionRequest `form:"nutritionRequest,omitempty" json:"nutritionRequest,omitempty" xml:"nutritionRequest,omitempty"`
	OralDiet         *string           `form:"oralDiet,omitempty" json:"oralDiet,omitempty" xml:"oralDiet,omitempty"`
	Patient          *struct {
		ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
		Reference *string `form:"reference,omitempty" json:"reference,omitempty" xml:"reference,omitempty"`
	} `form:"patient,omitempty" json:"patient,omitempty" xml:"patient,omitempty"`
	Supplement *string `form:"supplement,omitempty" json:"supplement,omitempty" xml:"supplement,omitempty"`
}

// Validate validates the NutritionRequestPayload type instance.
func (ut *NutritionRequestPayload) Validate() (err error) {
	if ut.AddressPostalCode != nil {
		if utf8.RuneCountInString(*ut.AddressPostalCode) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_postal_code`, *ut.AddressPostalCode, utf8.RuneCountInString(*ut.AddressPostalCode), 5, true))
		}
	}
	if ut.NutritionRequest != nil {
		if err2 := ut.NutritionRequest.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Payload sent by client to obtain refresh and access token or to refresh an access token.
//                 See https://tools.ietf.org/html/rfc6749#section-4.1.3 and https://tools.ietf.org/html/rfc6749#section-6
type oAuth2TokenPayload struct {
	// The authorization code received from the authorization server, used for initial refresh and access token request
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Value MUST be set to "authorization_code" when obtaining initial refresh and access token.
	//             Value MUST be set to "refresh_token" when refreshing an access token.
	GrantType *string `form:"grant_type,omitempty" json:"grant_type,omitempty" xml:"grant_type,omitempty"`
	// The redirect_uri parameter specified when making the authorize request to obtain the authorization code, used for initial refresh and access token request
	RedirectURI *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty" xml:"redirect_uri,omitempty"`
	// The refresh token issued to the client, used for refreshing an access token
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// The scope of the access request, used for refreshing an access token
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
}

// Validate validates the oAuth2TokenPayload type instance.
func (ut *oAuth2TokenPayload) Validate() (err error) {
	if ut.GrantType == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "grant_type"))
	}
	if ut.GrantType != nil {
		if !(*ut.GrantType == "authorization_code" || *ut.GrantType == "refresh_token") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.grant_type`, *ut.GrantType, []interface{}{"authorization_code", "refresh_token"}))
		}
	}
	return
}

// Publicize creates OAuth2TokenPayload from oAuth2TokenPayload
func (ut *oAuth2TokenPayload) Publicize() *OAuth2TokenPayload {
	var pub OAuth2TokenPayload
	if ut.Code != nil {
		pub.Code = ut.Code
	}
	if ut.GrantType != nil {
		pub.GrantType = *ut.GrantType
	}
	if ut.RedirectURI != nil {
		pub.RedirectURI = ut.RedirectURI
	}
	if ut.RefreshToken != nil {
		pub.RefreshToken = ut.RefreshToken
	}
	if ut.Scope != nil {
		pub.Scope = ut.Scope
	}
	return &pub
}

// Payload sent by client to obtain refresh and access token or to refresh an access token.
//                 See https://tools.ietf.org/html/rfc6749#section-4.1.3 and https://tools.ietf.org/html/rfc6749#section-6
type OAuth2TokenPayload struct {
	// The authorization code received from the authorization server, used for initial refresh and access token request
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Value MUST be set to "authorization_code" when obtaining initial refresh and access token.
	//             Value MUST be set to "refresh_token" when refreshing an access token.
	GrantType string `form:"grant_type" json:"grant_type" xml:"grant_type"`
	// The redirect_uri parameter specified when making the authorize request to obtain the authorization code, used for initial refresh and access token request
	RedirectURI *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty" xml:"redirect_uri,omitempty"`
	// The refresh token issued to the client, used for refreshing an access token
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// The scope of the access request, used for refreshing an access token
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
}

// Validate validates the OAuth2TokenPayload type instance.
func (ut *OAuth2TokenPayload) Validate() (err error) {
	if ut.GrantType == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "grant_type"))
	}
	if !(ut.GrantType == "authorization_code" || ut.GrantType == "refresh_token") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.grant_type`, ut.GrantType, []interface{}{"authorization_code", "refresh_token"}))
	}
	return
}

// observationPayload user type.
type observationPayload struct {
	Active        *bool   `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	BirthDate     *string `form:"birthDate,omitempty" json:"birthDate,omitempty" xml:"birthDate,omitempty"`
	Country       *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Deceased      *bool   `form:"deceased,omitempty" json:"deceased,omitempty" xml:"deceased,omitempty"`
	Gender        *string `form:"gender,omitempty" json:"gender,omitempty" xml:"gender,omitempty"`
	MultipleBirth *bool   `form:"multiple_birth,omitempty" json:"multiple_birth,omitempty" xml:"multiple_birth,omitempty"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	Review        *string `form:"review,omitempty" json:"review,omitempty" xml:"review,omitempty"`
	Sweetness     *int    `form:"sweetness,omitempty" json:"sweetness,omitempty" xml:"sweetness,omitempty"`
}

// Validate validates the observationPayload type instance.
func (ut *observationPayload) Validate() (err error) {
	if ut.BirthDate != nil {
		if utf8.RuneCountInString(*ut.BirthDate) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.birthDate`, *ut.BirthDate, utf8.RuneCountInString(*ut.BirthDate), 4, true))
		}
	}
	if ut.Country != nil {
		if utf8.RuneCountInString(*ut.Country) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.country`, *ut.Country, utf8.RuneCountInString(*ut.Country), 2, true))
		}
	}
	if ut.Gender != nil {
		if !(*ut.Gender == "male" || *ut.Gender == "female" || *ut.Gender == "other" || *ut.Gender == "unknown") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.gender`, *ut.Gender, []interface{}{"male", "female", "other", "unknown"}))
		}
	}
	if ut.Review != nil {
		if utf8.RuneCountInString(*ut.Review) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.review`, *ut.Review, utf8.RuneCountInString(*ut.Review), 3, true))
		}
	}
	if ut.Review != nil {
		if utf8.RuneCountInString(*ut.Review) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.review`, *ut.Review, utf8.RuneCountInString(*ut.Review), 300, false))
		}
	}
	if ut.Sweetness != nil {
		if *ut.Sweetness < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.sweetness`, *ut.Sweetness, 1, true))
		}
	}
	if ut.Sweetness != nil {
		if *ut.Sweetness > 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.sweetness`, *ut.Sweetness, 5, false))
		}
	}
	return
}

// Publicize creates ObservationPayload from observationPayload
func (ut *observationPayload) Publicize() *ObservationPayload {
	var pub ObservationPayload
	if ut.Active != nil {
		pub.Active = ut.Active
	}
	if ut.BirthDate != nil {
		pub.BirthDate = ut.BirthDate
	}
	if ut.Country != nil {
		pub.Country = ut.Country
	}
	if ut.Deceased != nil {
		pub.Deceased = ut.Deceased
	}
	if ut.Gender != nil {
		pub.Gender = ut.Gender
	}
	if ut.MultipleBirth != nil {
		pub.MultipleBirth = ut.MultipleBirth
	}
	if ut.Region != nil {
		pub.Region = ut.Region
	}
	if ut.Review != nil {
		pub.Review = ut.Review
	}
	if ut.Sweetness != nil {
		pub.Sweetness = ut.Sweetness
	}
	return &pub
}

// ObservationPayload user type.
type ObservationPayload struct {
	Active        *bool   `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	BirthDate     *string `form:"birthDate,omitempty" json:"birthDate,omitempty" xml:"birthDate,omitempty"`
	Country       *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Deceased      *bool   `form:"deceased,omitempty" json:"deceased,omitempty" xml:"deceased,omitempty"`
	Gender        *string `form:"gender,omitempty" json:"gender,omitempty" xml:"gender,omitempty"`
	MultipleBirth *bool   `form:"multiple_birth,omitempty" json:"multiple_birth,omitempty" xml:"multiple_birth,omitempty"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	Review        *string `form:"review,omitempty" json:"review,omitempty" xml:"review,omitempty"`
	Sweetness     *int    `form:"sweetness,omitempty" json:"sweetness,omitempty" xml:"sweetness,omitempty"`
}

// Validate validates the ObservationPayload type instance.
func (ut *ObservationPayload) Validate() (err error) {
	if ut.BirthDate != nil {
		if utf8.RuneCountInString(*ut.BirthDate) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.birthDate`, *ut.BirthDate, utf8.RuneCountInString(*ut.BirthDate), 4, true))
		}
	}
	if ut.Country != nil {
		if utf8.RuneCountInString(*ut.Country) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.country`, *ut.Country, utf8.RuneCountInString(*ut.Country), 2, true))
		}
	}
	if ut.Gender != nil {
		if !(*ut.Gender == "male" || *ut.Gender == "female" || *ut.Gender == "other" || *ut.Gender == "unknown") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.gender`, *ut.Gender, []interface{}{"male", "female", "other", "unknown"}))
		}
	}
	if ut.Review != nil {
		if utf8.RuneCountInString(*ut.Review) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.review`, *ut.Review, utf8.RuneCountInString(*ut.Review), 3, true))
		}
	}
	if ut.Review != nil {
		if utf8.RuneCountInString(*ut.Review) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.review`, *ut.Review, utf8.RuneCountInString(*ut.Review), 300, false))
		}
	}
	if ut.Sweetness != nil {
		if *ut.Sweetness < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.sweetness`, *ut.Sweetness, 1, true))
		}
	}
	if ut.Sweetness != nil {
		if *ut.Sweetness > 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.sweetness`, *ut.Sweetness, 5, false))
		}
	}
	return
}

// patientPayload user type.
type patientPayload struct {
	Active  *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	Address *struct {
		// City
		City   *string `form:"city,omitempty" json:"city,omitempty" xml:"city,omitempty"`
		Number *struct {
			// Street name
			Other *string `form:"other,omitempty" json:"other,omitempty" xml:"other,omitempty"`
		} `form:"number,omitempty" json:"number,omitempty" xml:"number,omitempty"`
		// Street name
		Street *string `form:"street,omitempty" json:"street,omitempty" xml:"street,omitempty"`
	} `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	BirthDate     *string `form:"birthDate,omitempty" json:"birthDate,omitempty" xml:"birthDate,omitempty"`
	Country       *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Deceased      *bool   `form:"deceased,omitempty" json:"deceased,omitempty" xml:"deceased,omitempty"`
	Gender        *string `form:"gender,omitempty" json:"gender,omitempty" xml:"gender,omitempty"`
	MultipleBirth *bool   `form:"multiple_birth,omitempty" json:"multiple_birth,omitempty" xml:"multiple_birth,omitempty"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	Review        *string `form:"review,omitempty" json:"review,omitempty" xml:"review,omitempty"`
	Sweetness     *int    `form:"sweetness,omitempty" json:"sweetness,omitempty" xml:"sweetness,omitempty"`
}

// Validate validates the patientPayload type instance.
func (ut *patientPayload) Validate() (err error) {
	if ut.Address != nil {
		if ut.Address.City == nil {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`response.address`, "city"))
		}
	}
	if ut.BirthDate != nil {
		if utf8.RuneCountInString(*ut.BirthDate) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.birthDate`, *ut.BirthDate, utf8.RuneCountInString(*ut.BirthDate), 4, true))
		}
	}
	if ut.Country != nil {
		if utf8.RuneCountInString(*ut.Country) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.country`, *ut.Country, utf8.RuneCountInString(*ut.Country), 2, true))
		}
	}
	if ut.Gender != nil {
		if !(*ut.Gender == "male" || *ut.Gender == "female" || *ut.Gender == "other" || *ut.Gender == "unknown") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.gender`, *ut.Gender, []interface{}{"male", "female", "other", "unknown"}))
		}
	}
	if ut.Review != nil {
		if utf8.RuneCountInString(*ut.Review) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.review`, *ut.Review, utf8.RuneCountInString(*ut.Review), 3, true))
		}
	}
	if ut.Review != nil {
		if utf8.RuneCountInString(*ut.Review) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.review`, *ut.Review, utf8.RuneCountInString(*ut.Review), 300, false))
		}
	}
	if ut.Sweetness != nil {
		if *ut.Sweetness < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.sweetness`, *ut.Sweetness, 1, true))
		}
	}
	if ut.Sweetness != nil {
		if *ut.Sweetness > 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.sweetness`, *ut.Sweetness, 5, false))
		}
	}
	return
}

// Publicize creates PatientPayload from patientPayload
func (ut *patientPayload) Publicize() *PatientPayload {
	var pub PatientPayload
	if ut.Active != nil {
		pub.Active = ut.Active
	}
	if ut.Address != nil {
		pub.Address = &struct {
			// City
			City   string `form:"city" json:"city" xml:"city"`
			Number *struct {
				// Street name
				Other *string `form:"other,omitempty" json:"other,omitempty" xml:"other,omitempty"`
			} `form:"number,omitempty" json:"number,omitempty" xml:"number,omitempty"`
			// Street name
			Street *string `form:"street,omitempty" json:"street,omitempty" xml:"street,omitempty"`
		}{}
		if ut.Address.City != nil {
			pub.Address.City = *ut.Address.City
		}
		if ut.Address.Number != nil {
			pub.Address.Number = &struct {
				// Street name
				Other *string `form:"other,omitempty" json:"other,omitempty" xml:"other,omitempty"`
			}{}
			if ut.Address.Number.Other != nil {
				pub.Address.Number.Other = ut.Address.Number.Other
			}
		}
		if ut.Address.Street != nil {
			pub.Address.Street = ut.Address.Street
		}
	}
	if ut.BirthDate != nil {
		pub.BirthDate = ut.BirthDate
	}
	if ut.Country != nil {
		pub.Country = ut.Country
	}
	if ut.Deceased != nil {
		pub.Deceased = ut.Deceased
	}
	if ut.Gender != nil {
		pub.Gender = ut.Gender
	}
	if ut.MultipleBirth != nil {
		pub.MultipleBirth = ut.MultipleBirth
	}
	if ut.Region != nil {
		pub.Region = ut.Region
	}
	if ut.Review != nil {
		pub.Review = ut.Review
	}
	if ut.Sweetness != nil {
		pub.Sweetness = ut.Sweetness
	}
	return &pub
}

// PatientPayload user type.
type PatientPayload struct {
	Active  *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	Address *struct {
		// City
		City   string `form:"city" json:"city" xml:"city"`
		Number *struct {
			// Street name
			Other *string `form:"other,omitempty" json:"other,omitempty" xml:"other,omitempty"`
		} `form:"number,omitempty" json:"number,omitempty" xml:"number,omitempty"`
		// Street name
		Street *string `form:"street,omitempty" json:"street,omitempty" xml:"street,omitempty"`
	} `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	BirthDate     *string `form:"birthDate,omitempty" json:"birthDate,omitempty" xml:"birthDate,omitempty"`
	Country       *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Deceased      *bool   `form:"deceased,omitempty" json:"deceased,omitempty" xml:"deceased,omitempty"`
	Gender        *string `form:"gender,omitempty" json:"gender,omitempty" xml:"gender,omitempty"`
	MultipleBirth *bool   `form:"multiple_birth,omitempty" json:"multiple_birth,omitempty" xml:"multiple_birth,omitempty"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	Review        *string `form:"review,omitempty" json:"review,omitempty" xml:"review,omitempty"`
	Sweetness     *int    `form:"sweetness,omitempty" json:"sweetness,omitempty" xml:"sweetness,omitempty"`
}

// Validate validates the PatientPayload type instance.
func (ut *PatientPayload) Validate() (err error) {
	if ut.Address != nil {
		if ut.Address.City == "" {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`response.address`, "city"))
		}
	}
	if ut.BirthDate != nil {
		if utf8.RuneCountInString(*ut.BirthDate) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.birthDate`, *ut.BirthDate, utf8.RuneCountInString(*ut.BirthDate), 4, true))
		}
	}
	if ut.Country != nil {
		if utf8.RuneCountInString(*ut.Country) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.country`, *ut.Country, utf8.RuneCountInString(*ut.Country), 2, true))
		}
	}
	if ut.Gender != nil {
		if !(*ut.Gender == "male" || *ut.Gender == "female" || *ut.Gender == "other" || *ut.Gender == "unknown") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.gender`, *ut.Gender, []interface{}{"male", "female", "other", "unknown"}))
		}
	}
	if ut.Review != nil {
		if utf8.RuneCountInString(*ut.Review) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.review`, *ut.Review, utf8.RuneCountInString(*ut.Review), 3, true))
		}
	}
	if ut.Review != nil {
		if utf8.RuneCountInString(*ut.Review) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.review`, *ut.Review, utf8.RuneCountInString(*ut.Review), 300, false))
		}
	}
	if ut.Sweetness != nil {
		if *ut.Sweetness < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.sweetness`, *ut.Sweetness, 1, true))
		}
	}
	if ut.Sweetness != nil {
		if *ut.Sweetness > 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.sweetness`, *ut.Sweetness, 5, false))
		}
	}
	return
}

// Payload sent by client to obtain refresh and access token or to refresh an access token.
// see https://tools.ietf.org/html/rfc6749#section-4.1.3 and https://tools.ietf.org/html/rfc6749#section-6
type tokenPayload struct {
	// The authorization code received from the authorization server, used for initial refresh and access token request
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Value MUST be set to "authorization_code" when obtaining initial refresh and access token.
	// Value MUST be set to "refresh_token" when refreshing an access token.
	GrantType *string `form:"grant_type,omitempty" json:"grant_type,omitempty" xml:"grant_type,omitempty"`
	// The redirect_uri parameter specified when making the authorize request to obtain the authorization code, used for initial refresh and access token request
	RedirectURI *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty" xml:"redirect_uri,omitempty"`
	// The refresh token issued to the client, used for refreshing an access token
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// The scope of the access request, used for refreshing an access token
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
}

// Validate validates the tokenPayload type instance.
func (ut *tokenPayload) Validate() (err error) {
	if ut.GrantType == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "grant_type"))
	}
	if ut.GrantType != nil {
		if !(*ut.GrantType == "authorization_code" || *ut.GrantType == "refresh_token") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.grant_type`, *ut.GrantType, []interface{}{"authorization_code", "refresh_token"}))
		}
	}
	return
}

// Publicize creates TokenPayload from tokenPayload
func (ut *tokenPayload) Publicize() *TokenPayload {
	var pub TokenPayload
	if ut.Code != nil {
		pub.Code = ut.Code
	}
	if ut.GrantType != nil {
		pub.GrantType = *ut.GrantType
	}
	if ut.RedirectURI != nil {
		pub.RedirectURI = ut.RedirectURI
	}
	if ut.RefreshToken != nil {
		pub.RefreshToken = ut.RefreshToken
	}
	if ut.Scope != nil {
		pub.Scope = ut.Scope
	}
	return &pub
}

// Payload sent by client to obtain refresh and access token or to refresh an access token.
// see https://tools.ietf.org/html/rfc6749#section-4.1.3 and https://tools.ietf.org/html/rfc6749#section-6
type TokenPayload struct {
	// The authorization code received from the authorization server, used for initial refresh and access token request
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Value MUST be set to "authorization_code" when obtaining initial refresh and access token.
	// Value MUST be set to "refresh_token" when refreshing an access token.
	GrantType string `form:"grant_type" json:"grant_type" xml:"grant_type"`
	// The redirect_uri parameter specified when making the authorize request to obtain the authorization code, used for initial refresh and access token request
	RedirectURI *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty" xml:"redirect_uri,omitempty"`
	// The refresh token issued to the client, used for refreshing an access token
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// The scope of the access request, used for refreshing an access token
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
}

// Validate validates the TokenPayload type instance.
func (ut *TokenPayload) Validate() (err error) {
	if ut.GrantType == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "grant_type"))
	}
	if !(ut.GrantType == "authorization_code" || ut.GrantType == "refresh_token") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.grant_type`, ut.GrantType, []interface{}{"authorization_code", "refresh_token"}))
	}
	return
}

// userPayload user type.
type userPayload struct {
	AddressCity       *string `form:"address_city,omitempty" json:"address_city,omitempty" xml:"address_city,omitempty"`
	AddressLine       *string `form:"address_line,omitempty" json:"address_line,omitempty" xml:"address_line,omitempty"`
	AddressPostalCode *string `form:"address_postal_code,omitempty" json:"address_postal_code,omitempty" xml:"address_postal_code,omitempty"`
	AddressState      *string `form:"address_state,omitempty" json:"address_state,omitempty" xml:"address_state,omitempty"`
	Email             *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	FirstName         *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	LastName          *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	Password          *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	Username          *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// Validate validates the userPayload type instance.
func (ut *userPayload) Validate() (err error) {
	if ut.AddressCity != nil {
		if utf8.RuneCountInString(*ut.AddressCity) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_city`, *ut.AddressCity, utf8.RuneCountInString(*ut.AddressCity), 2, true))
		}
	}
	if ut.AddressLine != nil {
		if utf8.RuneCountInString(*ut.AddressLine) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_line`, *ut.AddressLine, utf8.RuneCountInString(*ut.AddressLine), 2, true))
		}
	}
	if ut.AddressPostalCode != nil {
		if utf8.RuneCountInString(*ut.AddressPostalCode) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_postal_code`, *ut.AddressPostalCode, utf8.RuneCountInString(*ut.AddressPostalCode), 5, true))
		}
	}
	if ut.AddressState != nil {
		if utf8.RuneCountInString(*ut.AddressState) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_state`, *ut.AddressState, utf8.RuneCountInString(*ut.AddressState), 2, true))
		}
	}
	if ut.Email != nil {
		if utf8.RuneCountInString(*ut.Email) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.email`, *ut.Email, utf8.RuneCountInString(*ut.Email), 4, true))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.first_name`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 2, true))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.last_name`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 2, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 2, true))
		}
	}
	if ut.Username != nil {
		if utf8.RuneCountInString(*ut.Username) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.username`, *ut.Username, utf8.RuneCountInString(*ut.Username), 3, true))
		}
	}
	return
}

// Publicize creates UserPayload from userPayload
func (ut *userPayload) Publicize() *UserPayload {
	var pub UserPayload
	if ut.AddressCity != nil {
		pub.AddressCity = ut.AddressCity
	}
	if ut.AddressLine != nil {
		pub.AddressLine = ut.AddressLine
	}
	if ut.AddressPostalCode != nil {
		pub.AddressPostalCode = ut.AddressPostalCode
	}
	if ut.AddressState != nil {
		pub.AddressState = ut.AddressState
	}
	if ut.Email != nil {
		pub.Email = ut.Email
	}
	if ut.FirstName != nil {
		pub.FirstName = ut.FirstName
	}
	if ut.LastName != nil {
		pub.LastName = ut.LastName
	}
	if ut.Password != nil {
		pub.Password = ut.Password
	}
	if ut.Username != nil {
		pub.Username = ut.Username
	}
	return &pub
}

// UserPayload user type.
type UserPayload struct {
	AddressCity       *string `form:"address_city,omitempty" json:"address_city,omitempty" xml:"address_city,omitempty"`
	AddressLine       *string `form:"address_line,omitempty" json:"address_line,omitempty" xml:"address_line,omitempty"`
	AddressPostalCode *string `form:"address_postal_code,omitempty" json:"address_postal_code,omitempty" xml:"address_postal_code,omitempty"`
	AddressState      *string `form:"address_state,omitempty" json:"address_state,omitempty" xml:"address_state,omitempty"`
	Email             *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	FirstName         *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	LastName          *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	Password          *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	Username          *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// Validate validates the UserPayload type instance.
func (ut *UserPayload) Validate() (err error) {
	if ut.AddressCity != nil {
		if utf8.RuneCountInString(*ut.AddressCity) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_city`, *ut.AddressCity, utf8.RuneCountInString(*ut.AddressCity), 2, true))
		}
	}
	if ut.AddressLine != nil {
		if utf8.RuneCountInString(*ut.AddressLine) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_line`, *ut.AddressLine, utf8.RuneCountInString(*ut.AddressLine), 2, true))
		}
	}
	if ut.AddressPostalCode != nil {
		if utf8.RuneCountInString(*ut.AddressPostalCode) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_postal_code`, *ut.AddressPostalCode, utf8.RuneCountInString(*ut.AddressPostalCode), 5, true))
		}
	}
	if ut.AddressState != nil {
		if utf8.RuneCountInString(*ut.AddressState) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_state`, *ut.AddressState, utf8.RuneCountInString(*ut.AddressState), 2, true))
		}
	}
	if ut.Email != nil {
		if utf8.RuneCountInString(*ut.Email) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.email`, *ut.Email, utf8.RuneCountInString(*ut.Email), 4, true))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.first_name`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 2, true))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.last_name`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 2, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 2, true))
		}
	}
	if ut.Username != nil {
		if utf8.RuneCountInString(*ut.Username) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.username`, *ut.Username, utf8.RuneCountInString(*ut.Username), 3, true))
		}
	}
	return
}
