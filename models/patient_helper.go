// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/jamesallain/goa-fhir/design
// --out=$(GOPATH)\src\github.com\jamesallain\goa-fhir
// --version=v1.1.0-dirty
//
// API "Secure": Model Helpers
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"github.com/goadesign/goa"
	"github.com/jamesallain/goa-fhir/app"
	"github.com/jinzhu/gorm"
	"golang.org/x/net/context"
	"time"
)

// MediaType Retrieval Functions

// ListPatient returns an array of view: default.
func (m *PatientDB) ListPatient(ctx context.Context) []*app.Patient {
	defer goa.MeasureSince([]string{"goa", "db", "patient", "listpatient"}, time.Now())

	var native []*Patient
	var objs []*app.Patient
	err := m.Db.Scopes().Table(m.TableName()).Preload("Address").Preload("Identifier").Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Patient", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.PatientToPatient())
	}

	return objs
}

// PatientToPatient loads a Patient and builds the default view of media type Patient.
func (m *Patient) PatientToPatient() *app.Patient {
	patient := &app.Patient{}
	tmp1 := m.Identifier.IdentifierToIdentifierLink()
	patient.Links = &app.PatientLinks{Identifier: tmp1}
	tmp2 := m.Address.AddresToAddresLink()
	patient.Links = &app.PatientLinks{Address: tmp2}
	patient.CreatedAt = m.CreatedAt
	patient.ID = m.ID

	return patient
}

// OnePatient loads a Patient and builds the default view of media type Patient.
func (m *PatientDB) OnePatient(ctx context.Context, id int) (*app.Patient, error) {
	defer goa.MeasureSince([]string{"goa", "db", "patient", "onepatient"}, time.Now())

	var native Patient
	err := m.Db.Scopes().Table(m.TableName()).Preload("Vitals").Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Patient", "error", err.Error())
		return nil, err
	}

	view := *native.PatientToPatient()
	return &view, err
}

// MediaType Retrieval Functions

// ListPatientLink returns an array of view: link.
func (m *PatientDB) ListPatientLink(ctx context.Context) []*app.PatientLink {
	defer goa.MeasureSince([]string{"goa", "db", "patient", "listpatientlink"}, time.Now())

	var native []*Patient
	var objs []*app.PatientLink
	err := m.Db.Scopes().Table(m.TableName()).Preload("Address").Preload("Identifier").Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Patient", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.PatientToPatientLink())
	}

	return objs
}

// PatientToPatientLink loads a Patient and builds the link view of media type Patient.
func (m *Patient) PatientToPatientLink() *app.PatientLink {
	patient := &app.PatientLink{}
	patient.ID = m.ID

	return patient
}

// OnePatientLink loads a Patient and builds the link view of media type Patient.
func (m *PatientDB) OnePatientLink(ctx context.Context, id int) (*app.PatientLink, error) {
	defer goa.MeasureSince([]string{"goa", "db", "patient", "onepatientlink"}, time.Now())

	var native Patient
	err := m.Db.Scopes().Table(m.TableName()).Preload("Vitals").Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Patient", "error", err.Error())
		return nil, err
	}

	view := *native.PatientToPatientLink()
	return &view, err
}

// MediaType Retrieval Functions

// ListPatientTiny returns an array of view: tiny.
func (m *PatientDB) ListPatientTiny(ctx context.Context) []*app.PatientTiny {
	defer goa.MeasureSince([]string{"goa", "db", "patient", "listpatienttiny"}, time.Now())

	var native []*Patient
	var objs []*app.PatientTiny
	err := m.Db.Scopes().Table(m.TableName()).Preload("Address").Preload("Identifier").Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Patient", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.PatientToPatientTiny())
	}

	return objs
}

// PatientToPatientTiny loads a Patient and builds the tiny view of media type Patient.
func (m *Patient) PatientToPatientTiny() *app.PatientTiny {
	patient := &app.PatientTiny{}
	tmp1 := m.Identifier.IdentifierToIdentifierLink()
	patient.Links = &app.PatientLinks{Identifier: tmp1}
	tmp2 := m.Address.AddresToAddresLink()
	patient.Links = &app.PatientLinks{Address: tmp2}
	patient.ID = m.ID

	return patient
}

// OnePatientTiny loads a Patient and builds the tiny view of media type Patient.
func (m *PatientDB) OnePatientTiny(ctx context.Context, id int) (*app.PatientTiny, error) {
	defer goa.MeasureSince([]string{"goa", "db", "patient", "onepatienttiny"}, time.Now())

	var native Patient
	err := m.Db.Scopes().Table(m.TableName()).Preload("Vitals").Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Patient", "error", err.Error())
		return nil, err
	}

	view := *native.PatientToPatientTiny()
	return &view, err
}
