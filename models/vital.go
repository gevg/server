// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/jamesallain/goa-fhir/design
// --out=$(GOPATH)\src\github.com\jamesallain\nosh\server
// --version=v1.1.0-dirty
//
// API "Secure": Models
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"github.com/goadesign/goa"
	"github.com/jamesallain/goa-fhir/app"
	"github.com/jinzhu/gorm"
	"golang.org/x/net/context"
	"time"
)

// Vital Model
type Vital struct {
	ID        int `gorm:"primary_key"` // primary key
	Color     string
	Country   *string
	CreatedAt time.Time
	DeletedAt *time.Time
	Name      string
	PatientID int // Belongs To Patient
	Region    *string
	Review    *string
	Sweetness *int
	UpdatedAt time.Time
	Varietal  string
	Vineyard  string
	Vintage   int
	Patient   Patient
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Vital) TableName() string {
	return "vitals"

}

// VitalDB is the implementation of the storage interface for
// Vital.
type VitalDB struct {
	Db *gorm.DB
}

// NewVitalDB creates a new storage type.
func NewVitalDB(db *gorm.DB) *VitalDB {
	return &VitalDB{Db: db}
}

// DB returns the underlying database.
func (m *VitalDB) DB() interface{} {
	return m.Db
}

// VitalStorage represents the storage interface.
type VitalStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*Vital, error)
	Get(ctx context.Context, id int) (*Vital, error)
	Add(ctx context.Context, vital *Vital) error
	Update(ctx context.Context, vital *Vital) error
	Delete(ctx context.Context, id int) error

	ListVital(ctx context.Context, patientID int) []*app.Vital
	OneVital(ctx context.Context, id int, patientID int) (*app.Vital, error)

	ListVitalFull(ctx context.Context, patientID int) []*app.VitalFull
	OneVitalFull(ctx context.Context, id int, patientID int) (*app.VitalFull, error)

	ListVitalTiny(ctx context.Context, patientID int) []*app.VitalTiny
	OneVitalTiny(ctx context.Context, id int, patientID int) (*app.VitalTiny, error)

	UpdateFromCreateVitalPayload(ctx context.Context, payload *app.CreateVitalPayload, id int) error

	UpdateFromVitalPayload(ctx context.Context, payload *app.VitalPayload, id int) error
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *VitalDB) TableName() string {
	return "vitals"

}

// Belongs To Relationships

// VitalFilterByPatient is a gorm filter for a Belongs To relationship.
func VitalFilterByPatient(patientID int, originaldb *gorm.DB) func(db *gorm.DB) *gorm.DB {
	if patientID > 0 {
		return func(db *gorm.DB) *gorm.DB {
			return db.Where("patient_id = ?", patientID)

		}
	}
	return func(db *gorm.DB) *gorm.DB { return db }
}

// CRUD Functions

// Get returns a single Vital as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *VitalDB) Get(ctx context.Context, id int) (*Vital, error) {
	defer goa.MeasureSince([]string{"goa", "db", "vital", "get"}, time.Now())

	var native Vital
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Vital
func (m *VitalDB) List(ctx context.Context) ([]*Vital, error) {
	defer goa.MeasureSince([]string{"goa", "db", "vital", "list"}, time.Now())

	var objs []*Vital
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *VitalDB) Add(ctx context.Context, model *Vital) error {
	defer goa.MeasureSince([]string{"goa", "db", "vital", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding Vital", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *VitalDB) Update(ctx context.Context, model *Vital) error {
	defer goa.MeasureSince([]string{"goa", "db", "vital", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating Vital", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *VitalDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "vital", "delete"}, time.Now())

	var obj Vital

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting Vital", "error", err.Error())
		return err
	}

	return nil
}

// VitalFromCreateVitalPayload Converts source CreateVitalPayload to target Vital model
// only copying the non-nil fields from the source.
func VitalFromCreateVitalPayload(payload *app.CreateVitalPayload) *Vital {
	vital := &Vital{}
	vital.Color = payload.Color
	if payload.Country != nil {
		vital.Country = payload.Country
	}
	vital.Name = payload.Name
	if payload.Region != nil {
		vital.Region = payload.Region
	}
	if payload.Review != nil {
		vital.Review = payload.Review
	}
	if payload.Sweetness != nil {
		vital.Sweetness = payload.Sweetness
	}
	vital.Varietal = payload.Varietal
	vital.Vineyard = payload.Vineyard
	vital.Vintage = payload.Vintage

	return vital
}

// UpdateFromCreateVitalPayload applies non-nil changes from CreateVitalPayload to the model and saves it
func (m *VitalDB) UpdateFromCreateVitalPayload(ctx context.Context, payload *app.CreateVitalPayload, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "vital", "updatefromcreateVitalPayload"}, time.Now())

	var obj Vital
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&obj).Error
	if err != nil {
		goa.LogError(ctx, "error retrieving Vital", "error", err.Error())
		return err
	}
	obj.Color = payload.Color
	if payload.Country != nil {
		obj.Country = payload.Country
	}
	obj.Name = payload.Name
	if payload.Region != nil {
		obj.Region = payload.Region
	}
	if payload.Review != nil {
		obj.Review = payload.Review
	}
	if payload.Sweetness != nil {
		obj.Sweetness = payload.Sweetness
	}
	obj.Varietal = payload.Varietal
	obj.Vineyard = payload.Vineyard
	obj.Vintage = payload.Vintage

	err = m.Db.Save(&obj).Error
	return err
}

// VitalFromVitalPayload Converts source VitalPayload to target Vital model
// only copying the non-nil fields from the source.
func VitalFromVitalPayload(payload *app.VitalPayload) *Vital {
	vital := &Vital{}
	if payload.Color != nil {
		vital.Color = *payload.Color
	}
	if payload.Country != nil {
		vital.Country = payload.Country
	}
	if payload.Name != nil {
		vital.Name = *payload.Name
	}
	if payload.Region != nil {
		vital.Region = payload.Region
	}
	if payload.Review != nil {
		vital.Review = payload.Review
	}
	if payload.Sweetness != nil {
		vital.Sweetness = payload.Sweetness
	}
	if payload.Varietal != nil {
		vital.Varietal = *payload.Varietal
	}
	if payload.Vineyard != nil {
		vital.Vineyard = *payload.Vineyard
	}
	if payload.Vintage != nil {
		vital.Vintage = *payload.Vintage
	}

	return vital
}

// UpdateFromVitalPayload applies non-nil changes from VitalPayload to the model and saves it
func (m *VitalDB) UpdateFromVitalPayload(ctx context.Context, payload *app.VitalPayload, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "vital", "updatefromvitalPayload"}, time.Now())

	var obj Vital
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&obj).Error
	if err != nil {
		goa.LogError(ctx, "error retrieving Vital", "error", err.Error())
		return err
	}
	if payload.Color != nil {
		obj.Color = *payload.Color
	}
	if payload.Country != nil {
		obj.Country = payload.Country
	}
	if payload.Name != nil {
		obj.Name = *payload.Name
	}
	if payload.Region != nil {
		obj.Region = payload.Region
	}
	if payload.Review != nil {
		obj.Review = payload.Review
	}
	if payload.Sweetness != nil {
		obj.Sweetness = payload.Sweetness
	}
	if payload.Varietal != nil {
		obj.Varietal = *payload.Varietal
	}
	if payload.Vineyard != nil {
		obj.Vineyard = *payload.Vineyard
	}
	if payload.Vintage != nil {
		obj.Vintage = *payload.Vintage
	}

	err = m.Db.Save(&obj).Error
	return err
}
