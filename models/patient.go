// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/goa-fhir/server/design
// --out=$(GOPATH)\src\github.com\goa-fhir\server
// --version=v1.1.0-dirty
//
// API "Secure": Models
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"golang.org/x/net/context"
	"time"
)

// Cellar Patient
type Patient struct {
	ID        int `gorm:"primary_key"` // primary key
	CreatedAt time.Time
	DeletedAt *time.Time
	UpdatedAt time.Time
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Patient) TableName() string {
	return "patients"

}

// PatientDB is the implementation of the storage interface for
// Patient.
type PatientDB struct {
	Db *gorm.DB
}

// NewPatientDB creates a new storage type.
func NewPatientDB(db *gorm.DB) *PatientDB {
	return &PatientDB{Db: db}
}

// DB returns the underlying database.
func (m *PatientDB) DB() interface{} {
	return m.Db
}

// PatientStorage represents the storage interface.
type PatientStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*Patient, error)
	Get(ctx context.Context, id int) (*Patient, error)
	Add(ctx context.Context, patient *Patient) error
	Update(ctx context.Context, patient *Patient) error
	Delete(ctx context.Context, id int) error
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *PatientDB) TableName() string {
	return "patients"

}

// CRUD Functions

// Get returns a single Patient as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *PatientDB) Get(ctx context.Context, id int) (*Patient, error) {
	defer goa.MeasureSince([]string{"goa", "db", "patient", "get"}, time.Now())

	var native Patient
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Patient
func (m *PatientDB) List(ctx context.Context) ([]*Patient, error) {
	defer goa.MeasureSince([]string{"goa", "db", "patient", "list"}, time.Now())

	var objs []*Patient
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *PatientDB) Add(ctx context.Context, model *Patient) error {
	defer goa.MeasureSince([]string{"goa", "db", "patient", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding Patient", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *PatientDB) Update(ctx context.Context, model *Patient) error {
	defer goa.MeasureSince([]string{"goa", "db", "patient", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating Patient", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *PatientDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "patient", "delete"}, time.Now())

	var obj Patient

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting Patient", "error", err.Error())
		return err
	}

	return nil
}
