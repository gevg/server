// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/goa-fhir/server/design
// --out=$(GOPATH)\src\github.com\goa-fhir\server
// --version=v1.1.0-dirty
//
// API "goa-FHIR": Application Security
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"net/http"
)

type (
	// Private type used to store auth handler info in request context
	authMiddlewareKey string
)

// UseOauth2ClientBasicAuthMiddleware mounts the oauth2_client_basic_auth auth middleware onto the service.
func UseOauth2ClientBasicAuthMiddleware(service *goa.Service, middleware goa.Middleware) {
	service.Context = context.WithValue(service.Context, authMiddlewareKey("oauth2_client_basic_auth"), middleware)
}

// NewOauth2ClientBasicAuthSecurity creates a oauth2_client_basic_auth security definition.
func NewOauth2ClientBasicAuthSecurity() *goa.BasicAuthSecurity {
	def := goa.BasicAuthSecurity{}
	def.Description = "Basic auth used by client to make the requests needed to retrieve and refresh access tokens"
	return &def
}

// UseOAuth2Middleware mounts the OAuth2 auth middleware onto the service.
func UseOAuth2Middleware(service *goa.Service, middleware goa.Middleware) {
	service.Context = context.WithValue(service.Context, authMiddlewareKey("OAuth2"), middleware)
}

// NewOAuth2Security creates a OAuth2 security definition.
func NewOAuth2Security() *goa.OAuth2Security {
	def := goa.OAuth2Security{
		Flow:             "accessCode",
		TokenURL:         "https://localhost:8088/oauth2/token",
		AuthorizationURL: "https://localhost:8088/oauth2/auth",
		Scopes: map[string]string{
			"api:read":  "Scope granting read access",
			"api:write": "Scope granting write access",
		}}
	return &def
}

// UseJWTMiddleware mounts the jwt auth middleware onto the service.
func UseJWTMiddleware(service *goa.Service, middleware goa.Middleware) {
	service.Context = context.WithValue(service.Context, authMiddlewareKey("jwt"), middleware)
}

// NewJWTSecurity creates a jwt security definition.
func NewJWTSecurity() *goa.JWTSecurity {
	def := goa.JWTSecurity{
		In:       goa.LocHeader,
		Name:     "Authorization",
		TokenURL: "",
		Scopes: map[string]string{
			"api:access": "API access",
		},
	}
	return &def
}

// UseSigninBasicAuthMiddleware mounts the SigninBasicAuth auth middleware onto the service.
func UseSigninBasicAuthMiddleware(service *goa.Service, middleware goa.Middleware) {
	service.Context = context.WithValue(service.Context, authMiddlewareKey("SigninBasicAuth"), middleware)
}

// NewSigninBasicAuthSecurity creates a SigninBasicAuth security definition.
func NewSigninBasicAuthSecurity() *goa.BasicAuthSecurity {
	def := goa.BasicAuthSecurity{}
	return &def
}

// handleSecurity creates a handler that runs the auth middleware for the security scheme.
func handleSecurity(schemeName string, h goa.Handler, scopes ...string) goa.Handler {
	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		scheme := ctx.Value(authMiddlewareKey(schemeName))
		am, ok := scheme.(goa.Middleware)
		if !ok {
			return goa.NoAuthMiddleware(schemeName)
		}
		ctx = goa.WithRequiredScopes(ctx, scopes)
		return am(h)(ctx, rw, req)
	}
}
