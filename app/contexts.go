// Code generated by goagen v1.1.0, command line:
// $ goagen
// --design=github.com/goa-fhir/server/design
// --out=$(GOPATH)\src\github.com\goa-fhir\server
// --version=v1.1.0-dirty
//
// API "goa-FHIR": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"strconv"
	"time"
)

// ReadAllergyIntoleranceContext provides the AllergyIntolerance read action context.
type ReadAllergyIntoleranceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained            *string
	ContainedType        *string
	Count                *int
	Elements             *string
	Has                  *string
	ID                   *int
	Include              *string
	LastUpdate           *time.Time
	List                 *string
	Profile              *string
	Query                *string
	Revinclude           *string
	Security             *string
	Sort                 *string
	Summary              *string
	Tag                  *string
	Text                 *string
	Type                 *string
	Allergy              string
	AllergyIntoleranceID *int
	PatientID            int
}

// NewReadAllergyIntoleranceContext parses the incoming request URL and body, performs validations and creates the
// context used by the AllergyIntolerance controller read action.
func NewReadAllergyIntoleranceContext(ctx context.Context, service *goa.Service) (*ReadAllergyIntoleranceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ReadAllergyIntoleranceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp2 := count
			tmp1 := &tmp2
			rctx.Count = tmp1
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp4 := id
			tmp3 := &tmp4
			rctx.ID = tmp3
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp5 := &lastUpdate
			rctx.LastUpdate = tmp5
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	paramAllergy := req.Params["allergy"]
	if len(paramAllergy) > 0 {
		rawAllergy := paramAllergy[0]
		rctx.Allergy = rawAllergy
	}
	paramAllergyIntoleranceID := req.Params["allergy.intoleranceID"]
	if len(paramAllergyIntoleranceID) > 0 {
		rawAllergyIntoleranceID := paramAllergyIntoleranceID[0]
		if allergyIntoleranceID, err2 := strconv.Atoi(rawAllergyIntoleranceID); err2 == nil {
			tmp7 := allergyIntoleranceID
			tmp6 := &tmp7
			rctx.AllergyIntoleranceID = tmp6
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("allergy.intoleranceID", rawAllergyIntoleranceID, "integer"))
		}
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ReadAllergyIntoleranceContext) OK(r *AllergyIntoleranceMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.allergy.intolerance+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ReadAllergyIntoleranceContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ReadAllergyIntoleranceContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ReadNutritionRequestContext provides the NutritionRequest read action context.
type ReadNutritionRequestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained          *string
	ContainedType      *string
	Count              *int
	Elements           *string
	Has                *string
	ID                 *int
	Include            *string
	LastUpdate         *time.Time
	List               *string
	Profile            *string
	Query              *string
	Revinclude         *string
	Security           *string
	Sort               *string
	Summary            *string
	Tag                *string
	Text               *string
	Type               *string
	NutritionRequestID int
	PatientID          int
}

// NewReadNutritionRequestContext parses the incoming request URL and body, performs validations and creates the
// context used by the NutritionRequest controller read action.
func NewReadNutritionRequestContext(ctx context.Context, service *goa.Service) (*ReadNutritionRequestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ReadNutritionRequestContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp10 := count
			tmp9 := &tmp10
			rctx.Count = tmp9
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp12 := id
			tmp11 := &tmp12
			rctx.ID = tmp11
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp13 := &lastUpdate
			rctx.LastUpdate = tmp13
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	paramNutritionRequestID := req.Params["nutrition_requestID"]
	if len(paramNutritionRequestID) > 0 {
		rawNutritionRequestID := paramNutritionRequestID[0]
		if nutritionRequestID, err2 := strconv.Atoi(rawNutritionRequestID); err2 == nil {
			rctx.NutritionRequestID = nutritionRequestID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("nutrition_requestID", rawNutritionRequestID, "integer"))
		}
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ReadNutritionRequestContext) OK(r *NutritionRequestMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.nutrition.request+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ReadNutritionRequestContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ReadNutritionRequestContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowObservationContext provides the Observation show action context.
type ShowObservationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
	ObservationID int
	PatientID     int
}

// NewShowObservationContext parses the incoming request URL and body, performs validations and creates the
// context used by the Observation controller show action.
func NewShowObservationContext(ctx context.Context, service *goa.Service) (*ShowObservationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowObservationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp17 := count
			tmp16 := &tmp17
			rctx.Count = tmp16
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp19 := id
			tmp18 := &tmp19
			rctx.ID = tmp18
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp20 := &lastUpdate
			rctx.LastUpdate = tmp20
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	paramObservationID := req.Params["observationID"]
	if len(paramObservationID) > 0 {
		rawObservationID := paramObservationID[0]
		if observationID, err2 := strconv.Atoi(rawObservationID); err2 == nil {
			rctx.ObservationID = observationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("observationID", rawObservationID, "integer"))
		}
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowObservationContext) OK(r *ObservationMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.observation+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowObservationContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowObservationContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// HealthHealthContext provides the health health action context.
type HealthHealthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
}

// NewHealthHealthContext parses the incoming request URL and body, performs validations and creates the
// context used by the health controller health action.
func NewHealthHealthContext(ctx context.Context, service *goa.Service) (*HealthHealthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := HealthHealthContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp24 := count
			tmp23 := &tmp24
			rctx.Count = tmp23
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp26 := id
			tmp25 := &tmp26
			rctx.ID = tmp25
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp27 := &lastUpdate
			rctx.LastUpdate = tmp27
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HealthHealthContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// AuthorizeOauth2ProviderContext provides the oauth2_provider authorize action context.
type AuthorizeOauth2ProviderContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
	ClientID      string
	RedirectURI   *string
	ResponseType  string
	Scope         *string
	State         *string
}

// NewAuthorizeOauth2ProviderContext parses the incoming request URL and body, performs validations and creates the
// context used by the oauth2_provider controller authorize action.
func NewAuthorizeOauth2ProviderContext(ctx context.Context, service *goa.Service) (*AuthorizeOauth2ProviderContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := AuthorizeOauth2ProviderContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp29 := count
			tmp28 := &tmp29
			rctx.Count = tmp28
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp31 := id
			tmp30 := &tmp31
			rctx.ID = tmp30
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp32 := &lastUpdate
			rctx.LastUpdate = tmp32
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	paramClientID := req.Params["client_id"]
	if len(paramClientID) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("client_id"))
	} else {
		rawClientID := paramClientID[0]
		rctx.ClientID = rawClientID
	}
	paramRedirectURI := req.Params["redirect_uri"]
	if len(paramRedirectURI) > 0 {
		rawRedirectURI := paramRedirectURI[0]
		rctx.RedirectURI = &rawRedirectURI
	}
	paramResponseType := req.Params["response_type"]
	if len(paramResponseType) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("response_type"))
	} else {
		rawResponseType := paramResponseType[0]
		rctx.ResponseType = rawResponseType
		if !(rctx.ResponseType == "code") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response_type`, rctx.ResponseType, []interface{}{"code"}))
		}
	}
	paramScope := req.Params["scope"]
	if len(paramScope) > 0 {
		rawScope := paramScope[0]
		rctx.Scope = &rawScope
	}
	paramState := req.Params["state"]
	if len(paramState) > 0 {
		rawState := paramState[0]
		rctx.State = &rawState
	}
	return &rctx, err
}

// Found sends a HTTP response with status code 302.
func (ctx *AuthorizeOauth2ProviderContext) Found() error {
	ctx.ResponseData.WriteHeader(302)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AuthorizeOauth2ProviderContext) BadRequest(r *OAuth2ErrorMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.fhir.oauth2.error+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// GetTokenOauth2ProviderContext provides the oauth2_provider get_token action context.
type GetTokenOauth2ProviderContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
	Payload       *TokenPayload
}

// NewGetTokenOauth2ProviderContext parses the incoming request URL and body, performs validations and creates the
// context used by the oauth2_provider controller get_token action.
func NewGetTokenOauth2ProviderContext(ctx context.Context, service *goa.Service) (*GetTokenOauth2ProviderContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := GetTokenOauth2ProviderContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp34 := count
			tmp33 := &tmp34
			rctx.Count = tmp33
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp36 := id
			tmp35 := &tmp36
			rctx.ID = tmp35
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp37 := &lastUpdate
			rctx.LastUpdate = tmp37
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetTokenOauth2ProviderContext) OK(r *TokenMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.fhir.oauth2.token+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetTokenOauth2ProviderContext) BadRequest(r *OAuth2ErrorMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.fhir.oauth2.error+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// CreatePatientContext provides the patient create action context.
type CreatePatientContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
	Payload       *CreatePatientPayload
}

// NewCreatePatientContext parses the incoming request URL and body, performs validations and creates the
// context used by the patient controller create action.
func NewCreatePatientContext(ctx context.Context, service *goa.Service) (*CreatePatientContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := CreatePatientContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp39 := count
			tmp38 := &tmp39
			rctx.Count = tmp38
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp41 := id
			tmp40 := &tmp41
			rctx.ID = tmp40
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp42 := &lastUpdate
			rctx.LastUpdate = tmp42
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	return &rctx, err
}

// createPatientPayload is the patient create action payload.
type createPatientPayload struct {
	// A name associated with the individual.
	Name []*humanName `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createPatientPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	for _, e := range payload.Name {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Publicize creates CreatePatientPayload from createPatientPayload
func (payload *createPatientPayload) Publicize() *CreatePatientPayload {
	var pub CreatePatientPayload
	if payload.Name != nil {
		pub.Name = make([]*HumanName, len(payload.Name))
		for i2, elem2 := range payload.Name {
			pub.Name[i2] = elem2.Publicize()
		}
	}
	return &pub
}

// CreatePatientPayload is the patient create action payload.
type CreatePatientPayload struct {
	// A name associated with the individual.
	Name []*HumanName `form:"name" json:"name" xml:"name"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreatePatientPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	for _, e := range payload.Name {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreatePatientContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreatePatientContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeletePatientContext provides the patient delete action context.
type DeletePatientContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
	PatientID     int
}

// NewDeletePatientContext parses the incoming request URL and body, performs validations and creates the
// context used by the patient controller delete action.
func NewDeletePatientContext(ctx context.Context, service *goa.Service) (*DeletePatientContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := DeletePatientContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp44 := count
			tmp43 := &tmp44
			rctx.Count = tmp43
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp46 := id
			tmp45 := &tmp46
			rctx.ID = tmp45
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp47 := &lastUpdate
			rctx.LastUpdate = tmp47
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeletePatientContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeletePatientContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeletePatientContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ReadPatientContext provides the patient read action context.
type ReadPatientContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
	PatientID     int
	Payload       *PatientPayload
}

// NewReadPatientContext parses the incoming request URL and body, performs validations and creates the
// context used by the patient controller read action.
func NewReadPatientContext(ctx context.Context, service *goa.Service) (*ReadPatientContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ReadPatientContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp50 := count
			tmp49 := &tmp50
			rctx.Count = tmp49
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp52 := id
			tmp51 := &tmp52
			rctx.ID = tmp51
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp53 := &lastUpdate
			rctx.LastUpdate = tmp53
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ReadPatientContext) OK(r *PatientMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.patient+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ReadPatientContext) OKLink(r *PatientMediaLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.patient+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ReadPatientContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ReadPatientContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// SearchPatientContext provides the patient search action context.
type SearchPatientContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
	Active        *bool
	BirthDate     []time.Time
	Gender        *string
	Name          []string
	Payload       *PatientPayload
}

// NewSearchPatientContext parses the incoming request URL and body, performs validations and creates the
// context used by the patient controller search action.
func NewSearchPatientContext(ctx context.Context, service *goa.Service) (*SearchPatientContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := SearchPatientContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp56 := count
			tmp55 := &tmp56
			rctx.Count = tmp55
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp58 := id
			tmp57 := &tmp58
			rctx.ID = tmp57
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp59 := &lastUpdate
			rctx.LastUpdate = tmp59
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	paramActive := req.Params["active"]
	if len(paramActive) > 0 {
		rawActive := paramActive[0]
		if active, err2 := strconv.ParseBool(rawActive); err2 == nil {
			tmp60 := &active
			rctx.Active = tmp60
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("active", rawActive, "boolean"))
		}
	}
	paramBirthDate := req.Params["birthDate"]
	if len(paramBirthDate) > 0 {
		params := make([]time.Time, len(paramBirthDate))
		for i, rawBirthDate := range paramBirthDate {
			if birthDate, err2 := time.Parse(time.RFC3339, rawBirthDate); err2 == nil {
				params[i] = birthDate
			} else {
				err = goa.MergeErrors(err, goa.InvalidParamTypeError("birthDate", rawBirthDate, "datetime"))
			}
		}
		rctx.BirthDate = params
	}
	paramGender := req.Params["gender"]
	if len(paramGender) > 0 {
		rawGender := paramGender[0]
		rctx.Gender = &rawGender
		if rctx.Gender != nil {
			if !(*rctx.Gender == "male" || *rctx.Gender == "female" || *rctx.Gender == "other" || *rctx.Gender == "unknown") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`gender`, *rctx.Gender, []interface{}{"male", "female", "other", "unknown"}))
			}
		}
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		params := paramName
		rctx.Name = params
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SearchPatientContext) OK(r PatientMediaCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.patient+json; type=collection")
	if r == nil {
		r = PatientMediaCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SearchPatientContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *SearchPatientContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdatePatientContext provides the patient update action context.
type UpdatePatientContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
	PatientID     int
	Payload       *UpdatePatientPayload
}

// NewUpdatePatientContext parses the incoming request URL and body, performs validations and creates the
// context used by the patient controller update action.
func NewUpdatePatientContext(ctx context.Context, service *goa.Service) (*UpdatePatientContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := UpdatePatientContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp63 := count
			tmp62 := &tmp63
			rctx.Count = tmp62
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp65 := id
			tmp64 := &tmp65
			rctx.ID = tmp64
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp66 := &lastUpdate
			rctx.LastUpdate = tmp66
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
	}
	return &rctx, err
}

// updatePatientPayload is the patient update action payload.
type updatePatientPayload struct {
	// A name associated with the individual.
	Name []*humanName `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updatePatientPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	for _, e := range payload.Name {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Publicize creates UpdatePatientPayload from updatePatientPayload
func (payload *updatePatientPayload) Publicize() *UpdatePatientPayload {
	var pub UpdatePatientPayload
	if payload.Name != nil {
		pub.Name = make([]*HumanName, len(payload.Name))
		for i2, elem2 := range payload.Name {
			pub.Name[i2] = elem2.Publicize()
		}
	}
	return &pub
}

// UpdatePatientPayload is the patient update action payload.
type UpdatePatientPayload struct {
	// A name associated with the individual.
	Name []*HumanName `form:"name" json:"name" xml:"name"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdatePatientPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	for _, e := range payload.Name {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdatePatientContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdatePatientContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdatePatientContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// VreadPatientContext provides the patient vread action context.
type VreadPatientContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
	PatientID     int
	Payload       *PatientPayload
}

// NewVreadPatientContext parses the incoming request URL and body, performs validations and creates the
// context used by the patient controller vread action.
func NewVreadPatientContext(ctx context.Context, service *goa.Service) (*VreadPatientContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := VreadPatientContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp69 := count
			tmp68 := &tmp69
			rctx.Count = tmp68
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp71 := id
			tmp70 := &tmp71
			rctx.ID = tmp70
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp72 := &lastUpdate
			rctx.LastUpdate = tmp72
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *VreadPatientContext) OK(r *PatientMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.patient+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *VreadPatientContext) OKLink(r *PatientMediaLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.patient+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *VreadPatientContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *VreadPatientContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// CreateUserContext provides the user create action context.
type CreateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
	Payload       *CreateUserPayload
}

// NewCreateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller create action.
func NewCreateUserContext(ctx context.Context, service *goa.Service) (*CreateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := CreateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp75 := count
			tmp74 := &tmp75
			rctx.Count = tmp74
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp77 := id
			tmp76 := &tmp77
			rctx.ID = tmp76
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp78 := &lastUpdate
			rctx.LastUpdate = tmp78
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	return &rctx, err
}

// createUserPayload is the user create action payload.
type createUserPayload struct {
	// Email of user
	Email    *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createUserPayload) Validate() (err error) {
	if payload.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *payload.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, *payload.Email, goa.FormatEmail, err2))
		}
	}
	return
}

// Publicize creates CreateUserPayload from createUserPayload
func (payload *createUserPayload) Publicize() *CreateUserPayload {
	var pub CreateUserPayload
	if payload.Email != nil {
		pub.Email = *payload.Email
	}
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	return &pub
}

// CreateUserPayload is the user create action payload.
type CreateUserPayload struct {
	// Email of user
	Email    string `form:"email" json:"email" xml:"email"`
	Password string `form:"password" json:"password" xml:"password"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateUserPayload) Validate() (err error) {
	if payload.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, payload.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, payload.Email, goa.FormatEmail, err2))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateUserContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteUserContext provides the user delete action context.
type DeleteUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
	UserID        int
}

// NewDeleteUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller delete action.
func NewDeleteUserContext(ctx context.Context, service *goa.Service) (*DeleteUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := DeleteUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp80 := count
			tmp79 := &tmp80
			rctx.Count = tmp79
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp82 := id
			tmp81 := &tmp82
			rctx.ID = tmp81
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp83 := &lastUpdate
			rctx.LastUpdate = tmp83
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListUserContext provides the user list action context.
type ListUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
}

// NewListUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller list action.
func NewListUserContext(ctx context.Context, service *goa.Service) (*ListUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ListUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp86 := count
			tmp85 := &tmp86
			rctx.Count = tmp85
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp88 := id
			tmp87 := &tmp88
			rctx.ID = tmp87
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp89 := &lastUpdate
			rctx.LastUpdate = tmp89
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListUserContext) OK(r UserMediaCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	if r == nil {
		r = UserMediaCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListUserContext) OKLink(r UserMediaLinkCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	if r == nil {
		r = UserMediaLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ListUserContext) OKTiny(r UserMediaTinyCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	if r == nil {
		r = UserMediaTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// SecureUserContext provides the user secure action context.
type SecureUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
	Fail          *bool
}

// NewSecureUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller secure action.
func NewSecureUserContext(ctx context.Context, service *goa.Service) (*SecureUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := SecureUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp91 := count
			tmp90 := &tmp91
			rctx.Count = tmp90
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp93 := id
			tmp92 := &tmp93
			rctx.ID = tmp92
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp94 := &lastUpdate
			rctx.LastUpdate = tmp94
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	paramFail := req.Params["fail"]
	if len(paramFail) > 0 {
		rawFail := paramFail[0]
		if fail, err2 := strconv.ParseBool(rawFail); err2 == nil {
			tmp95 := &fail
			rctx.Fail = tmp95
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("fail", rawFail, "boolean"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SecureUserContext) OK(r *Success) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.fhir.security.success")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SecureUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// ShowUserContext provides the user show action context.
type ShowUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
	UserID        int
}

// NewShowUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller show action.
func NewShowUserContext(ctx context.Context, service *goa.Service) (*ShowUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp97 := count
			tmp96 := &tmp97
			rctx.Count = tmp96
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp99 := id
			tmp98 := &tmp99
			rctx.ID = tmp98
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp100 := &lastUpdate
			rctx.LastUpdate = tmp100
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`userID`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowUserContext) OK(r *UserMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowUserContext) OKLink(r *UserMediaLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ShowUserContext) OKTiny(r *UserMediaTiny) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// SigninUserContext provides the user signin action context.
type SigninUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
	Payload       *SigninUserPayload
}

// NewSigninUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller signin action.
func NewSigninUserContext(ctx context.Context, service *goa.Service) (*SigninUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := SigninUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp103 := count
			tmp102 := &tmp103
			rctx.Count = tmp102
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp105 := id
			tmp104 := &tmp105
			rctx.ID = tmp104
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp106 := &lastUpdate
			rctx.LastUpdate = tmp106
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	return &rctx, err
}

// signinUserPayload is the user signin action payload.
type signinUserPayload struct {
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Username of user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *signinUserPayload) Validate() (err error) {
	if payload.Username == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	return
}

// Publicize creates SigninUserPayload from signinUserPayload
func (payload *signinUserPayload) Publicize() *SigninUserPayload {
	var pub SigninUserPayload
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	if payload.Username != nil {
		pub.Username = *payload.Username
	}
	return &pub
}

// SigninUserPayload is the user signin action payload.
type SigninUserPayload struct {
	Password string `form:"password" json:"password" xml:"password"`
	// Username of user
	Username string `form:"username" json:"username" xml:"username"`
}

// Validate runs the validation rules defined in the design.
func (payload *SigninUserPayload) Validate() (err error) {
	if payload.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *SigninUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SigninUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SigninUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *SigninUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// SignupUserContext provides the user signup action context.
type SignupUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
	Payload       *SignupUserPayload
}

// NewSignupUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller signup action.
func NewSignupUserContext(ctx context.Context, service *goa.Service) (*SignupUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := SignupUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp108 := count
			tmp107 := &tmp108
			rctx.Count = tmp107
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp110 := id
			tmp109 := &tmp110
			rctx.ID = tmp109
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp111 := &lastUpdate
			rctx.LastUpdate = tmp111
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	return &rctx, err
}

// signupUserPayload is the user signup action payload.
type signupUserPayload struct {
	// Name of city, town etc.
	AddressCity *string `form:"address_city,omitempty" json:"address_city,omitempty" xml:"address_city,omitempty"`
	// Street name, number, direction & P.O. Box etc.
	AddressLine *string `form:"address_line,omitempty" json:"address_line,omitempty" xml:"address_line,omitempty"`
	// Postal code for area
	AddressPostalCode *int `form:"address_postal_code,omitempty" json:"address_postal_code,omitempty" xml:"address_postal_code,omitempty"`
	// Sub-unit of country (abbreviations ok)
	AddressState *string `form:"address_state,omitempty" json:"address_state,omitempty" xml:"address_state,omitempty"`
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name of user
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name of user
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Username of user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *signupUserPayload) Validate() (err error) {
	if payload.Username == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "first_name"))
	}
	if payload.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "last_name"))
	}
	if payload.AddressLine == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_line"))
	}
	if payload.AddressCity == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_city"))
	}
	if payload.AddressState == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_state"))
	}
	if payload.AddressPostalCode == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_postal_code"))
	}
	if payload.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *payload.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, *payload.Email, goa.FormatEmail, err2))
		}
	}
	return
}

// Publicize creates SignupUserPayload from signupUserPayload
func (payload *signupUserPayload) Publicize() *SignupUserPayload {
	var pub SignupUserPayload
	if payload.AddressCity != nil {
		pub.AddressCity = *payload.AddressCity
	}
	if payload.AddressLine != nil {
		pub.AddressLine = *payload.AddressLine
	}
	if payload.AddressPostalCode != nil {
		pub.AddressPostalCode = *payload.AddressPostalCode
	}
	if payload.AddressState != nil {
		pub.AddressState = *payload.AddressState
	}
	if payload.Email != nil {
		pub.Email = *payload.Email
	}
	if payload.FirstName != nil {
		pub.FirstName = *payload.FirstName
	}
	if payload.LastName != nil {
		pub.LastName = *payload.LastName
	}
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	if payload.Username != nil {
		pub.Username = *payload.Username
	}
	return &pub
}

// SignupUserPayload is the user signup action payload.
type SignupUserPayload struct {
	// Name of city, town etc.
	AddressCity string `form:"address_city" json:"address_city" xml:"address_city"`
	// Street name, number, direction & P.O. Box etc.
	AddressLine string `form:"address_line" json:"address_line" xml:"address_line"`
	// Postal code for area
	AddressPostalCode int `form:"address_postal_code" json:"address_postal_code" xml:"address_postal_code"`
	// Sub-unit of country (abbreviations ok)
	AddressState string `form:"address_state" json:"address_state" xml:"address_state"`
	// Email of user
	Email string `form:"email" json:"email" xml:"email"`
	// First name of user
	FirstName string `form:"first_name" json:"first_name" xml:"first_name"`
	// Last name of user
	LastName string `form:"last_name" json:"last_name" xml:"last_name"`
	Password string `form:"password" json:"password" xml:"password"`
	// Username of user
	Username string `form:"username" json:"username" xml:"username"`
}

// Validate runs the validation rules defined in the design.
func (payload *SignupUserPayload) Validate() (err error) {
	if payload.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.FirstName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "first_name"))
	}
	if payload.LastName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "last_name"))
	}
	if payload.AddressLine == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_line"))
	}
	if payload.AddressCity == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_city"))
	}
	if payload.AddressState == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_state"))
	}

	if err2 := goa.ValidateFormat(goa.FormatEmail, payload.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, payload.Email, goa.FormatEmail, err2))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *SignupUserContext) OK(r *UserMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *SignupUserContext) OKLink(r *UserMediaLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *SignupUserContext) OKTiny(r *UserMediaTiny) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *SignupUserContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SignupUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// UnsecureUserContext provides the user unsecure action context.
type UnsecureUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
}

// NewUnsecureUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller unsecure action.
func NewUnsecureUserContext(ctx context.Context, service *goa.Service) (*UnsecureUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := UnsecureUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp113 := count
			tmp112 := &tmp113
			rctx.Count = tmp112
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp115 := id
			tmp114 := &tmp115
			rctx.ID = tmp114
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp116 := &lastUpdate
			rctx.LastUpdate = tmp116
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UnsecureUserContext) OK(r *UserMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *UnsecureUserContext) OKLink(r *UserMediaLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *UnsecureUserContext) OKTiny(r *UserMediaTiny) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// UpdateUserContext provides the user update action context.
type UpdateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contained     *string
	ContainedType *string
	Count         *int
	Elements      *string
	Has           *string
	ID            *int
	Include       *string
	LastUpdate    *time.Time
	List          *string
	Profile       *string
	Query         *string
	Revinclude    *string
	Security      *string
	Sort          *string
	Summary       *string
	Tag           *string
	Text          *string
	Type          *string
	UserID        int
	Payload       *UpdateUserPayload
}

// NewUpdateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller update action.
func NewUpdateUserContext(ctx context.Context, service *goa.Service) (*UpdateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := UpdateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContained := req.Params["_contained"]
	if len(paramContained) > 0 {
		rawContained := paramContained[0]
		rctx.Contained = &rawContained
	}
	paramContainedType := req.Params["_containedType"]
	if len(paramContainedType) > 0 {
		rawContainedType := paramContainedType[0]
		rctx.ContainedType = &rawContainedType
	}
	paramCount := req.Params["_count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp118 := count
			tmp117 := &tmp118
			rctx.Count = tmp117
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_count", rawCount, "integer"))
		}
	}
	paramElements := req.Params["_elements"]
	if len(paramElements) > 0 {
		rawElements := paramElements[0]
		rctx.Elements = &rawElements
	}
	paramHas := req.Params["_has"]
	if len(paramHas) > 0 {
		rawHas := paramHas[0]
		rctx.Has = &rawHas
	}
	paramID := req.Params["_id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp120 := id
			tmp119 := &tmp120
			rctx.ID = tmp119
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_id", rawID, "integer"))
		}
	}
	paramInclude := req.Params["_include"]
	if len(paramInclude) > 0 {
		rawInclude := paramInclude[0]
		rctx.Include = &rawInclude
	}
	paramLastUpdate := req.Params["_lastUpdate"]
	if len(paramLastUpdate) > 0 {
		rawLastUpdate := paramLastUpdate[0]
		if lastUpdate, err2 := time.Parse(time.RFC3339, rawLastUpdate); err2 == nil {
			tmp121 := &lastUpdate
			rctx.LastUpdate = tmp121
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("_lastUpdate", rawLastUpdate, "datetime"))
		}
	}
	paramList := req.Params["_list"]
	if len(paramList) > 0 {
		rawList := paramList[0]
		rctx.List = &rawList
	}
	paramProfile := req.Params["_profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	paramQuery := req.Params["_query"]
	if len(paramQuery) > 0 {
		rawQuery := paramQuery[0]
		rctx.Query = &rawQuery
	}
	paramRevinclude := req.Params["_revinclude"]
	if len(paramRevinclude) > 0 {
		rawRevinclude := paramRevinclude[0]
		rctx.Revinclude = &rawRevinclude
	}
	paramSecurity := req.Params["_security"]
	if len(paramSecurity) > 0 {
		rawSecurity := paramSecurity[0]
		rctx.Security = &rawSecurity
	}
	paramSort := req.Params["_sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "" || *rctx.Sort == "-") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`_sort`, *rctx.Sort, []interface{}{"", "-"}))
			}
		}
	}
	paramSummary := req.Params["_summary"]
	if len(paramSummary) > 0 {
		rawSummary := paramSummary[0]
		rctx.Summary = &rawSummary
	}
	paramTag := req.Params["_tag"]
	if len(paramTag) > 0 {
		rawTag := paramTag[0]
		rctx.Tag = &rawTag
	}
	paramText := req.Params["_text"]
	if len(paramText) > 0 {
		rawText := paramText[0]
		rctx.Text = &rawText
	}
	paramType := req.Params["_type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// updateUserPayload is the user update action payload.
type updateUserPayload struct {
	// Email of user
	Email    *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateUserPayload) Validate() (err error) {
	if payload.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *payload.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, *payload.Email, goa.FormatEmail, err2))
		}
	}
	return
}

// Publicize creates UpdateUserPayload from updateUserPayload
func (payload *updateUserPayload) Publicize() *UpdateUserPayload {
	var pub UpdateUserPayload
	if payload.Email != nil {
		pub.Email = *payload.Email
	}
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	return &pub
}

// UpdateUserPayload is the user update action payload.
type UpdateUserPayload struct {
	// Email of user
	Email    string `form:"email" json:"email" xml:"email"`
	Password string `form:"password" json:"password" xml:"password"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateUserPayload) Validate() (err error) {
	if payload.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, payload.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, payload.Email, goa.FormatEmail, err2))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
