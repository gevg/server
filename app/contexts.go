// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/goa-fhir/server/design
// --out=$(GOPATH)\src\github.com\goa-fhir\server
// --version=v1.1.0-dirty
//
// API "Secure": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"strconv"
	"unicode/utf8"
)

// CreateAllergyIntoleranceContext provides the AllergyIntolerance create action context.
type CreateAllergyIntoleranceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PatientID int
	Payload   *CreateAllergyIntolerancePayload
}

// NewCreateAllergyIntoleranceContext parses the incoming request URL and body, performs validations and creates the
// context used by the AllergyIntolerance controller create action.
func NewCreateAllergyIntoleranceContext(ctx context.Context, service *goa.Service) (*CreateAllergyIntoleranceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := CreateAllergyIntoleranceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// createAllergyIntolerancePayload is the AllergyIntolerance create action payload.
type createAllergyIntolerancePayload struct {
	Active  *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	Address *struct {
		// City
		City   *string `form:"city,omitempty" json:"city,omitempty" xml:"city,omitempty"`
		Number *struct {
			// Street name
			Other *string `form:"other,omitempty" json:"other,omitempty" xml:"other,omitempty"`
		} `form:"number,omitempty" json:"number,omitempty" xml:"number,omitempty"`
		// Street name
		Street *string `form:"street,omitempty" json:"street,omitempty" xml:"street,omitempty"`
	} `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	BirthDate     *string `form:"birthDate,omitempty" json:"birthDate,omitempty" xml:"birthDate,omitempty"`
	Country       *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Deceased      *bool   `form:"deceased,omitempty" json:"deceased,omitempty" xml:"deceased,omitempty"`
	Gender        *string `form:"gender,omitempty" json:"gender,omitempty" xml:"gender,omitempty"`
	MultipleBirth *bool   `form:"multiple_birth,omitempty" json:"multiple_birth,omitempty" xml:"multiple_birth,omitempty"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	Review        *string `form:"review,omitempty" json:"review,omitempty" xml:"review,omitempty"`
	Sweetness     *int    `form:"sweetness,omitempty" json:"sweetness,omitempty" xml:"sweetness,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createAllergyIntolerancePayload) Validate() (err error) {
	if payload.Address != nil {
		if payload.Address.City == nil {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`raw.address`, "city"))
		}
	}
	if payload.BirthDate != nil {
		if utf8.RuneCountInString(*payload.BirthDate) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.birthDate`, *payload.BirthDate, utf8.RuneCountInString(*payload.BirthDate), 4, true))
		}
	}
	if payload.Country != nil {
		if utf8.RuneCountInString(*payload.Country) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.country`, *payload.Country, utf8.RuneCountInString(*payload.Country), 2, true))
		}
	}
	if payload.Gender != nil {
		if !(*payload.Gender == "male" || *payload.Gender == "female" || *payload.Gender == "other" || *payload.Gender == "unknown") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`raw.gender`, *payload.Gender, []interface{}{"male", "female", "other", "unknown"}))
		}
	}
	if payload.Review != nil {
		if utf8.RuneCountInString(*payload.Review) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.review`, *payload.Review, utf8.RuneCountInString(*payload.Review), 3, true))
		}
	}
	if payload.Review != nil {
		if utf8.RuneCountInString(*payload.Review) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.review`, *payload.Review, utf8.RuneCountInString(*payload.Review), 300, false))
		}
	}
	if payload.Sweetness != nil {
		if *payload.Sweetness < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.sweetness`, *payload.Sweetness, 1, true))
		}
	}
	if payload.Sweetness != nil {
		if *payload.Sweetness > 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.sweetness`, *payload.Sweetness, 5, false))
		}
	}
	return
}

// Publicize creates CreateAllergyIntolerancePayload from createAllergyIntolerancePayload
func (payload *createAllergyIntolerancePayload) Publicize() *CreateAllergyIntolerancePayload {
	var pub CreateAllergyIntolerancePayload
	if payload.Active != nil {
		pub.Active = payload.Active
	}
	if payload.Address != nil {
		pub.Address = &struct {
			// City
			City   string `form:"city" json:"city" xml:"city"`
			Number *struct {
				// Street name
				Other *string `form:"other,omitempty" json:"other,omitempty" xml:"other,omitempty"`
			} `form:"number,omitempty" json:"number,omitempty" xml:"number,omitempty"`
			// Street name
			Street *string `form:"street,omitempty" json:"street,omitempty" xml:"street,omitempty"`
		}{}
		if payload.Address.City != nil {
			pub.Address.City = *payload.Address.City
		}
		if payload.Address.Number != nil {
			pub.Address.Number = &struct {
				// Street name
				Other *string `form:"other,omitempty" json:"other,omitempty" xml:"other,omitempty"`
			}{}
			if payload.Address.Number.Other != nil {
				pub.Address.Number.Other = payload.Address.Number.Other
			}
		}
		if payload.Address.Street != nil {
			pub.Address.Street = payload.Address.Street
		}
	}
	if payload.BirthDate != nil {
		pub.BirthDate = payload.BirthDate
	}
	if payload.Country != nil {
		pub.Country = payload.Country
	}
	if payload.Deceased != nil {
		pub.Deceased = payload.Deceased
	}
	if payload.Gender != nil {
		pub.Gender = payload.Gender
	}
	if payload.MultipleBirth != nil {
		pub.MultipleBirth = payload.MultipleBirth
	}
	if payload.Region != nil {
		pub.Region = payload.Region
	}
	if payload.Review != nil {
		pub.Review = payload.Review
	}
	if payload.Sweetness != nil {
		pub.Sweetness = payload.Sweetness
	}
	return &pub
}

// CreateAllergyIntolerancePayload is the AllergyIntolerance create action payload.
type CreateAllergyIntolerancePayload struct {
	Active  *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	Address *struct {
		// City
		City   string `form:"city" json:"city" xml:"city"`
		Number *struct {
			// Street name
			Other *string `form:"other,omitempty" json:"other,omitempty" xml:"other,omitempty"`
		} `form:"number,omitempty" json:"number,omitempty" xml:"number,omitempty"`
		// Street name
		Street *string `form:"street,omitempty" json:"street,omitempty" xml:"street,omitempty"`
	} `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	BirthDate     *string `form:"birthDate,omitempty" json:"birthDate,omitempty" xml:"birthDate,omitempty"`
	Country       *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Deceased      *bool   `form:"deceased,omitempty" json:"deceased,omitempty" xml:"deceased,omitempty"`
	Gender        *string `form:"gender,omitempty" json:"gender,omitempty" xml:"gender,omitempty"`
	MultipleBirth *bool   `form:"multiple_birth,omitempty" json:"multiple_birth,omitempty" xml:"multiple_birth,omitempty"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	Review        *string `form:"review,omitempty" json:"review,omitempty" xml:"review,omitempty"`
	Sweetness     *int    `form:"sweetness,omitempty" json:"sweetness,omitempty" xml:"sweetness,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateAllergyIntolerancePayload) Validate() (err error) {
	if payload.Address != nil {
		if payload.Address.City == "" {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`raw.address`, "city"))
		}
	}
	if payload.BirthDate != nil {
		if utf8.RuneCountInString(*payload.BirthDate) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.birthDate`, *payload.BirthDate, utf8.RuneCountInString(*payload.BirthDate), 4, true))
		}
	}
	if payload.Country != nil {
		if utf8.RuneCountInString(*payload.Country) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.country`, *payload.Country, utf8.RuneCountInString(*payload.Country), 2, true))
		}
	}
	if payload.Gender != nil {
		if !(*payload.Gender == "male" || *payload.Gender == "female" || *payload.Gender == "other" || *payload.Gender == "unknown") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`raw.gender`, *payload.Gender, []interface{}{"male", "female", "other", "unknown"}))
		}
	}
	if payload.Review != nil {
		if utf8.RuneCountInString(*payload.Review) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.review`, *payload.Review, utf8.RuneCountInString(*payload.Review), 3, true))
		}
	}
	if payload.Review != nil {
		if utf8.RuneCountInString(*payload.Review) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.review`, *payload.Review, utf8.RuneCountInString(*payload.Review), 300, false))
		}
	}
	if payload.Sweetness != nil {
		if *payload.Sweetness < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.sweetness`, *payload.Sweetness, 1, true))
		}
	}
	if payload.Sweetness != nil {
		if *payload.Sweetness > 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.sweetness`, *payload.Sweetness, 5, false))
		}
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateAllergyIntoleranceContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateAllergyIntoleranceContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateAllergyIntoleranceContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// DeleteAllergyIntoleranceContext provides the AllergyIntolerance delete action context.
type DeleteAllergyIntoleranceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AllergyIntoleranceID int
	PatientID            int
}

// NewDeleteAllergyIntoleranceContext parses the incoming request URL and body, performs validations and creates the
// context used by the AllergyIntolerance controller delete action.
func NewDeleteAllergyIntoleranceContext(ctx context.Context, service *goa.Service) (*DeleteAllergyIntoleranceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := DeleteAllergyIntoleranceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAllergyIntoleranceID := req.Params["allergy_intoleranceID"]
	if len(paramAllergyIntoleranceID) > 0 {
		rawAllergyIntoleranceID := paramAllergyIntoleranceID[0]
		if allergyIntoleranceID, err2 := strconv.Atoi(rawAllergyIntoleranceID); err2 == nil {
			rctx.AllergyIntoleranceID = allergyIntoleranceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("allergy_intoleranceID", rawAllergyIntoleranceID, "integer"))
		}
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteAllergyIntoleranceContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteAllergyIntoleranceContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteAllergyIntoleranceContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListAllergyIntoleranceContext provides the AllergyIntolerance list action context.
type ListAllergyIntoleranceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PatientID int
	Years     []int
}

// NewListAllergyIntoleranceContext parses the incoming request URL and body, performs validations and creates the
// context used by the AllergyIntolerance controller list action.
func NewListAllergyIntoleranceContext(ctx context.Context, service *goa.Service) (*ListAllergyIntoleranceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ListAllergyIntoleranceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	paramYears := req.Params["years"]
	if len(paramYears) > 0 {
		params := make([]int, len(paramYears))
		for i, rawYears := range paramYears {
			if years, err2 := strconv.Atoi(rawYears); err2 == nil {
				params[i] = years
			} else {
				err = goa.MergeErrors(err, goa.InvalidParamTypeError("years", rawYears, "integer"))
			}
		}
		rctx.Years = params
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListAllergyIntoleranceContext) OK(r AllergyIntoleranceCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.allergy_intolerance+json; type=collection")
	if r == nil {
		r = AllergyIntoleranceCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ListAllergyIntoleranceContext) OKTiny(r AllergyIntoleranceTinyCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.allergy_intolerance+json; type=collection")
	if r == nil {
		r = AllergyIntoleranceTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListAllergyIntoleranceContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListAllergyIntoleranceContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// RateAllergyIntoleranceContext provides the AllergyIntolerance rate action context.
type RateAllergyIntoleranceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AllergyIntoleranceID int
	PatientID            int
	Payload              *RateAllergyIntolerancePayload
}

// NewRateAllergyIntoleranceContext parses the incoming request URL and body, performs validations and creates the
// context used by the AllergyIntolerance controller rate action.
func NewRateAllergyIntoleranceContext(ctx context.Context, service *goa.Service) (*RateAllergyIntoleranceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := RateAllergyIntoleranceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAllergyIntoleranceID := req.Params["allergy_intoleranceID"]
	if len(paramAllergyIntoleranceID) > 0 {
		rawAllergyIntoleranceID := paramAllergyIntoleranceID[0]
		if allergyIntoleranceID, err2 := strconv.Atoi(rawAllergyIntoleranceID); err2 == nil {
			rctx.AllergyIntoleranceID = allergyIntoleranceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("allergy_intoleranceID", rawAllergyIntoleranceID, "integer"))
		}
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// rateAllergyIntolerancePayload is the AllergyIntolerance rate action payload.
type rateAllergyIntolerancePayload struct {
	Rating *string `form:"rating,omitempty" json:"rating,omitempty" xml:"rating,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *rateAllergyIntolerancePayload) Validate() (err error) {
	if payload.Rating == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "rating"))
	}
	return
}

// Publicize creates RateAllergyIntolerancePayload from rateAllergyIntolerancePayload
func (payload *rateAllergyIntolerancePayload) Publicize() *RateAllergyIntolerancePayload {
	var pub RateAllergyIntolerancePayload
	if payload.Rating != nil {
		pub.Rating = *payload.Rating
	}
	return &pub
}

// RateAllergyIntolerancePayload is the AllergyIntolerance rate action payload.
type RateAllergyIntolerancePayload struct {
	Rating string `form:"rating" json:"rating" xml:"rating"`
}

// Validate runs the validation rules defined in the design.
func (payload *RateAllergyIntolerancePayload) Validate() (err error) {
	if payload.Rating == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "rating"))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *RateAllergyIntoleranceContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RateAllergyIntoleranceContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *RateAllergyIntoleranceContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowAllergyIntoleranceContext provides the AllergyIntolerance show action context.
type ShowAllergyIntoleranceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AllergyIntoleranceID int
	PatientID            int
}

// NewShowAllergyIntoleranceContext parses the incoming request URL and body, performs validations and creates the
// context used by the AllergyIntolerance controller show action.
func NewShowAllergyIntoleranceContext(ctx context.Context, service *goa.Service) (*ShowAllergyIntoleranceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowAllergyIntoleranceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAllergyIntoleranceID := req.Params["allergy_intoleranceID"]
	if len(paramAllergyIntoleranceID) > 0 {
		rawAllergyIntoleranceID := paramAllergyIntoleranceID[0]
		if allergyIntoleranceID, err2 := strconv.Atoi(rawAllergyIntoleranceID); err2 == nil {
			rctx.AllergyIntoleranceID = allergyIntoleranceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("allergy_intoleranceID", rawAllergyIntoleranceID, "integer"))
		}
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowAllergyIntoleranceContext) OK(r *AllergyIntolerance) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.allergy_intolerance+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowAllergyIntoleranceContext) OKFull(r *AllergyIntoleranceFull) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.allergy_intolerance+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ShowAllergyIntoleranceContext) OKTiny(r *AllergyIntoleranceTiny) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.allergy_intolerance+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowAllergyIntoleranceContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowAllergyIntoleranceContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateAllergyIntoleranceContext provides the AllergyIntolerance update action context.
type UpdateAllergyIntoleranceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AllergyIntoleranceID int
	PatientID            int
	Payload              *AllergyIntolerancePayload
}

// NewUpdateAllergyIntoleranceContext parses the incoming request URL and body, performs validations and creates the
// context used by the AllergyIntolerance controller update action.
func NewUpdateAllergyIntoleranceContext(ctx context.Context, service *goa.Service) (*UpdateAllergyIntoleranceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := UpdateAllergyIntoleranceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAllergyIntoleranceID := req.Params["allergy_intoleranceID"]
	if len(paramAllergyIntoleranceID) > 0 {
		rawAllergyIntoleranceID := paramAllergyIntoleranceID[0]
		if allergyIntoleranceID, err2 := strconv.Atoi(rawAllergyIntoleranceID); err2 == nil {
			rctx.AllergyIntoleranceID = allergyIntoleranceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("allergy_intoleranceID", rawAllergyIntoleranceID, "integer"))
		}
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateAllergyIntoleranceContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateAllergyIntoleranceContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateAllergyIntoleranceContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// WatchAllergyIntoleranceContext provides the AllergyIntolerance watch action context.
type WatchAllergyIntoleranceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AllergyIntoleranceID int
	PatientID            int
}

// NewWatchAllergyIntoleranceContext parses the incoming request URL and body, performs validations and creates the
// context used by the AllergyIntolerance controller watch action.
func NewWatchAllergyIntoleranceContext(ctx context.Context, service *goa.Service) (*WatchAllergyIntoleranceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := WatchAllergyIntoleranceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAllergyIntoleranceID := req.Params["allergy_intoleranceID"]
	if len(paramAllergyIntoleranceID) > 0 {
		rawAllergyIntoleranceID := paramAllergyIntoleranceID[0]
		if allergyIntoleranceID, err2 := strconv.Atoi(rawAllergyIntoleranceID); err2 == nil {
			rctx.AllergyIntoleranceID = allergyIntoleranceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("allergy_intoleranceID", rawAllergyIntoleranceID, "integer"))
		}
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *WatchAllergyIntoleranceContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// CreateNutritionRequestContext provides the NutritionRequest create action context.
type CreateNutritionRequestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PatientID int
	Payload   *CreateNutritionRequestPayload
}

// NewCreateNutritionRequestContext parses the incoming request URL and body, performs validations and creates the
// context used by the NutritionRequest controller create action.
func NewCreateNutritionRequestContext(ctx context.Context, service *goa.Service) (*CreateNutritionRequestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := CreateNutritionRequestContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// createNutritionRequestPayload is the NutritionRequest create action payload.
type createNutritionRequestPayload struct {
	Address                *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	AddressPostalCode      *string `form:"address_postal_code,omitempty" json:"address_postal_code,omitempty" xml:"address_postal_code,omitempty"`
	EnteralFormula         *string `form:"enteralFormula,omitempty" json:"enteralFormula,omitempty" xml:"enteralFormula,omitempty"`
	FoodPreferenceModifier *struct {
		Coding *string `form:"coding,omitempty" json:"coding,omitempty" xml:"coding,omitempty"`
		ID     *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
		Text   *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	} `form:"foodPreferenceModifier,omitempty" json:"foodPreferenceModifier,omitempty" xml:"foodPreferenceModifier,omitempty"`
	Href             *string           `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	ID               *string           `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Identifier       *string           `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	Links            *string           `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	NutritionRequest *nutritionRequest `form:"nutritionRequest,omitempty" json:"nutritionRequest,omitempty" xml:"nutritionRequest,omitempty"`
	OralDiet         *string           `form:"oralDiet,omitempty" json:"oralDiet,omitempty" xml:"oralDiet,omitempty"`
	Patient          *struct {
		ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
		Reference *string `form:"reference,omitempty" json:"reference,omitempty" xml:"reference,omitempty"`
	} `form:"patient,omitempty" json:"patient,omitempty" xml:"patient,omitempty"`
	Supplement *string `form:"supplement,omitempty" json:"supplement,omitempty" xml:"supplement,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createNutritionRequestPayload) Validate() (err error) {
	if payload.AddressPostalCode != nil {
		if utf8.RuneCountInString(*payload.AddressPostalCode) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address_postal_code`, *payload.AddressPostalCode, utf8.RuneCountInString(*payload.AddressPostalCode), 5, true))
		}
	}
	if payload.NutritionRequest != nil {
		if err2 := payload.NutritionRequest.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates CreateNutritionRequestPayload from createNutritionRequestPayload
func (payload *createNutritionRequestPayload) Publicize() *CreateNutritionRequestPayload {
	var pub CreateNutritionRequestPayload
	if payload.Address != nil {
		pub.Address = payload.Address
	}
	if payload.AddressPostalCode != nil {
		pub.AddressPostalCode = payload.AddressPostalCode
	}
	if payload.EnteralFormula != nil {
		pub.EnteralFormula = payload.EnteralFormula
	}
	if payload.FoodPreferenceModifier != nil {
		pub.FoodPreferenceModifier = &struct {
			Coding *string `form:"coding,omitempty" json:"coding,omitempty" xml:"coding,omitempty"`
			ID     *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
			Text   *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
		}{}
		if payload.FoodPreferenceModifier.Coding != nil {
			pub.FoodPreferenceModifier.Coding = payload.FoodPreferenceModifier.Coding
		}
		if payload.FoodPreferenceModifier.ID != nil {
			pub.FoodPreferenceModifier.ID = payload.FoodPreferenceModifier.ID
		}
		if payload.FoodPreferenceModifier.Text != nil {
			pub.FoodPreferenceModifier.Text = payload.FoodPreferenceModifier.Text
		}
	}
	if payload.Href != nil {
		pub.Href = payload.Href
	}
	if payload.ID != nil {
		pub.ID = payload.ID
	}
	if payload.Identifier != nil {
		pub.Identifier = payload.Identifier
	}
	if payload.Links != nil {
		pub.Links = payload.Links
	}
	if payload.NutritionRequest != nil {
		pub.NutritionRequest = payload.NutritionRequest.Publicize()
	}
	if payload.OralDiet != nil {
		pub.OralDiet = payload.OralDiet
	}
	if payload.Patient != nil {
		pub.Patient = &struct {
			ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
			Reference *string `form:"reference,omitempty" json:"reference,omitempty" xml:"reference,omitempty"`
		}{}
		if payload.Patient.ID != nil {
			pub.Patient.ID = payload.Patient.ID
		}
		if payload.Patient.Reference != nil {
			pub.Patient.Reference = payload.Patient.Reference
		}
	}
	if payload.Supplement != nil {
		pub.Supplement = payload.Supplement
	}
	return &pub
}

// CreateNutritionRequestPayload is the NutritionRequest create action payload.
type CreateNutritionRequestPayload struct {
	Address                *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	AddressPostalCode      *string `form:"address_postal_code,omitempty" json:"address_postal_code,omitempty" xml:"address_postal_code,omitempty"`
	EnteralFormula         *string `form:"enteralFormula,omitempty" json:"enteralFormula,omitempty" xml:"enteralFormula,omitempty"`
	FoodPreferenceModifier *struct {
		Coding *string `form:"coding,omitempty" json:"coding,omitempty" xml:"coding,omitempty"`
		ID     *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
		Text   *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	} `form:"foodPreferenceModifier,omitempty" json:"foodPreferenceModifier,omitempty" xml:"foodPreferenceModifier,omitempty"`
	Href             *string           `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	ID               *string           `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Identifier       *string           `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	Links            *string           `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	NutritionRequest *NutritionRequest `form:"nutritionRequest,omitempty" json:"nutritionRequest,omitempty" xml:"nutritionRequest,omitempty"`
	OralDiet         *string           `form:"oralDiet,omitempty" json:"oralDiet,omitempty" xml:"oralDiet,omitempty"`
	Patient          *struct {
		ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
		Reference *string `form:"reference,omitempty" json:"reference,omitempty" xml:"reference,omitempty"`
	} `form:"patient,omitempty" json:"patient,omitempty" xml:"patient,omitempty"`
	Supplement *string `form:"supplement,omitempty" json:"supplement,omitempty" xml:"supplement,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateNutritionRequestPayload) Validate() (err error) {
	if payload.AddressPostalCode != nil {
		if utf8.RuneCountInString(*payload.AddressPostalCode) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address_postal_code`, *payload.AddressPostalCode, utf8.RuneCountInString(*payload.AddressPostalCode), 5, true))
		}
	}
	if payload.NutritionRequest != nil {
		if err2 := payload.NutritionRequest.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateNutritionRequestContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateNutritionRequestContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateNutritionRequestContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// DeleteNutritionRequestContext provides the NutritionRequest delete action context.
type DeleteNutritionRequestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	NutritionRequestID int
	PatientID          int
}

// NewDeleteNutritionRequestContext parses the incoming request URL and body, performs validations and creates the
// context used by the NutritionRequest controller delete action.
func NewDeleteNutritionRequestContext(ctx context.Context, service *goa.Service) (*DeleteNutritionRequestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := DeleteNutritionRequestContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNutritionRequestID := req.Params["nutrition_requestID"]
	if len(paramNutritionRequestID) > 0 {
		rawNutritionRequestID := paramNutritionRequestID[0]
		if nutritionRequestID, err2 := strconv.Atoi(rawNutritionRequestID); err2 == nil {
			rctx.NutritionRequestID = nutritionRequestID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("nutrition_requestID", rawNutritionRequestID, "integer"))
		}
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteNutritionRequestContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteNutritionRequestContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteNutritionRequestContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListNutritionRequestContext provides the NutritionRequest list action context.
type ListNutritionRequestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PatientID int
	Years     []int
}

// NewListNutritionRequestContext parses the incoming request URL and body, performs validations and creates the
// context used by the NutritionRequest controller list action.
func NewListNutritionRequestContext(ctx context.Context, service *goa.Service) (*ListNutritionRequestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ListNutritionRequestContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	paramYears := req.Params["years"]
	if len(paramYears) > 0 {
		params := make([]int, len(paramYears))
		for i, rawYears := range paramYears {
			if years, err2 := strconv.Atoi(rawYears); err2 == nil {
				params[i] = years
			} else {
				err = goa.MergeErrors(err, goa.InvalidParamTypeError("years", rawYears, "integer"))
			}
		}
		rctx.Years = params
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListNutritionRequestContext) OK(r NutritionRequestCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.nutrition_request+json; type=collection")
	if r == nil {
		r = NutritionRequestCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ListNutritionRequestContext) OKTiny(r NutritionRequestTinyCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.nutrition_request+json; type=collection")
	if r == nil {
		r = NutritionRequestTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListNutritionRequestContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListNutritionRequestContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// RateNutritionRequestContext provides the NutritionRequest rate action context.
type RateNutritionRequestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	NutritionRequestID int
	PatientID          int
	Payload            *RateNutritionRequestPayload
}

// NewRateNutritionRequestContext parses the incoming request URL and body, performs validations and creates the
// context used by the NutritionRequest controller rate action.
func NewRateNutritionRequestContext(ctx context.Context, service *goa.Service) (*RateNutritionRequestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := RateNutritionRequestContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNutritionRequestID := req.Params["nutrition_requestID"]
	if len(paramNutritionRequestID) > 0 {
		rawNutritionRequestID := paramNutritionRequestID[0]
		if nutritionRequestID, err2 := strconv.Atoi(rawNutritionRequestID); err2 == nil {
			rctx.NutritionRequestID = nutritionRequestID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("nutrition_requestID", rawNutritionRequestID, "integer"))
		}
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// rateNutritionRequestPayload is the NutritionRequest rate action payload.
type rateNutritionRequestPayload struct {
	Rating *string `form:"rating,omitempty" json:"rating,omitempty" xml:"rating,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *rateNutritionRequestPayload) Validate() (err error) {
	if payload.Rating == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "rating"))
	}
	return
}

// Publicize creates RateNutritionRequestPayload from rateNutritionRequestPayload
func (payload *rateNutritionRequestPayload) Publicize() *RateNutritionRequestPayload {
	var pub RateNutritionRequestPayload
	if payload.Rating != nil {
		pub.Rating = *payload.Rating
	}
	return &pub
}

// RateNutritionRequestPayload is the NutritionRequest rate action payload.
type RateNutritionRequestPayload struct {
	Rating string `form:"rating" json:"rating" xml:"rating"`
}

// Validate runs the validation rules defined in the design.
func (payload *RateNutritionRequestPayload) Validate() (err error) {
	if payload.Rating == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "rating"))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *RateNutritionRequestContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RateNutritionRequestContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *RateNutritionRequestContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowNutritionRequestContext provides the NutritionRequest show action context.
type ShowNutritionRequestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	NutritionRequestID int
	PatientID          int
}

// NewShowNutritionRequestContext parses the incoming request URL and body, performs validations and creates the
// context used by the NutritionRequest controller show action.
func NewShowNutritionRequestContext(ctx context.Context, service *goa.Service) (*ShowNutritionRequestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowNutritionRequestContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNutritionRequestID := req.Params["nutrition_requestID"]
	if len(paramNutritionRequestID) > 0 {
		rawNutritionRequestID := paramNutritionRequestID[0]
		if nutritionRequestID, err2 := strconv.Atoi(rawNutritionRequestID); err2 == nil {
			rctx.NutritionRequestID = nutritionRequestID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("nutrition_requestID", rawNutritionRequestID, "integer"))
		}
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowNutritionRequestContext) OK(r *NutritionRequest) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.nutrition_request+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowNutritionRequestContext) OKFull(r *NutritionRequestFull) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.nutrition_request+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ShowNutritionRequestContext) OKTiny(r *NutritionRequestTiny) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.nutrition_request+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowNutritionRequestContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowNutritionRequestContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateNutritionRequestContext provides the NutritionRequest update action context.
type UpdateNutritionRequestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	NutritionRequestID int
	PatientID          int
	Payload            *NutritionRequestPayload
}

// NewUpdateNutritionRequestContext parses the incoming request URL and body, performs validations and creates the
// context used by the NutritionRequest controller update action.
func NewUpdateNutritionRequestContext(ctx context.Context, service *goa.Service) (*UpdateNutritionRequestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := UpdateNutritionRequestContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNutritionRequestID := req.Params["nutrition_requestID"]
	if len(paramNutritionRequestID) > 0 {
		rawNutritionRequestID := paramNutritionRequestID[0]
		if nutritionRequestID, err2 := strconv.Atoi(rawNutritionRequestID); err2 == nil {
			rctx.NutritionRequestID = nutritionRequestID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("nutrition_requestID", rawNutritionRequestID, "integer"))
		}
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateNutritionRequestContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateNutritionRequestContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateNutritionRequestContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// WatchNutritionRequestContext provides the NutritionRequest watch action context.
type WatchNutritionRequestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	NutritionRequestID int
	PatientID          int
}

// NewWatchNutritionRequestContext parses the incoming request URL and body, performs validations and creates the
// context used by the NutritionRequest controller watch action.
func NewWatchNutritionRequestContext(ctx context.Context, service *goa.Service) (*WatchNutritionRequestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := WatchNutritionRequestContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNutritionRequestID := req.Params["nutrition_requestID"]
	if len(paramNutritionRequestID) > 0 {
		rawNutritionRequestID := paramNutritionRequestID[0]
		if nutritionRequestID, err2 := strconv.Atoi(rawNutritionRequestID); err2 == nil {
			rctx.NutritionRequestID = nutritionRequestID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("nutrition_requestID", rawNutritionRequestID, "integer"))
		}
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *WatchNutritionRequestContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// CreateObservationContext provides the Observation create action context.
type CreateObservationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PatientID int
	Payload   *CreateObservationPayload
}

// NewCreateObservationContext parses the incoming request URL and body, performs validations and creates the
// context used by the Observation controller create action.
func NewCreateObservationContext(ctx context.Context, service *goa.Service) (*CreateObservationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := CreateObservationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// createObservationPayload is the Observation create action payload.
type createObservationPayload struct {
	Observation *observation `form:"observation,omitempty" json:"observation,omitempty" xml:"observation,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createObservationPayload) Validate() (err error) {
	if payload.Observation != nil {
		if err2 := payload.Observation.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates CreateObservationPayload from createObservationPayload
func (payload *createObservationPayload) Publicize() *CreateObservationPayload {
	var pub CreateObservationPayload
	if payload.Observation != nil {
		pub.Observation = payload.Observation.Publicize()
	}
	return &pub
}

// CreateObservationPayload is the Observation create action payload.
type CreateObservationPayload struct {
	Observation *Observation `form:"observation,omitempty" json:"observation,omitempty" xml:"observation,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateObservationPayload) Validate() (err error) {
	if payload.Observation != nil {
		if err2 := payload.Observation.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateObservationContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateObservationContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateObservationContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// DeleteObservationContext provides the Observation delete action context.
type DeleteObservationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ObservationID int
	PatientID     int
}

// NewDeleteObservationContext parses the incoming request URL and body, performs validations and creates the
// context used by the Observation controller delete action.
func NewDeleteObservationContext(ctx context.Context, service *goa.Service) (*DeleteObservationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := DeleteObservationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramObservationID := req.Params["observationID"]
	if len(paramObservationID) > 0 {
		rawObservationID := paramObservationID[0]
		if observationID, err2 := strconv.Atoi(rawObservationID); err2 == nil {
			rctx.ObservationID = observationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("observationID", rawObservationID, "integer"))
		}
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteObservationContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteObservationContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteObservationContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListObservationContext provides the Observation list action context.
type ListObservationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PatientID int
	Years     []int
}

// NewListObservationContext parses the incoming request URL and body, performs validations and creates the
// context used by the Observation controller list action.
func NewListObservationContext(ctx context.Context, service *goa.Service) (*ListObservationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ListObservationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	paramYears := req.Params["years"]
	if len(paramYears) > 0 {
		params := make([]int, len(paramYears))
		for i, rawYears := range paramYears {
			if years, err2 := strconv.Atoi(rawYears); err2 == nil {
				params[i] = years
			} else {
				err = goa.MergeErrors(err, goa.InvalidParamTypeError("years", rawYears, "integer"))
			}
		}
		rctx.Years = params
	}
	return &rctx, err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListObservationContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListObservationContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// RateObservationContext provides the Observation rate action context.
type RateObservationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ObservationID int
	PatientID     int
}

// NewRateObservationContext parses the incoming request URL and body, performs validations and creates the
// context used by the Observation controller rate action.
func NewRateObservationContext(ctx context.Context, service *goa.Service) (*RateObservationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := RateObservationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramObservationID := req.Params["observationID"]
	if len(paramObservationID) > 0 {
		rawObservationID := paramObservationID[0]
		if observationID, err2 := strconv.Atoi(rawObservationID); err2 == nil {
			rctx.ObservationID = observationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("observationID", rawObservationID, "integer"))
		}
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *RateObservationContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RateObservationContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *RateObservationContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowObservationContext provides the Observation show action context.
type ShowObservationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ObservationID int
	PatientID     int
}

// NewShowObservationContext parses the incoming request URL and body, performs validations and creates the
// context used by the Observation controller show action.
func NewShowObservationContext(ctx context.Context, service *goa.Service) (*ShowObservationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowObservationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramObservationID := req.Params["observationID"]
	if len(paramObservationID) > 0 {
		rawObservationID := paramObservationID[0]
		if observationID, err2 := strconv.Atoi(rawObservationID); err2 == nil {
			rctx.ObservationID = observationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("observationID", rawObservationID, "integer"))
		}
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowObservationContext) OK(r *Observation) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.observation+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowObservationContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowObservationContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateObservationContext provides the Observation update action context.
type UpdateObservationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ObservationID int
	PatientID     int
	Payload       *ObservationPayload
}

// NewUpdateObservationContext parses the incoming request URL and body, performs validations and creates the
// context used by the Observation controller update action.
func NewUpdateObservationContext(ctx context.Context, service *goa.Service) (*UpdateObservationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := UpdateObservationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramObservationID := req.Params["observationID"]
	if len(paramObservationID) > 0 {
		rawObservationID := paramObservationID[0]
		if observationID, err2 := strconv.Atoi(rawObservationID); err2 == nil {
			rctx.ObservationID = observationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("observationID", rawObservationID, "integer"))
		}
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateObservationContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateObservationContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateObservationContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// WatchObservationContext provides the Observation watch action context.
type WatchObservationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ObservationID int
	PatientID     int
}

// NewWatchObservationContext parses the incoming request URL and body, performs validations and creates the
// context used by the Observation controller watch action.
func NewWatchObservationContext(ctx context.Context, service *goa.Service) (*WatchObservationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := WatchObservationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramObservationID := req.Params["observationID"]
	if len(paramObservationID) > 0 {
		rawObservationID := paramObservationID[0]
		if observationID, err2 := strconv.Atoi(rawObservationID); err2 == nil {
			rctx.ObservationID = observationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("observationID", rawObservationID, "integer"))
		}
	}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *WatchObservationContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// SecureBasicContext provides the basic secure action context.
type SecureBasicContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewSecureBasicContext parses the incoming request URL and body, performs validations and creates the
// context used by the basic controller secure action.
func NewSecureBasicContext(ctx context.Context, service *goa.Service) (*SecureBasicContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := SecureBasicContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SecureBasicContext) OK(r *Success) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.fhir.security.success")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SecureBasicContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// UnsecureBasicContext provides the basic unsecure action context.
type UnsecureBasicContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewUnsecureBasicContext parses the incoming request URL and body, performs validations and creates the
// context used by the basic controller unsecure action.
func NewUnsecureBasicContext(ctx context.Context, service *goa.Service) (*UnsecureBasicContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := UnsecureBasicContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UnsecureBasicContext) OK(r *Success) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.fhir.security.success")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// HealthHealthContext provides the health health action context.
type HealthHealthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewHealthHealthContext parses the incoming request URL and body, performs validations and creates the
// context used by the health controller health action.
func NewHealthHealthContext(ctx context.Context, service *goa.Service) (*HealthHealthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := HealthHealthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HealthHealthContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// SecureJWTContext provides the jwt secure action context.
type SecureJWTContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Fail *bool
}

// NewSecureJWTContext parses the incoming request URL and body, performs validations and creates the
// context used by the jwt controller secure action.
func NewSecureJWTContext(ctx context.Context, service *goa.Service) (*SecureJWTContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := SecureJWTContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramFail := req.Params["fail"]
	if len(paramFail) > 0 {
		rawFail := paramFail[0]
		if fail, err2 := strconv.ParseBool(rawFail); err2 == nil {
			tmp40 := &fail
			rctx.Fail = tmp40
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("fail", rawFail, "boolean"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SecureJWTContext) OK(r *Success) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.fhir.security.success")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SecureJWTContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// SigninJWTContext provides the jwt signin action context.
type SigninJWTContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *SigninJWTPayload
}

// NewSigninJWTContext parses the incoming request URL and body, performs validations and creates the
// context used by the jwt controller signin action.
func NewSigninJWTContext(ctx context.Context, service *goa.Service) (*SigninJWTContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := SigninJWTContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// signinJWTPayload is the jwt signin action payload.
type signinJWTPayload struct {
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *signinJWTPayload) Validate() (err error) {
	if payload.Username == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	return
}

// Publicize creates SigninJWTPayload from signinJWTPayload
func (payload *signinJWTPayload) Publicize() *SigninJWTPayload {
	var pub SigninJWTPayload
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	if payload.Username != nil {
		pub.Username = *payload.Username
	}
	return &pub
}

// SigninJWTPayload is the jwt signin action payload.
type SigninJWTPayload struct {
	Password string `form:"password" json:"password" xml:"password"`
	Username string `form:"username" json:"username" xml:"username"`
}

// Validate runs the validation rules defined in the design.
func (payload *SigninJWTPayload) Validate() (err error) {
	if payload.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *SigninJWTContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SigninJWTContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SigninJWTContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *SigninJWTContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// SignupJWTContext provides the jwt signup action context.
type SignupJWTContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *SignupJWTPayload
}

// NewSignupJWTContext parses the incoming request URL and body, performs validations and creates the
// context used by the jwt controller signup action.
func NewSignupJWTContext(ctx context.Context, service *goa.Service) (*SignupJWTContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := SignupJWTContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// signupJWTPayload is the jwt signup action payload.
type signupJWTPayload struct {
	AddressCity       *string `form:"address_city,omitempty" json:"address_city,omitempty" xml:"address_city,omitempty"`
	AddressLine       *string `form:"address_line,omitempty" json:"address_line,omitempty" xml:"address_line,omitempty"`
	AddressPostalCode *string `form:"address_postal_code,omitempty" json:"address_postal_code,omitempty" xml:"address_postal_code,omitempty"`
	AddressState      *string `form:"address_state,omitempty" json:"address_state,omitempty" xml:"address_state,omitempty"`
	Email             *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	FirstName         *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	LastName          *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	Password          *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	Username          *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *signupJWTPayload) Validate() (err error) {
	if payload.Username == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "first_name"))
	}
	if payload.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "last_name"))
	}
	if payload.AddressLine == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_line"))
	}
	if payload.AddressCity == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_city"))
	}
	if payload.AddressState == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_state"))
	}
	if payload.AddressPostalCode == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_postal_code"))
	}
	return
}

// Publicize creates SignupJWTPayload from signupJWTPayload
func (payload *signupJWTPayload) Publicize() *SignupJWTPayload {
	var pub SignupJWTPayload
	if payload.AddressCity != nil {
		pub.AddressCity = *payload.AddressCity
	}
	if payload.AddressLine != nil {
		pub.AddressLine = *payload.AddressLine
	}
	if payload.AddressPostalCode != nil {
		pub.AddressPostalCode = *payload.AddressPostalCode
	}
	if payload.AddressState != nil {
		pub.AddressState = *payload.AddressState
	}
	if payload.Email != nil {
		pub.Email = *payload.Email
	}
	if payload.FirstName != nil {
		pub.FirstName = *payload.FirstName
	}
	if payload.LastName != nil {
		pub.LastName = *payload.LastName
	}
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	if payload.Username != nil {
		pub.Username = *payload.Username
	}
	return &pub
}

// SignupJWTPayload is the jwt signup action payload.
type SignupJWTPayload struct {
	AddressCity       string `form:"address_city" json:"address_city" xml:"address_city"`
	AddressLine       string `form:"address_line" json:"address_line" xml:"address_line"`
	AddressPostalCode string `form:"address_postal_code" json:"address_postal_code" xml:"address_postal_code"`
	AddressState      string `form:"address_state" json:"address_state" xml:"address_state"`
	Email             string `form:"email" json:"email" xml:"email"`
	FirstName         string `form:"first_name" json:"first_name" xml:"first_name"`
	LastName          string `form:"last_name" json:"last_name" xml:"last_name"`
	Password          string `form:"password" json:"password" xml:"password"`
	Username          string `form:"username" json:"username" xml:"username"`
}

// Validate runs the validation rules defined in the design.
func (payload *SignupJWTPayload) Validate() (err error) {
	if payload.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.FirstName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "first_name"))
	}
	if payload.LastName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "last_name"))
	}
	if payload.AddressLine == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_line"))
	}
	if payload.AddressCity == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_city"))
	}
	if payload.AddressState == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_state"))
	}
	if payload.AddressPostalCode == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_postal_code"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *SignupJWTContext) OK(r *Success) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.fhir.security.success")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *SignupJWTContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SignupJWTContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// UnsecureJWTContext provides the jwt unsecure action context.
type UnsecureJWTContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewUnsecureJWTContext parses the incoming request URL and body, performs validations and creates the
// context used by the jwt controller unsecure action.
func NewUnsecureJWTContext(ctx context.Context, service *goa.Service) (*UnsecureJWTContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := UnsecureJWTContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UnsecureJWTContext) OK(r *Success) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.fhir.security.success")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// CreatePatientContext provides the patient create action context.
type CreatePatientContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreatePatientPayload
}

// NewCreatePatientContext parses the incoming request URL and body, performs validations and creates the
// context used by the patient controller create action.
func NewCreatePatientContext(ctx context.Context, service *goa.Service) (*CreatePatientContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := CreatePatientContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createPatientPayload is the patient create action payload.
type createPatientPayload struct {
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createPatientPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	return
}

// Publicize creates CreatePatientPayload from createPatientPayload
func (payload *createPatientPayload) Publicize() *CreatePatientPayload {
	var pub CreatePatientPayload
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	return &pub
}

// CreatePatientPayload is the patient create action payload.
type CreatePatientPayload struct {
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreatePatientPayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreatePatientContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreatePatientContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeletePatientContext provides the patient delete action context.
type DeletePatientContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PatientID int
}

// NewDeletePatientContext parses the incoming request URL and body, performs validations and creates the
// context used by the patient controller delete action.
func NewDeletePatientContext(ctx context.Context, service *goa.Service) (*DeletePatientContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := DeletePatientContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeletePatientContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeletePatientContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeletePatientContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListPatientContext provides the patient list action context.
type ListPatientContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Fail *bool
}

// NewListPatientContext parses the incoming request URL and body, performs validations and creates the
// context used by the patient controller list action.
func NewListPatientContext(ctx context.Context, service *goa.Service) (*ListPatientContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ListPatientContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramFail := req.Params["fail"]
	if len(paramFail) > 0 {
		rawFail := paramFail[0]
		if fail, err2 := strconv.ParseBool(rawFail); err2 == nil {
			tmp42 := &fail
			rctx.Fail = tmp42
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("fail", rawFail, "boolean"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPatientContext) OK(r PatientCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.patient+json; type=collection")
	if r == nil {
		r = PatientCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListPatientContext) OKLink(r PatientLinkCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.patient+json; type=collection")
	if r == nil {
		r = PatientLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListPatientContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// ShowPatientContext provides the patient show action context.
type ShowPatientContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PatientID int
}

// NewShowPatientContext parses the incoming request URL and body, performs validations and creates the
// context used by the patient controller show action.
func NewShowPatientContext(ctx context.Context, service *goa.Service) (*ShowPatientContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowPatientContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
		if rctx.PatientID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`patientID`, rctx.PatientID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowPatientContext) OK(r *Patient) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.patient+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowPatientContext) OKLink(r *PatientLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.patient+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowPatientContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowPatientContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdatePatientContext provides the patient update action context.
type UpdatePatientContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PatientID int
	Payload   *UpdatePatientPayload
}

// NewUpdatePatientContext parses the incoming request URL and body, performs validations and creates the
// context used by the patient controller update action.
func NewUpdatePatientContext(ctx context.Context, service *goa.Service) (*UpdatePatientContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := UpdatePatientContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPatientID := req.Params["patientID"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		if patientID, err2 := strconv.Atoi(rawPatientID); err2 == nil {
			rctx.PatientID = patientID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("patientID", rawPatientID, "integer"))
		}
	}
	return &rctx, err
}

// updatePatientPayload is the patient update action payload.
type updatePatientPayload struct {
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updatePatientPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	return
}

// Publicize creates UpdatePatientPayload from updatePatientPayload
func (payload *updatePatientPayload) Publicize() *UpdatePatientPayload {
	var pub UpdatePatientPayload
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	return &pub
}

// UpdatePatientPayload is the patient update action payload.
type UpdatePatientPayload struct {
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdatePatientPayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdatePatientContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdatePatientContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdatePatientContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// CreateUserContext provides the user create action context.
type CreateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateUserPayload
}

// NewCreateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller create action.
func NewCreateUserContext(ctx context.Context, service *goa.Service) (*CreateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := CreateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createUserPayload is the user create action payload.
type createUserPayload struct {
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password of user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createUserPayload) Validate() (err error) {
	if payload.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *payload.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, *payload.Email, goa.FormatEmail, err2))
		}
	}
	if payload.Email != nil {
		if utf8.RuneCountInString(*payload.Email) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.email`, *payload.Email, utf8.RuneCountInString(*payload.Email), 4, true))
		}
	}
	if payload.Password != nil {
		if utf8.RuneCountInString(*payload.Password) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, *payload.Password, utf8.RuneCountInString(*payload.Password), 2, true))
		}
	}
	return
}

// Publicize creates CreateUserPayload from createUserPayload
func (payload *createUserPayload) Publicize() *CreateUserPayload {
	var pub CreateUserPayload
	if payload.Email != nil {
		pub.Email = *payload.Email
	}
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	return &pub
}

// CreateUserPayload is the user create action payload.
type CreateUserPayload struct {
	// Email of user
	Email string `form:"email" json:"email" xml:"email"`
	// Password of user
	Password string `form:"password" json:"password" xml:"password"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateUserPayload) Validate() (err error) {
	if payload.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, payload.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, payload.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(payload.Email) < 4 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.email`, payload.Email, utf8.RuneCountInString(payload.Email), 4, true))
	}
	if utf8.RuneCountInString(payload.Password) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, payload.Password, utf8.RuneCountInString(payload.Password), 2, true))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateUserContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteUserContext provides the user delete action context.
type DeleteUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewDeleteUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller delete action.
func NewDeleteUserContext(ctx context.Context, service *goa.Service) (*DeleteUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := DeleteUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListUserContext provides the user list action context.
type ListUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller list action.
func NewListUserContext(ctx context.Context, service *goa.Service) (*ListUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ListUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListUserContext) OK(r UserCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	if r == nil {
		r = UserCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListUserContext) OKLink(r UserLinkCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	if r == nil {
		r = UserLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ListUserContext) OKTiny(r UserTinyCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	if r == nil {
		r = UserTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ShowUserContext provides the user show action context.
type ShowUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewShowUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller show action.
func NewShowUserContext(ctx context.Context, service *goa.Service) (*ShowUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`userID`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowUserContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowUserContext) OKLink(r *UserLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ShowUserContext) OKTiny(r *UserTiny) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// SigninUserContext provides the user signin action context.
type SigninUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *SigninUserPayload
}

// NewSigninUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller signin action.
func NewSigninUserContext(ctx context.Context, service *goa.Service) (*SigninUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := SigninUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// signinUserPayload is the user signin action payload.
type signinUserPayload struct {
	// Password of user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Username of user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *signinUserPayload) Validate() (err error) {
	if payload.Username == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.Password != nil {
		if utf8.RuneCountInString(*payload.Password) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, *payload.Password, utf8.RuneCountInString(*payload.Password), 2, true))
		}
	}
	if payload.Username != nil {
		if utf8.RuneCountInString(*payload.Username) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.username`, *payload.Username, utf8.RuneCountInString(*payload.Username), 3, true))
		}
	}
	return
}

// Publicize creates SigninUserPayload from signinUserPayload
func (payload *signinUserPayload) Publicize() *SigninUserPayload {
	var pub SigninUserPayload
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	if payload.Username != nil {
		pub.Username = *payload.Username
	}
	return &pub
}

// SigninUserPayload is the user signin action payload.
type SigninUserPayload struct {
	// Password of user
	Password string `form:"password" json:"password" xml:"password"`
	// Username of user
	Username string `form:"username" json:"username" xml:"username"`
}

// Validate runs the validation rules defined in the design.
func (payload *SigninUserPayload) Validate() (err error) {
	if payload.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if utf8.RuneCountInString(payload.Password) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, payload.Password, utf8.RuneCountInString(payload.Password), 2, true))
	}
	if utf8.RuneCountInString(payload.Username) < 3 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.username`, payload.Username, utf8.RuneCountInString(payload.Username), 3, true))
	}
	return
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SigninUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SigninUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *SigninUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// SignupUserContext provides the user signup action context.
type SignupUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *SignupUserPayload
}

// NewSignupUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller signup action.
func NewSignupUserContext(ctx context.Context, service *goa.Service) (*SignupUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := SignupUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// signupUserPayload is the user signup action payload.
type signupUserPayload struct {
	// Name of city, town etc.
	AddressCity *string `form:"address_city,omitempty" json:"address_city,omitempty" xml:"address_city,omitempty"`
	// Street name, number, direction & P.O. Box etc.
	AddressLine *string `form:"address_line,omitempty" json:"address_line,omitempty" xml:"address_line,omitempty"`
	// Postal code for area
	AddressPostalCode *int `form:"address_postal_code,omitempty" json:"address_postal_code,omitempty" xml:"address_postal_code,omitempty"`
	// Sub-unit of country (abbreviations ok)
	AddressState *string `form:"address_state,omitempty" json:"address_state,omitempty" xml:"address_state,omitempty"`
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name of user
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name of user
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Password of user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Username of user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *signupUserPayload) Validate() (err error) {
	if payload.Username == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "first_name"))
	}
	if payload.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "last_name"))
	}
	if payload.AddressLine == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_line"))
	}
	if payload.AddressCity == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_city"))
	}
	if payload.AddressState == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_state"))
	}
	if payload.AddressPostalCode == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_postal_code"))
	}
	if payload.AddressCity != nil {
		if utf8.RuneCountInString(*payload.AddressCity) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address_city`, *payload.AddressCity, utf8.RuneCountInString(*payload.AddressCity), 2, true))
		}
	}
	if payload.AddressLine != nil {
		if utf8.RuneCountInString(*payload.AddressLine) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address_line`, *payload.AddressLine, utf8.RuneCountInString(*payload.AddressLine), 2, true))
		}
	}
	if payload.AddressPostalCode != nil {
		if len(*payload.AddressPostalCode) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address_postal_code`, *payload.AddressPostalCode, len(*payload.AddressPostalCode), 5, true))
		}
	}
	if payload.AddressState != nil {
		if utf8.RuneCountInString(*payload.AddressState) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address_state`, *payload.AddressState, utf8.RuneCountInString(*payload.AddressState), 2, true))
		}
	}
	if payload.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *payload.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, *payload.Email, goa.FormatEmail, err2))
		}
	}
	if payload.Email != nil {
		if utf8.RuneCountInString(*payload.Email) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.email`, *payload.Email, utf8.RuneCountInString(*payload.Email), 4, true))
		}
	}
	if payload.FirstName != nil {
		if utf8.RuneCountInString(*payload.FirstName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.first_name`, *payload.FirstName, utf8.RuneCountInString(*payload.FirstName), 2, true))
		}
	}
	if payload.LastName != nil {
		if utf8.RuneCountInString(*payload.LastName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.last_name`, *payload.LastName, utf8.RuneCountInString(*payload.LastName), 2, true))
		}
	}
	if payload.Password != nil {
		if utf8.RuneCountInString(*payload.Password) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, *payload.Password, utf8.RuneCountInString(*payload.Password), 2, true))
		}
	}
	if payload.Username != nil {
		if utf8.RuneCountInString(*payload.Username) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.username`, *payload.Username, utf8.RuneCountInString(*payload.Username), 3, true))
		}
	}
	return
}

// Publicize creates SignupUserPayload from signupUserPayload
func (payload *signupUserPayload) Publicize() *SignupUserPayload {
	var pub SignupUserPayload
	if payload.AddressCity != nil {
		pub.AddressCity = *payload.AddressCity
	}
	if payload.AddressLine != nil {
		pub.AddressLine = *payload.AddressLine
	}
	if payload.AddressPostalCode != nil {
		pub.AddressPostalCode = *payload.AddressPostalCode
	}
	if payload.AddressState != nil {
		pub.AddressState = *payload.AddressState
	}
	if payload.Email != nil {
		pub.Email = *payload.Email
	}
	if payload.FirstName != nil {
		pub.FirstName = *payload.FirstName
	}
	if payload.LastName != nil {
		pub.LastName = *payload.LastName
	}
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	if payload.Username != nil {
		pub.Username = *payload.Username
	}
	return &pub
}

// SignupUserPayload is the user signup action payload.
type SignupUserPayload struct {
	// Name of city, town etc.
	AddressCity string `form:"address_city" json:"address_city" xml:"address_city"`
	// Street name, number, direction & P.O. Box etc.
	AddressLine string `form:"address_line" json:"address_line" xml:"address_line"`
	// Postal code for area
	AddressPostalCode int `form:"address_postal_code" json:"address_postal_code" xml:"address_postal_code"`
	// Sub-unit of country (abbreviations ok)
	AddressState string `form:"address_state" json:"address_state" xml:"address_state"`
	// Email of user
	Email string `form:"email" json:"email" xml:"email"`
	// First name of user
	FirstName string `form:"first_name" json:"first_name" xml:"first_name"`
	// Last name of user
	LastName string `form:"last_name" json:"last_name" xml:"last_name"`
	// Password of user
	Password string `form:"password" json:"password" xml:"password"`
	// Username of user
	Username string `form:"username" json:"username" xml:"username"`
}

// Validate runs the validation rules defined in the design.
func (payload *SignupUserPayload) Validate() (err error) {
	if payload.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.FirstName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "first_name"))
	}
	if payload.LastName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "last_name"))
	}
	if payload.AddressLine == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_line"))
	}
	if payload.AddressCity == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_city"))
	}
	if payload.AddressState == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address_state"))
	}

	if utf8.RuneCountInString(payload.AddressCity) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address_city`, payload.AddressCity, utf8.RuneCountInString(payload.AddressCity), 2, true))
	}
	if utf8.RuneCountInString(payload.AddressLine) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address_line`, payload.AddressLine, utf8.RuneCountInString(payload.AddressLine), 2, true))
	}
	if len(payload.AddressPostalCode) < 5 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address_postal_code`, payload.AddressPostalCode, len(payload.AddressPostalCode), 5, true))
	}
	if utf8.RuneCountInString(payload.AddressState) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address_state`, payload.AddressState, utf8.RuneCountInString(payload.AddressState), 2, true))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, payload.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, payload.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(payload.Email) < 4 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.email`, payload.Email, utf8.RuneCountInString(payload.Email), 4, true))
	}
	if utf8.RuneCountInString(payload.FirstName) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.first_name`, payload.FirstName, utf8.RuneCountInString(payload.FirstName), 2, true))
	}
	if utf8.RuneCountInString(payload.LastName) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.last_name`, payload.LastName, utf8.RuneCountInString(payload.LastName), 2, true))
	}
	if utf8.RuneCountInString(payload.Password) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, payload.Password, utf8.RuneCountInString(payload.Password), 2, true))
	}
	if utf8.RuneCountInString(payload.Username) < 3 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.username`, payload.Username, utf8.RuneCountInString(payload.Username), 3, true))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *SignupUserContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *SignupUserContext) OKLink(r *UserLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *SignupUserContext) OKTiny(r *UserTiny) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *SignupUserContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SignupUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// UpdateUserContext provides the user update action context.
type UpdateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  int
	Payload *UpdateUserPayload
}

// NewUpdateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller update action.
func NewUpdateUserContext(ctx context.Context, service *goa.Service) (*UpdateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := UpdateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// updateUserPayload is the user update action payload.
type updateUserPayload struct {
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password of user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateUserPayload) Validate() (err error) {
	if payload.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *payload.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, *payload.Email, goa.FormatEmail, err2))
		}
	}
	if payload.Email != nil {
		if utf8.RuneCountInString(*payload.Email) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.email`, *payload.Email, utf8.RuneCountInString(*payload.Email), 4, true))
		}
	}
	if payload.Password != nil {
		if utf8.RuneCountInString(*payload.Password) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, *payload.Password, utf8.RuneCountInString(*payload.Password), 2, true))
		}
	}
	return
}

// Publicize creates UpdateUserPayload from updateUserPayload
func (payload *updateUserPayload) Publicize() *UpdateUserPayload {
	var pub UpdateUserPayload
	if payload.Email != nil {
		pub.Email = *payload.Email
	}
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	return &pub
}

// UpdateUserPayload is the user update action payload.
type UpdateUserPayload struct {
	// Email of user
	Email string `form:"email" json:"email" xml:"email"`
	// Password of user
	Password string `form:"password" json:"password" xml:"password"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateUserPayload) Validate() (err error) {
	if payload.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, payload.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, payload.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(payload.Email) < 4 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.email`, payload.Email, utf8.RuneCountInString(payload.Email), 4, true))
	}
	if utf8.RuneCountInString(payload.Password) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, payload.Password, utf8.RuneCountInString(payload.Password), 2, true))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
