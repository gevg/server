// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/goa-fhir/server/design
// --out=$(GOPATH)\src\github.com\goa-fhir\server
// --version=v1.1.0-dirty
//
// API "Secure": Application User Types
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"time"
	"unicode/utf8"
)

// allergyIntolerancePayload user type.
type allergyIntolerancePayload struct {
	Active  *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	Address *struct {
		// City
		City   *string `form:"city,omitempty" json:"city,omitempty" xml:"city,omitempty"`
		Number *struct {
			// Street name
			Other *string `form:"other,omitempty" json:"other,omitempty" xml:"other,omitempty"`
		} `form:"number,omitempty" json:"number,omitempty" xml:"number,omitempty"`
		// Street name
		Street *string `form:"street,omitempty" json:"street,omitempty" xml:"street,omitempty"`
	} `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	BirthDate     *string `form:"birthDate,omitempty" json:"birthDate,omitempty" xml:"birthDate,omitempty"`
	Country       *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Deceased      *bool   `form:"deceased,omitempty" json:"deceased,omitempty" xml:"deceased,omitempty"`
	Gender        *string `form:"gender,omitempty" json:"gender,omitempty" xml:"gender,omitempty"`
	MultipleBirth *bool   `form:"multiple_birth,omitempty" json:"multiple_birth,omitempty" xml:"multiple_birth,omitempty"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	Review        *string `form:"review,omitempty" json:"review,omitempty" xml:"review,omitempty"`
	Sweetness     *int    `form:"sweetness,omitempty" json:"sweetness,omitempty" xml:"sweetness,omitempty"`
}

// Validate validates the allergyIntolerancePayload type instance.
func (ut *allergyIntolerancePayload) Validate() (err error) {
	if ut.Address != nil {
		if ut.Address.City == nil {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`response.address`, "city"))
		}
	}
	if ut.BirthDate != nil {
		if utf8.RuneCountInString(*ut.BirthDate) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.birthDate`, *ut.BirthDate, utf8.RuneCountInString(*ut.BirthDate), 4, true))
		}
	}
	if ut.Country != nil {
		if utf8.RuneCountInString(*ut.Country) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.country`, *ut.Country, utf8.RuneCountInString(*ut.Country), 2, true))
		}
	}
	if ut.Gender != nil {
		if !(*ut.Gender == "male" || *ut.Gender == "female" || *ut.Gender == "other" || *ut.Gender == "unknown") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.gender`, *ut.Gender, []interface{}{"male", "female", "other", "unknown"}))
		}
	}
	if ut.Review != nil {
		if utf8.RuneCountInString(*ut.Review) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.review`, *ut.Review, utf8.RuneCountInString(*ut.Review), 3, true))
		}
	}
	if ut.Review != nil {
		if utf8.RuneCountInString(*ut.Review) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.review`, *ut.Review, utf8.RuneCountInString(*ut.Review), 300, false))
		}
	}
	if ut.Sweetness != nil {
		if *ut.Sweetness < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.sweetness`, *ut.Sweetness, 1, true))
		}
	}
	if ut.Sweetness != nil {
		if *ut.Sweetness > 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.sweetness`, *ut.Sweetness, 5, false))
		}
	}
	return
}

// Publicize creates AllergyIntolerancePayload from allergyIntolerancePayload
func (ut *allergyIntolerancePayload) Publicize() *AllergyIntolerancePayload {
	var pub AllergyIntolerancePayload
	if ut.Active != nil {
		pub.Active = ut.Active
	}
	if ut.Address != nil {
		pub.Address = &struct {
			// City
			City   string `form:"city" json:"city" xml:"city"`
			Number *struct {
				// Street name
				Other *string `form:"other,omitempty" json:"other,omitempty" xml:"other,omitempty"`
			} `form:"number,omitempty" json:"number,omitempty" xml:"number,omitempty"`
			// Street name
			Street *string `form:"street,omitempty" json:"street,omitempty" xml:"street,omitempty"`
		}{}
		if ut.Address.City != nil {
			pub.Address.City = *ut.Address.City
		}
		if ut.Address.Number != nil {
			pub.Address.Number = &struct {
				// Street name
				Other *string `form:"other,omitempty" json:"other,omitempty" xml:"other,omitempty"`
			}{}
			if ut.Address.Number.Other != nil {
				pub.Address.Number.Other = ut.Address.Number.Other
			}
		}
		if ut.Address.Street != nil {
			pub.Address.Street = ut.Address.Street
		}
	}
	if ut.BirthDate != nil {
		pub.BirthDate = ut.BirthDate
	}
	if ut.Country != nil {
		pub.Country = ut.Country
	}
	if ut.Deceased != nil {
		pub.Deceased = ut.Deceased
	}
	if ut.Gender != nil {
		pub.Gender = ut.Gender
	}
	if ut.MultipleBirth != nil {
		pub.MultipleBirth = ut.MultipleBirth
	}
	if ut.Region != nil {
		pub.Region = ut.Region
	}
	if ut.Review != nil {
		pub.Review = ut.Review
	}
	if ut.Sweetness != nil {
		pub.Sweetness = ut.Sweetness
	}
	return &pub
}

// AllergyIntolerancePayload user type.
type AllergyIntolerancePayload struct {
	Active  *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	Address *struct {
		// City
		City   string `form:"city" json:"city" xml:"city"`
		Number *struct {
			// Street name
			Other *string `form:"other,omitempty" json:"other,omitempty" xml:"other,omitempty"`
		} `form:"number,omitempty" json:"number,omitempty" xml:"number,omitempty"`
		// Street name
		Street *string `form:"street,omitempty" json:"street,omitempty" xml:"street,omitempty"`
	} `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	BirthDate     *string `form:"birthDate,omitempty" json:"birthDate,omitempty" xml:"birthDate,omitempty"`
	Country       *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Deceased      *bool   `form:"deceased,omitempty" json:"deceased,omitempty" xml:"deceased,omitempty"`
	Gender        *string `form:"gender,omitempty" json:"gender,omitempty" xml:"gender,omitempty"`
	MultipleBirth *bool   `form:"multiple_birth,omitempty" json:"multiple_birth,omitempty" xml:"multiple_birth,omitempty"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	Review        *string `form:"review,omitempty" json:"review,omitempty" xml:"review,omitempty"`
	Sweetness     *int    `form:"sweetness,omitempty" json:"sweetness,omitempty" xml:"sweetness,omitempty"`
}

// Validate validates the AllergyIntolerancePayload type instance.
func (ut *AllergyIntolerancePayload) Validate() (err error) {
	if ut.Address != nil {
		if ut.Address.City == "" {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`response.address`, "city"))
		}
	}
	if ut.BirthDate != nil {
		if utf8.RuneCountInString(*ut.BirthDate) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.birthDate`, *ut.BirthDate, utf8.RuneCountInString(*ut.BirthDate), 4, true))
		}
	}
	if ut.Country != nil {
		if utf8.RuneCountInString(*ut.Country) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.country`, *ut.Country, utf8.RuneCountInString(*ut.Country), 2, true))
		}
	}
	if ut.Gender != nil {
		if !(*ut.Gender == "male" || *ut.Gender == "female" || *ut.Gender == "other" || *ut.Gender == "unknown") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.gender`, *ut.Gender, []interface{}{"male", "female", "other", "unknown"}))
		}
	}
	if ut.Review != nil {
		if utf8.RuneCountInString(*ut.Review) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.review`, *ut.Review, utf8.RuneCountInString(*ut.Review), 3, true))
		}
	}
	if ut.Review != nil {
		if utf8.RuneCountInString(*ut.Review) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.review`, *ut.Review, utf8.RuneCountInString(*ut.Review), 300, false))
		}
	}
	if ut.Sweetness != nil {
		if *ut.Sweetness < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.sweetness`, *ut.Sweetness, 1, true))
		}
	}
	if ut.Sweetness != nil {
		if *ut.Sweetness > 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.sweetness`, *ut.Sweetness, 5, false))
		}
	}
	return
}

// This patient is known to be an animal.
type animalPayload struct {
	// Identifies the detailed categorization of the kind of animal. See http://hl7.org/fhir/ValueSet/animal-breeds
	Breed *codeableConcept `form:"breed,omitempty" json:"breed,omitempty" xml:"breed,omitempty"`
	// Indicates the current state of the animal's reproductive organs. See http://hl7.org/fhir/ValueSet/animal-genderstatus
	GenderStatus *codeableConcept `form:"genderStatus,omitempty" json:"genderStatus,omitempty" xml:"genderStatus,omitempty"`
	// Identifies the high level taxonomic categorization of the kind of animal. See http://hl7.org/fhir/ValueSet/animal-species
	Species *codeableConcept `form:"species,omitempty" json:"species,omitempty" xml:"species,omitempty"`
}

// Publicize creates AnimalPayload from animalPayload
func (ut *animalPayload) Publicize() *AnimalPayload {
	var pub AnimalPayload
	if ut.Breed != nil {
		pub.Breed = ut.Breed.Publicize()
	}
	if ut.GenderStatus != nil {
		pub.GenderStatus = ut.GenderStatus.Publicize()
	}
	if ut.Species != nil {
		pub.Species = ut.Species.Publicize()
	}
	return &pub
}

// This patient is known to be an animal.
type AnimalPayload struct {
	// Identifies the detailed categorization of the kind of animal. See http://hl7.org/fhir/ValueSet/animal-breeds
	Breed *CodeableConcept `form:"breed,omitempty" json:"breed,omitempty" xml:"breed,omitempty"`
	// Indicates the current state of the animal's reproductive organs. See http://hl7.org/fhir/ValueSet/animal-genderstatus
	GenderStatus *CodeableConcept `form:"genderStatus,omitempty" json:"genderStatus,omitempty" xml:"genderStatus,omitempty"`
	// Identifies the high level taxonomic categorization of the kind of animal. See http://hl7.org/fhir/ValueSet/animal-species
	Species *CodeableConcept `form:"species,omitempty" json:"species,omitempty" xml:"species,omitempty"`
}

// Languages which may be used to communicate with the patient about his or her health.
type communicationPayload struct {
	// Patient's nominated care provider.
	CareProvider *reference `form:"careProvider,omitempty" json:"careProvider,omitempty" xml:"careProvider,omitempty"`
	// The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen
	// 		and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
	Language *codeableConcept `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	// Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
	Preferred *bool `form:"preferred,omitempty" json:"preferred,omitempty" xml:"preferred,omitempty"`
}

// Publicize creates CommunicationPayload from communicationPayload
func (ut *communicationPayload) Publicize() *CommunicationPayload {
	var pub CommunicationPayload
	if ut.CareProvider != nil {
		pub.CareProvider = ut.CareProvider.Publicize()
	}
	if ut.Language != nil {
		pub.Language = ut.Language.Publicize()
	}
	if ut.Preferred != nil {
		pub.Preferred = ut.Preferred
	}
	return &pub
}

// Languages which may be used to communicate with the patient about his or her health.
type CommunicationPayload struct {
	// Patient's nominated care provider.
	CareProvider *Reference `form:"careProvider,omitempty" json:"careProvider,omitempty" xml:"careProvider,omitempty"`
	// The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen
	// 		and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
	Language *CodeableConcept `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	// Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
	Preferred *bool `form:"preferred,omitempty" json:"preferred,omitempty" xml:"preferred,omitempty"`
}

// A contact party (e.g. guardian, partner, friend) for the patient.
type hL7ContactPayload struct {
	// Patient's nominated care provider.
	Address *address `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Patient's nominated care provider.
	CareProvider *reference `form:"careProvider,omitempty" json:"careProvider,omitempty" xml:"careProvider,omitempty"`
	// Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.
	Gender *string `form:"gender,omitempty" json:"gender,omitempty" xml:"gender,omitempty"`
	// The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen
	// 		and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
	Language *codeableConcept `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	// A name associated with the contact person.
	Name *humanName `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Organization on behalf of which the contact is acting or for which the contact is working.
	Organization *reference `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
	// The period during which this contact person or organization is valid to be contacted relating to this patient.
	Period *period `form:"period,omitempty" json:"period,omitempty" xml:"period,omitempty"`
	// Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
	Preferred *bool `form:"preferred,omitempty" json:"preferred,omitempty" xml:"preferred,omitempty"`
	// The nature of the relationship between the patient and the contact person.
	Relationship *codeableConcept `form:"relationship,omitempty" json:"relationship,omitempty" xml:"relationship,omitempty"`
	// Address for the contact person.
	Telecom *contactPoint `form:"telecom,omitempty" json:"telecom,omitempty" xml:"telecom,omitempty"`
}

// Validate validates the hL7ContactPayload type instance.
func (ut *hL7ContactPayload) Validate() (err error) {
	if ut.Address != nil {
		if err2 := ut.Address.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ut.Gender != nil {
		if !(*ut.Gender == "male" || *ut.Gender == "female" || *ut.Gender == "other" || *ut.Gender == "unknown") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.gender`, *ut.Gender, []interface{}{"male", "female", "other", "unknown"}))
		}
	}
	if ut.Name != nil {
		if err2 := ut.Name.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ut.Telecom != nil {
		if err2 := ut.Telecom.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates HL7ContactPayload from hL7ContactPayload
func (ut *hL7ContactPayload) Publicize() *HL7ContactPayload {
	var pub HL7ContactPayload
	if ut.Address != nil {
		pub.Address = ut.Address.Publicize()
	}
	if ut.CareProvider != nil {
		pub.CareProvider = ut.CareProvider.Publicize()
	}
	if ut.Gender != nil {
		pub.Gender = ut.Gender
	}
	if ut.Language != nil {
		pub.Language = ut.Language.Publicize()
	}
	if ut.Name != nil {
		pub.Name = ut.Name.Publicize()
	}
	if ut.Organization != nil {
		pub.Organization = ut.Organization.Publicize()
	}
	if ut.Period != nil {
		pub.Period = ut.Period.Publicize()
	}
	if ut.Preferred != nil {
		pub.Preferred = ut.Preferred
	}
	if ut.Relationship != nil {
		pub.Relationship = ut.Relationship.Publicize()
	}
	if ut.Telecom != nil {
		pub.Telecom = ut.Telecom.Publicize()
	}
	return &pub
}

// A contact party (e.g. guardian, partner, friend) for the patient.
type HL7ContactPayload struct {
	// Patient's nominated care provider.
	Address *Address `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Patient's nominated care provider.
	CareProvider *Reference `form:"careProvider,omitempty" json:"careProvider,omitempty" xml:"careProvider,omitempty"`
	// Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.
	Gender *string `form:"gender,omitempty" json:"gender,omitempty" xml:"gender,omitempty"`
	// The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen
	// 		and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
	Language *CodeableConcept `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	// A name associated with the contact person.
	Name *HumanName `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Organization on behalf of which the contact is acting or for which the contact is working.
	Organization *Reference `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
	// The period during which this contact person or organization is valid to be contacted relating to this patient.
	Period *Period `form:"period,omitempty" json:"period,omitempty" xml:"period,omitempty"`
	// Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
	Preferred *bool `form:"preferred,omitempty" json:"preferred,omitempty" xml:"preferred,omitempty"`
	// The nature of the relationship between the patient and the contact person.
	Relationship *CodeableConcept `form:"relationship,omitempty" json:"relationship,omitempty" xml:"relationship,omitempty"`
	// Address for the contact person.
	Telecom *ContactPoint `form:"telecom,omitempty" json:"telecom,omitempty" xml:"telecom,omitempty"`
}

// Validate validates the HL7ContactPayload type instance.
func (ut *HL7ContactPayload) Validate() (err error) {
	if ut.Address != nil {
		if err2 := ut.Address.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ut.Gender != nil {
		if !(*ut.Gender == "male" || *ut.Gender == "female" || *ut.Gender == "other" || *ut.Gender == "unknown") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.gender`, *ut.Gender, []interface{}{"male", "female", "other", "unknown"}))
		}
	}
	if ut.Name != nil {
		if err2 := ut.Name.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ut.Telecom != nil {
		if err2 := ut.Telecom.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Link to another patient resource that concerns the same actual patient.
type hL7LinkPayload struct {
	// The other patient resource that the link refers to.
	Other *reference `form:"other,omitempty" json:"other,omitempty" xml:"other,omitempty"`
	// The type of link between this patient resource and another patient resource. See http://hl7.org/fhir/ValueSet/link-type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}

// Validate validates the hL7LinkPayload type instance.
func (ut *hL7LinkPayload) Validate() (err error) {
	if ut.Type != nil {
		if !(*ut.Type == "replace" || *ut.Type == "refer" || *ut.Type == "See also") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.type`, *ut.Type, []interface{}{"replace", "refer", "See also"}))
		}
	}
	return
}

// Publicize creates HL7LinkPayload from hL7LinkPayload
func (ut *hL7LinkPayload) Publicize() *HL7LinkPayload {
	var pub HL7LinkPayload
	if ut.Other != nil {
		pub.Other = ut.Other.Publicize()
	}
	if ut.Type != nil {
		pub.Type = ut.Type
	}
	return &pub
}

// Link to another patient resource that concerns the same actual patient.
type HL7LinkPayload struct {
	// The other patient resource that the link refers to.
	Other *Reference `form:"other,omitempty" json:"other,omitempty" xml:"other,omitempty"`
	// The type of link between this patient resource and another patient resource. See http://hl7.org/fhir/ValueSet/link-type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}

// Validate validates the HL7LinkPayload type instance.
func (ut *HL7LinkPayload) Validate() (err error) {
	if ut.Type != nil {
		if !(*ut.Type == "replace" || *ut.Type == "refer" || *ut.Type == "See also") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.type`, *ut.Type, []interface{}{"replace", "refer", "See also"}))
		}
	}
	return
}

// A human's name with the ability to identify parts and usage.
type humanNamePayload struct {
	// The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
	Family []string `form:"family,omitempty" json:"family,omitempty" xml:"family,omitempty"`
	// Given names (not always 'first'). Includes middle names
	Given *string `form:"given,omitempty" json:"given,omitempty" xml:"given,omitempty"`
	// Indicates the period of time when this name was valid for the named person.
	Period *period `form:"period,omitempty" json:"period,omitempty" xml:"period,omitempty"`
	// Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
	Prefix *string `form:"prefix,omitempty" json:"prefix,omitempty" xml:"prefix,omitempty"`
	// Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
	Suffix *string `form:"suffix,omitempty" json:"suffix,omitempty" xml:"suffix,omitempty"`
	// Identifies the purpose for this name.
	Use *string `form:"use,omitempty" json:"use,omitempty" xml:"use,omitempty"`
}

// Validate validates the humanNamePayload type instance.
func (ut *humanNamePayload) Validate() (err error) {
	if ut.Use == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "use"))
	}
	if ut.Use != nil {
		if !(*ut.Use == "usual" || *ut.Use == "official" || *ut.Use == "temp" || *ut.Use == "nickname" || *ut.Use == "anonymous" || *ut.Use == "old" || *ut.Use == "maiden") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.use`, *ut.Use, []interface{}{"usual", "official", "temp", "nickname", "anonymous", "old", "maiden"}))
		}
	}
	return
}

// Publicize creates HumanNamePayload from humanNamePayload
func (ut *humanNamePayload) Publicize() *HumanNamePayload {
	var pub HumanNamePayload
	if ut.Family != nil {
		pub.Family = ut.Family
	}
	if ut.Given != nil {
		pub.Given = ut.Given
	}
	if ut.Period != nil {
		pub.Period = ut.Period.Publicize()
	}
	if ut.Prefix != nil {
		pub.Prefix = ut.Prefix
	}
	if ut.Suffix != nil {
		pub.Suffix = ut.Suffix
	}
	if ut.Use != nil {
		pub.Use = *ut.Use
	}
	return &pub
}

// A human's name with the ability to identify parts and usage.
type HumanNamePayload struct {
	// The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
	Family []string `form:"family,omitempty" json:"family,omitempty" xml:"family,omitempty"`
	// Given names (not always 'first'). Includes middle names
	Given *string `form:"given,omitempty" json:"given,omitempty" xml:"given,omitempty"`
	// Indicates the period of time when this name was valid for the named person.
	Period *Period `form:"period,omitempty" json:"period,omitempty" xml:"period,omitempty"`
	// Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
	Prefix *string `form:"prefix,omitempty" json:"prefix,omitempty" xml:"prefix,omitempty"`
	// Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
	Suffix *string `form:"suffix,omitempty" json:"suffix,omitempty" xml:"suffix,omitempty"`
	// Identifies the purpose for this name.
	Use string `form:"use" json:"use" xml:"use"`
}

// Validate validates the HumanNamePayload type instance.
func (ut *HumanNamePayload) Validate() (err error) {
	if ut.Use == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "use"))
	}
	if !(ut.Use == "usual" || ut.Use == "official" || ut.Use == "temp" || ut.Use == "nickname" || ut.Use == "anonymous" || ut.Use == "old" || ut.Use == "maiden") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.use`, ut.Use, []interface{}{"usual", "official", "temp", "nickname", "anonymous", "old", "maiden"}))
	}
	return
}

// A technical identifier - identifies some entity uniquely and unambiguously.
type identifierPayload struct {
	// A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
	CodeableConcept *codeableConcept `form:"CodeableConcept,omitempty" json:"CodeableConcept,omitempty" xml:"CodeableConcept,omitempty"`
	// Organization that issued/manages the identifier.
	Assigner *reference `form:"assigner,omitempty" json:"assigner,omitempty" xml:"assigner,omitempty"`
	// Time period during which identifier is/was valid for use.
	Period *period `form:"period,omitempty" json:"period,omitempty" xml:"period,omitempty"`
	// Identifies the purpose for this identifier, if known.
	Use *string `form:"use,omitempty" json:"use,omitempty" xml:"use,omitempty"`
}

// Validate validates the identifierPayload type instance.
func (ut *identifierPayload) Validate() (err error) {
	if ut.Use == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "use"))
	}
	if ut.Use != nil {
		if !(*ut.Use == "usual" || *ut.Use == "official" || *ut.Use == "temp" || *ut.Use == "secondary (If known)") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.use`, *ut.Use, []interface{}{"usual", "official", "temp", "secondary (If known)"}))
		}
	}
	return
}

// Publicize creates IdentifierPayload from identifierPayload
func (ut *identifierPayload) Publicize() *IdentifierPayload {
	var pub IdentifierPayload
	if ut.CodeableConcept != nil {
		pub.CodeableConcept = ut.CodeableConcept.Publicize()
	}
	if ut.Assigner != nil {
		pub.Assigner = ut.Assigner.Publicize()
	}
	if ut.Period != nil {
		pub.Period = ut.Period.Publicize()
	}
	if ut.Use != nil {
		pub.Use = *ut.Use
	}
	return &pub
}

// A technical identifier - identifies some entity uniquely and unambiguously.
type IdentifierPayload struct {
	// A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
	CodeableConcept *CodeableConcept `form:"CodeableConcept,omitempty" json:"CodeableConcept,omitempty" xml:"CodeableConcept,omitempty"`
	// Organization that issued/manages the identifier.
	Assigner *Reference `form:"assigner,omitempty" json:"assigner,omitempty" xml:"assigner,omitempty"`
	// Time period during which identifier is/was valid for use.
	Period *Period `form:"period,omitempty" json:"period,omitempty" xml:"period,omitempty"`
	// Identifies the purpose for this identifier, if known.
	Use string `form:"use" json:"use" xml:"use"`
}

// Validate validates the IdentifierPayload type instance.
func (ut *IdentifierPayload) Validate() (err error) {
	if ut.Use == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "use"))
	}
	if !(ut.Use == "usual" || ut.Use == "official" || ut.Use == "temp" || ut.Use == "secondary (If known)") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.use`, ut.Use, []interface{}{"usual", "official", "temp", "secondary (If known)"}))
	}
	return
}

// nutritionRequestPayload user type.
type nutritionRequestPayload struct {
	Address                *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	AddressPostalCode      *string `form:"address_postal_code,omitempty" json:"address_postal_code,omitempty" xml:"address_postal_code,omitempty"`
	EnteralFormula         *string `form:"enteralFormula,omitempty" json:"enteralFormula,omitempty" xml:"enteralFormula,omitempty"`
	FoodPreferenceModifier *struct {
		Coding *string `form:"coding,omitempty" json:"coding,omitempty" xml:"coding,omitempty"`
		ID     *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
		Text   *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	} `form:"foodPreferenceModifier,omitempty" json:"foodPreferenceModifier,omitempty" xml:"foodPreferenceModifier,omitempty"`
	Href             *string           `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	ID               *string           `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Identifier       *string           `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	Links            *string           `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	NutritionRequest *nutritionRequest `form:"nutritionRequest,omitempty" json:"nutritionRequest,omitempty" xml:"nutritionRequest,omitempty"`
	OralDiet         *string           `form:"oralDiet,omitempty" json:"oralDiet,omitempty" xml:"oralDiet,omitempty"`
	Patient          *struct {
		ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
		Reference *string `form:"reference,omitempty" json:"reference,omitempty" xml:"reference,omitempty"`
	} `form:"patient,omitempty" json:"patient,omitempty" xml:"patient,omitempty"`
	Supplement *string `form:"supplement,omitempty" json:"supplement,omitempty" xml:"supplement,omitempty"`
}

// Validate validates the nutritionRequestPayload type instance.
func (ut *nutritionRequestPayload) Validate() (err error) {
	if ut.AddressPostalCode != nil {
		if utf8.RuneCountInString(*ut.AddressPostalCode) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_postal_code`, *ut.AddressPostalCode, utf8.RuneCountInString(*ut.AddressPostalCode), 5, true))
		}
	}
	if ut.NutritionRequest != nil {
		if err2 := ut.NutritionRequest.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates NutritionRequestPayload from nutritionRequestPayload
func (ut *nutritionRequestPayload) Publicize() *NutritionRequestPayload {
	var pub NutritionRequestPayload
	if ut.Address != nil {
		pub.Address = ut.Address
	}
	if ut.AddressPostalCode != nil {
		pub.AddressPostalCode = ut.AddressPostalCode
	}
	if ut.EnteralFormula != nil {
		pub.EnteralFormula = ut.EnteralFormula
	}
	if ut.FoodPreferenceModifier != nil {
		pub.FoodPreferenceModifier = &struct {
			Coding *string `form:"coding,omitempty" json:"coding,omitempty" xml:"coding,omitempty"`
			ID     *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
			Text   *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
		}{}
		if ut.FoodPreferenceModifier.Coding != nil {
			pub.FoodPreferenceModifier.Coding = ut.FoodPreferenceModifier.Coding
		}
		if ut.FoodPreferenceModifier.ID != nil {
			pub.FoodPreferenceModifier.ID = ut.FoodPreferenceModifier.ID
		}
		if ut.FoodPreferenceModifier.Text != nil {
			pub.FoodPreferenceModifier.Text = ut.FoodPreferenceModifier.Text
		}
	}
	if ut.Href != nil {
		pub.Href = ut.Href
	}
	if ut.ID != nil {
		pub.ID = ut.ID
	}
	if ut.Identifier != nil {
		pub.Identifier = ut.Identifier
	}
	if ut.Links != nil {
		pub.Links = ut.Links
	}
	if ut.NutritionRequest != nil {
		pub.NutritionRequest = ut.NutritionRequest.Publicize()
	}
	if ut.OralDiet != nil {
		pub.OralDiet = ut.OralDiet
	}
	if ut.Patient != nil {
		pub.Patient = &struct {
			ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
			Reference *string `form:"reference,omitempty" json:"reference,omitempty" xml:"reference,omitempty"`
		}{}
		if ut.Patient.ID != nil {
			pub.Patient.ID = ut.Patient.ID
		}
		if ut.Patient.Reference != nil {
			pub.Patient.Reference = ut.Patient.Reference
		}
	}
	if ut.Supplement != nil {
		pub.Supplement = ut.Supplement
	}
	return &pub
}

// NutritionRequestPayload user type.
type NutritionRequestPayload struct {
	Address                *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	AddressPostalCode      *string `form:"address_postal_code,omitempty" json:"address_postal_code,omitempty" xml:"address_postal_code,omitempty"`
	EnteralFormula         *string `form:"enteralFormula,omitempty" json:"enteralFormula,omitempty" xml:"enteralFormula,omitempty"`
	FoodPreferenceModifier *struct {
		Coding *string `form:"coding,omitempty" json:"coding,omitempty" xml:"coding,omitempty"`
		ID     *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
		Text   *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	} `form:"foodPreferenceModifier,omitempty" json:"foodPreferenceModifier,omitempty" xml:"foodPreferenceModifier,omitempty"`
	Href             *string           `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	ID               *string           `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Identifier       *string           `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	Links            *string           `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	NutritionRequest *NutritionRequest `form:"nutritionRequest,omitempty" json:"nutritionRequest,omitempty" xml:"nutritionRequest,omitempty"`
	OralDiet         *string           `form:"oralDiet,omitempty" json:"oralDiet,omitempty" xml:"oralDiet,omitempty"`
	Patient          *struct {
		ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
		Reference *string `form:"reference,omitempty" json:"reference,omitempty" xml:"reference,omitempty"`
	} `form:"patient,omitempty" json:"patient,omitempty" xml:"patient,omitempty"`
	Supplement *string `form:"supplement,omitempty" json:"supplement,omitempty" xml:"supplement,omitempty"`
}

// Validate validates the NutritionRequestPayload type instance.
func (ut *NutritionRequestPayload) Validate() (err error) {
	if ut.AddressPostalCode != nil {
		if utf8.RuneCountInString(*ut.AddressPostalCode) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_postal_code`, *ut.AddressPostalCode, utf8.RuneCountInString(*ut.AddressPostalCode), 5, true))
		}
	}
	if ut.NutritionRequest != nil {
		if err2 := ut.NutritionRequest.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Payload sent by client to obtain refresh and access token or to refresh an access token.
//                 See https://tools.ietf.org/html/rfc6749#section-4.1.3 and https://tools.ietf.org/html/rfc6749#section-6
type oAuth2TokenPayload struct {
	// The authorization code received from the authorization server, used for initial refresh and access token request
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Value MUST be set to "authorization_code" when obtaining initial refresh and access token.
	//             Value MUST be set to "refresh_token" when refreshing an access token.
	GrantType *string `form:"grant_type,omitempty" json:"grant_type,omitempty" xml:"grant_type,omitempty"`
	// The redirect_uri parameter specified when making the authorize request to obtain the authorization code, used for initial refresh and access token request
	RedirectURI *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty" xml:"redirect_uri,omitempty"`
	// The refresh token issued to the client, used for refreshing an access token
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// The scope of the access request, used for refreshing an access token
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
}

// Validate validates the oAuth2TokenPayload type instance.
func (ut *oAuth2TokenPayload) Validate() (err error) {
	if ut.GrantType == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "grant_type"))
	}
	if ut.GrantType != nil {
		if !(*ut.GrantType == "authorization_code" || *ut.GrantType == "refresh_token") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.grant_type`, *ut.GrantType, []interface{}{"authorization_code", "refresh_token"}))
		}
	}
	return
}

// Publicize creates OAuth2TokenPayload from oAuth2TokenPayload
func (ut *oAuth2TokenPayload) Publicize() *OAuth2TokenPayload {
	var pub OAuth2TokenPayload
	if ut.Code != nil {
		pub.Code = ut.Code
	}
	if ut.GrantType != nil {
		pub.GrantType = *ut.GrantType
	}
	if ut.RedirectURI != nil {
		pub.RedirectURI = ut.RedirectURI
	}
	if ut.RefreshToken != nil {
		pub.RefreshToken = ut.RefreshToken
	}
	if ut.Scope != nil {
		pub.Scope = ut.Scope
	}
	return &pub
}

// Payload sent by client to obtain refresh and access token or to refresh an access token.
//                 See https://tools.ietf.org/html/rfc6749#section-4.1.3 and https://tools.ietf.org/html/rfc6749#section-6
type OAuth2TokenPayload struct {
	// The authorization code received from the authorization server, used for initial refresh and access token request
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Value MUST be set to "authorization_code" when obtaining initial refresh and access token.
	//             Value MUST be set to "refresh_token" when refreshing an access token.
	GrantType string `form:"grant_type" json:"grant_type" xml:"grant_type"`
	// The redirect_uri parameter specified when making the authorize request to obtain the authorization code, used for initial refresh and access token request
	RedirectURI *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty" xml:"redirect_uri,omitempty"`
	// The refresh token issued to the client, used for refreshing an access token
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// The scope of the access request, used for refreshing an access token
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
}

// Validate validates the OAuth2TokenPayload type instance.
func (ut *OAuth2TokenPayload) Validate() (err error) {
	if ut.GrantType == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "grant_type"))
	}
	if !(ut.GrantType == "authorization_code" || ut.GrantType == "refresh_token") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.grant_type`, ut.GrantType, []interface{}{"authorization_code", "refresh_token"}))
	}
	return
}

// observationPayload user type.
type observationPayload struct {
	Observation *observation `form:"observation,omitempty" json:"observation,omitempty" xml:"observation,omitempty"`
}

// Validate validates the observationPayload type instance.
func (ut *observationPayload) Validate() (err error) {
	if ut.Observation != nil {
		if err2 := ut.Observation.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates ObservationPayload from observationPayload
func (ut *observationPayload) Publicize() *ObservationPayload {
	var pub ObservationPayload
	if ut.Observation != nil {
		pub.Observation = ut.Observation.Publicize()
	}
	return &pub
}

// ObservationPayload user type.
type ObservationPayload struct {
	Observation *Observation `form:"observation,omitempty" json:"observation,omitempty" xml:"observation,omitempty"`
}

// Validate validates the ObservationPayload type instance.
func (ut *ObservationPayload) Validate() (err error) {
	if ut.Observation != nil {
		if err2 := ut.Observation.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Demographics and other administrative information about an individual or animal receiving care or other health-related services.
type patientPayload struct {
	// Whether this patient record is in active use.
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Addresses for the individual.
	Address []*address `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// This patient is known to be an animal.
	Animal *animal `form:"animal,omitempty" json:"animal,omitempty" xml:"animal,omitempty"`
	// The date of birth for the individual.
	BirthDate *time.Time `form:"birthDate,omitempty" json:"birthDate,omitempty" xml:"birthDate,omitempty"`
	// Patient's nominated primary care provider
	CareProvider *reference `form:"careProvider,omitempty" json:"careProvider,omitempty" xml:"careProvider,omitempty"`
	// Languages which may be used to communicate with the patient about his or her health.
	Communication []*communication `form:"communication,omitempty" json:"communication,omitempty" xml:"communication,omitempty"`
	// A contact party (e.g. guardian, partner, friend) for the patient.
	Contact []*contact `form:"contact,omitempty" json:"contact,omitempty" xml:"contact,omitempty"`
	// Date of creation
	CreatedAt *time.Time `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Email of patient owner
	CreatedBy *string `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// Indicates if the individual is deceased or not.
	DeceasedBoolean *bool `form:"deceasedBoolean,omitempty" json:"deceasedBoolean,omitempty" xml:"deceasedBoolean,omitempty"`
	// Indicates if the individual is deceased or not.
	DeceasedDateTime *time.Time `form:"deceasedDateTime,omitempty" json:"deceasedDateTime,omitempty" xml:"deceasedDateTime,omitempty"`
	// Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes. See http://hl7.org/fhir/ValueSet/administrative-gender
	Gender *string `form:"gender,omitempty" json:"gender,omitempty" xml:"gender,omitempty"`
	// API href of patient
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// ID of patient
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Patient identifer
	Identifier []*identifier `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	// Link to another patient resource that concerns the same actual patient.
	Link []*link `form:"link,omitempty" json:"link,omitempty" xml:"link,omitempty"`
	// Organization that is the custodian of the patient record.
	ManagingOrganization *reference `form:"managingOrganization,omitempty" json:"managingOrganization,omitempty" xml:"managingOrganization,omitempty"`
	// This field contains a patient's most recent marital (civil) status. See http://hl7.org/fhir/ValueSet/marital-status
	MaritalStatus *codeableConcept `form:"maritalStatus,omitempty" json:"maritalStatus,omitempty" xml:"maritalStatus,omitempty"`
	// Indicates whether the patient is part of a multiple or indicates the actual birth order..
	MultipleBirthBoolean *bool `form:"multipleBirthBoolean,omitempty" json:"multipleBirthBoolean,omitempty" xml:"multipleBirthBoolean,omitempty"`
	// Indicates whether the patient is part of a multiple or indicates the actual birth order..
	MultipleBirthInteger *int `form:"multipleBirthInteger,omitempty" json:"multipleBirthInteger,omitempty" xml:"multipleBirthInteger,omitempty"`
	// A name associated with the individual.
	Name []*humanName `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Image of the patient.
	Photo []*attachment `form:"photo,omitempty" json:"photo,omitempty" xml:"photo,omitempty"`
	// A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted..
	Telecom []*contactPoint `form:"telecom,omitempty" json:"telecom,omitempty" xml:"telecom,omitempty"`
}

// Validate validates the patientPayload type instance.
func (ut *patientPayload) Validate() (err error) {
	if ut.ID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if ut.Href == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if ut.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "created_at"))
	}
	if ut.CreatedBy == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "created_by"))
	}
	if ut.Gender == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "gender"))
	}
	if ut.MaritalStatus == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "maritalStatus"))
	}
	for _, e := range ut.Address {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if ut.CreatedBy != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`response.created_by`, *ut.CreatedBy, goa.FormatEmail, err2))
		}
	}
	if ut.Gender != nil {
		if !(*ut.Gender == "male" || *ut.Gender == "female" || *ut.Gender == "other" || *ut.Gender == "unknown") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.gender`, *ut.Gender, []interface{}{"male", "female", "other", "unknown"}))
		}
	}
	for _, e := range ut.Name {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range ut.Photo {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range ut.Telecom {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Publicize creates PatientPayload from patientPayload
func (ut *patientPayload) Publicize() *PatientPayload {
	var pub PatientPayload
	if ut.Active != nil {
		pub.Active = ut.Active
	}
	if ut.Address != nil {
		pub.Address = make([]*Address, len(ut.Address))
		for i2, elem2 := range ut.Address {
			pub.Address[i2] = elem2.Publicize()
		}
	}
	if ut.Animal != nil {
		pub.Animal = ut.Animal.Publicize()
	}
	if ut.BirthDate != nil {
		pub.BirthDate = ut.BirthDate
	}
	if ut.CareProvider != nil {
		pub.CareProvider = ut.CareProvider.Publicize()
	}
	if ut.Communication != nil {
		pub.Communication = make([]*Communication, len(ut.Communication))
		for i2, elem2 := range ut.Communication {
			pub.Communication[i2] = elem2.Publicize()
		}
	}
	if ut.Contact != nil {
		pub.Contact = make([]*Contact, len(ut.Contact))
		for i2, elem2 := range ut.Contact {
			pub.Contact[i2] = elem2.Publicize()
		}
	}
	if ut.CreatedAt != nil {
		pub.CreatedAt = *ut.CreatedAt
	}
	if ut.CreatedBy != nil {
		pub.CreatedBy = *ut.CreatedBy
	}
	if ut.DeceasedBoolean != nil {
		pub.DeceasedBoolean = ut.DeceasedBoolean
	}
	if ut.DeceasedDateTime != nil {
		pub.DeceasedDateTime = ut.DeceasedDateTime
	}
	if ut.Gender != nil {
		pub.Gender = *ut.Gender
	}
	if ut.Href != nil {
		pub.Href = *ut.Href
	}
	if ut.ID != nil {
		pub.ID = *ut.ID
	}
	if ut.Identifier != nil {
		pub.Identifier = make([]*Identifier, len(ut.Identifier))
		for i2, elem2 := range ut.Identifier {
			pub.Identifier[i2] = elem2.Publicize()
		}
	}
	if ut.Link != nil {
		pub.Link = make([]*Link, len(ut.Link))
		for i2, elem2 := range ut.Link {
			pub.Link[i2] = elem2.Publicize()
		}
	}
	if ut.ManagingOrganization != nil {
		pub.ManagingOrganization = ut.ManagingOrganization.Publicize()
	}
	if ut.MaritalStatus != nil {
		pub.MaritalStatus = ut.MaritalStatus.Publicize()
	}
	if ut.MultipleBirthBoolean != nil {
		pub.MultipleBirthBoolean = ut.MultipleBirthBoolean
	}
	if ut.MultipleBirthInteger != nil {
		pub.MultipleBirthInteger = ut.MultipleBirthInteger
	}
	if ut.Name != nil {
		pub.Name = make([]*HumanName, len(ut.Name))
		for i2, elem2 := range ut.Name {
			pub.Name[i2] = elem2.Publicize()
		}
	}
	if ut.Photo != nil {
		pub.Photo = make([]*Attachment, len(ut.Photo))
		for i2, elem2 := range ut.Photo {
			pub.Photo[i2] = elem2.Publicize()
		}
	}
	if ut.Telecom != nil {
		pub.Telecom = make([]*ContactPoint, len(ut.Telecom))
		for i2, elem2 := range ut.Telecom {
			pub.Telecom[i2] = elem2.Publicize()
		}
	}
	return &pub
}

// Demographics and other administrative information about an individual or animal receiving care or other health-related services.
type PatientPayload struct {
	// Whether this patient record is in active use.
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Addresses for the individual.
	Address []*Address `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// This patient is known to be an animal.
	Animal *Animal `form:"animal,omitempty" json:"animal,omitempty" xml:"animal,omitempty"`
	// The date of birth for the individual.
	BirthDate *time.Time `form:"birthDate,omitempty" json:"birthDate,omitempty" xml:"birthDate,omitempty"`
	// Patient's nominated primary care provider
	CareProvider *Reference `form:"careProvider,omitempty" json:"careProvider,omitempty" xml:"careProvider,omitempty"`
	// Languages which may be used to communicate with the patient about his or her health.
	Communication []*Communication `form:"communication,omitempty" json:"communication,omitempty" xml:"communication,omitempty"`
	// A contact party (e.g. guardian, partner, friend) for the patient.
	Contact []*Contact `form:"contact,omitempty" json:"contact,omitempty" xml:"contact,omitempty"`
	// Date of creation
	CreatedAt time.Time `form:"created_at" json:"created_at" xml:"created_at"`
	// Email of patient owner
	CreatedBy string `form:"created_by" json:"created_by" xml:"created_by"`
	// Indicates if the individual is deceased or not.
	DeceasedBoolean *bool `form:"deceasedBoolean,omitempty" json:"deceasedBoolean,omitempty" xml:"deceasedBoolean,omitempty"`
	// Indicates if the individual is deceased or not.
	DeceasedDateTime *time.Time `form:"deceasedDateTime,omitempty" json:"deceasedDateTime,omitempty" xml:"deceasedDateTime,omitempty"`
	// Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes. See http://hl7.org/fhir/ValueSet/administrative-gender
	Gender string `form:"gender" json:"gender" xml:"gender"`
	// API href of patient
	Href string `form:"href" json:"href" xml:"href"`
	// ID of patient
	ID int `form:"id" json:"id" xml:"id"`
	// Patient identifer
	Identifier []*Identifier `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	// Link to another patient resource that concerns the same actual patient.
	Link []*Link `form:"link,omitempty" json:"link,omitempty" xml:"link,omitempty"`
	// Organization that is the custodian of the patient record.
	ManagingOrganization *Reference `form:"managingOrganization,omitempty" json:"managingOrganization,omitempty" xml:"managingOrganization,omitempty"`
	// This field contains a patient's most recent marital (civil) status. See http://hl7.org/fhir/ValueSet/marital-status
	MaritalStatus *CodeableConcept `form:"maritalStatus" json:"maritalStatus" xml:"maritalStatus"`
	// Indicates whether the patient is part of a multiple or indicates the actual birth order..
	MultipleBirthBoolean *bool `form:"multipleBirthBoolean,omitempty" json:"multipleBirthBoolean,omitempty" xml:"multipleBirthBoolean,omitempty"`
	// Indicates whether the patient is part of a multiple or indicates the actual birth order..
	MultipleBirthInteger *int `form:"multipleBirthInteger,omitempty" json:"multipleBirthInteger,omitempty" xml:"multipleBirthInteger,omitempty"`
	// A name associated with the individual.
	Name []*HumanName `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Image of the patient.
	Photo []*Attachment `form:"photo,omitempty" json:"photo,omitempty" xml:"photo,omitempty"`
	// A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted..
	Telecom []*ContactPoint `form:"telecom,omitempty" json:"telecom,omitempty" xml:"telecom,omitempty"`
}

// Validate validates the PatientPayload type instance.
func (ut *PatientPayload) Validate() (err error) {

	if ut.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}

	if ut.CreatedBy == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "created_by"))
	}
	if ut.Gender == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "gender"))
	}
	if ut.MaritalStatus == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "maritalStatus"))
	}
	for _, e := range ut.Address {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.CreatedBy); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`response.created_by`, ut.CreatedBy, goa.FormatEmail, err2))
	}
	if !(ut.Gender == "male" || ut.Gender == "female" || ut.Gender == "other" || ut.Gender == "unknown") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.gender`, ut.Gender, []interface{}{"male", "female", "other", "unknown"}))
	}
	for _, e := range ut.Name {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range ut.Photo {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range ut.Telecom {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Payload sent by client to obtain refresh and access token or to refresh an access token.
// see https://tools.ietf.org/html/rfc6749#section-4.1.3 and https://tools.ietf.org/html/rfc6749#section-6
type tokenPayload struct {
	// The authorization code received from the authorization server, used for initial refresh and access token request
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Value MUST be set to "authorization_code" when obtaining initial refresh and access token.
	// Value MUST be set to "refresh_token" when refreshing an access token.
	GrantType *string `form:"grant_type,omitempty" json:"grant_type,omitempty" xml:"grant_type,omitempty"`
	// The redirect_uri parameter specified when making the authorize request to obtain the authorization code, used for initial refresh and access token request
	RedirectURI *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty" xml:"redirect_uri,omitempty"`
	// The refresh token issued to the client, used for refreshing an access token
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// The scope of the access request, used for refreshing an access token
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
}

// Validate validates the tokenPayload type instance.
func (ut *tokenPayload) Validate() (err error) {
	if ut.GrantType == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "grant_type"))
	}
	if ut.GrantType != nil {
		if !(*ut.GrantType == "authorization_code" || *ut.GrantType == "refresh_token") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.grant_type`, *ut.GrantType, []interface{}{"authorization_code", "refresh_token"}))
		}
	}
	return
}

// Publicize creates TokenPayload from tokenPayload
func (ut *tokenPayload) Publicize() *TokenPayload {
	var pub TokenPayload
	if ut.Code != nil {
		pub.Code = ut.Code
	}
	if ut.GrantType != nil {
		pub.GrantType = *ut.GrantType
	}
	if ut.RedirectURI != nil {
		pub.RedirectURI = ut.RedirectURI
	}
	if ut.RefreshToken != nil {
		pub.RefreshToken = ut.RefreshToken
	}
	if ut.Scope != nil {
		pub.Scope = ut.Scope
	}
	return &pub
}

// Payload sent by client to obtain refresh and access token or to refresh an access token.
// see https://tools.ietf.org/html/rfc6749#section-4.1.3 and https://tools.ietf.org/html/rfc6749#section-6
type TokenPayload struct {
	// The authorization code received from the authorization server, used for initial refresh and access token request
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Value MUST be set to "authorization_code" when obtaining initial refresh and access token.
	// Value MUST be set to "refresh_token" when refreshing an access token.
	GrantType string `form:"grant_type" json:"grant_type" xml:"grant_type"`
	// The redirect_uri parameter specified when making the authorize request to obtain the authorization code, used for initial refresh and access token request
	RedirectURI *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty" xml:"redirect_uri,omitempty"`
	// The refresh token issued to the client, used for refreshing an access token
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// The scope of the access request, used for refreshing an access token
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
}

// Validate validates the TokenPayload type instance.
func (ut *TokenPayload) Validate() (err error) {
	if ut.GrantType == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "grant_type"))
	}
	if !(ut.GrantType == "authorization_code" || ut.GrantType == "refresh_token") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.grant_type`, ut.GrantType, []interface{}{"authorization_code", "refresh_token"}))
	}
	return
}

// userPayload user type.
type userPayload struct {
	AddressCity       *string `form:"address_city,omitempty" json:"address_city,omitempty" xml:"address_city,omitempty"`
	AddressLine       *string `form:"address_line,omitempty" json:"address_line,omitempty" xml:"address_line,omitempty"`
	AddressPostalCode *string `form:"address_postal_code,omitempty" json:"address_postal_code,omitempty" xml:"address_postal_code,omitempty"`
	AddressState      *string `form:"address_state,omitempty" json:"address_state,omitempty" xml:"address_state,omitempty"`
	Email             *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	FirstName         *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	LastName          *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	Password          *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	Username          *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// Validate validates the userPayload type instance.
func (ut *userPayload) Validate() (err error) {
	if ut.AddressCity != nil {
		if utf8.RuneCountInString(*ut.AddressCity) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_city`, *ut.AddressCity, utf8.RuneCountInString(*ut.AddressCity), 2, true))
		}
	}
	if ut.AddressLine != nil {
		if utf8.RuneCountInString(*ut.AddressLine) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_line`, *ut.AddressLine, utf8.RuneCountInString(*ut.AddressLine), 2, true))
		}
	}
	if ut.AddressPostalCode != nil {
		if utf8.RuneCountInString(*ut.AddressPostalCode) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_postal_code`, *ut.AddressPostalCode, utf8.RuneCountInString(*ut.AddressPostalCode), 5, true))
		}
	}
	if ut.AddressState != nil {
		if utf8.RuneCountInString(*ut.AddressState) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_state`, *ut.AddressState, utf8.RuneCountInString(*ut.AddressState), 2, true))
		}
	}
	if ut.Email != nil {
		if utf8.RuneCountInString(*ut.Email) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.email`, *ut.Email, utf8.RuneCountInString(*ut.Email), 4, true))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.first_name`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 2, true))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.last_name`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 2, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 2, true))
		}
	}
	if ut.Username != nil {
		if utf8.RuneCountInString(*ut.Username) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.username`, *ut.Username, utf8.RuneCountInString(*ut.Username), 3, true))
		}
	}
	return
}

// Publicize creates UserPayload from userPayload
func (ut *userPayload) Publicize() *UserPayload {
	var pub UserPayload
	if ut.AddressCity != nil {
		pub.AddressCity = ut.AddressCity
	}
	if ut.AddressLine != nil {
		pub.AddressLine = ut.AddressLine
	}
	if ut.AddressPostalCode != nil {
		pub.AddressPostalCode = ut.AddressPostalCode
	}
	if ut.AddressState != nil {
		pub.AddressState = ut.AddressState
	}
	if ut.Email != nil {
		pub.Email = ut.Email
	}
	if ut.FirstName != nil {
		pub.FirstName = ut.FirstName
	}
	if ut.LastName != nil {
		pub.LastName = ut.LastName
	}
	if ut.Password != nil {
		pub.Password = ut.Password
	}
	if ut.Username != nil {
		pub.Username = ut.Username
	}
	return &pub
}

// UserPayload user type.
type UserPayload struct {
	AddressCity       *string `form:"address_city,omitempty" json:"address_city,omitempty" xml:"address_city,omitempty"`
	AddressLine       *string `form:"address_line,omitempty" json:"address_line,omitempty" xml:"address_line,omitempty"`
	AddressPostalCode *string `form:"address_postal_code,omitempty" json:"address_postal_code,omitempty" xml:"address_postal_code,omitempty"`
	AddressState      *string `form:"address_state,omitempty" json:"address_state,omitempty" xml:"address_state,omitempty"`
	Email             *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	FirstName         *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	LastName          *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	Password          *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	Username          *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// Validate validates the UserPayload type instance.
func (ut *UserPayload) Validate() (err error) {
	if ut.AddressCity != nil {
		if utf8.RuneCountInString(*ut.AddressCity) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_city`, *ut.AddressCity, utf8.RuneCountInString(*ut.AddressCity), 2, true))
		}
	}
	if ut.AddressLine != nil {
		if utf8.RuneCountInString(*ut.AddressLine) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_line`, *ut.AddressLine, utf8.RuneCountInString(*ut.AddressLine), 2, true))
		}
	}
	if ut.AddressPostalCode != nil {
		if utf8.RuneCountInString(*ut.AddressPostalCode) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_postal_code`, *ut.AddressPostalCode, utf8.RuneCountInString(*ut.AddressPostalCode), 5, true))
		}
	}
	if ut.AddressState != nil {
		if utf8.RuneCountInString(*ut.AddressState) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address_state`, *ut.AddressState, utf8.RuneCountInString(*ut.AddressState), 2, true))
		}
	}
	if ut.Email != nil {
		if utf8.RuneCountInString(*ut.Email) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.email`, *ut.Email, utf8.RuneCountInString(*ut.Email), 4, true))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.first_name`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 2, true))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.last_name`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 2, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 2, true))
		}
	}
	if ut.Username != nil {
		if utf8.RuneCountInString(*ut.Username) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.username`, *ut.Username, utf8.RuneCountInString(*ut.Username), 3, true))
		}
	}
	return
}
