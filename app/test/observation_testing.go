// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/goa-fhir/server/design
// --out=$(GOPATH)\src\github.com\goa-fhir\server
// --version=v1.1.0-dirty
//
// API "Secure": Observation TestHelpers
//
// The content of this file is auto-generated, DO NOT MODIFY

package test

import (
	"bytes"
	"fmt"
	"github.com/goa-fhir/server/app"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/goatest"
	"golang.org/x/net/context"
	"io"
	"log"
	"net/http"
	"net/http/httptest"
	"net/url"
	"strconv"
	"time"
)

// CreateObservationBadRequest runs the method Create of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func CreateObservationBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string, payload *app.CreateObservationPayload) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		return nil, e
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation", patientID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	createCtx, err := app.NewCreateObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}
	createCtx.Payload = payload

	// Perform action
	err = ctrl.Create(createCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var ok bool
		mt, ok = resp.(error)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of error", resp)
		}
	}

	// Return results
	return rw, mt
}

// CreateObservationCreated runs the method Create of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func CreateObservationCreated(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string, payload *app.CreateObservationPayload) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation", patientID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	createCtx, err := app.NewCreateObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}
	createCtx.Payload = payload

	// Perform action
	err = ctrl.Create(createCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 201 {
		t.Errorf("invalid response status code: got %+v, expected 201", rw.Code)
	}

	// Return results
	return rw
}

// CreateObservationNotFound runs the method Create of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func CreateObservationNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string, payload *app.CreateObservationPayload) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation", patientID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	createCtx, err := app.NewCreateObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}
	createCtx.Payload = payload

	// Perform action
	err = ctrl.Create(createCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// DeleteObservationBadRequest runs the method Delete of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func DeleteObservationBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, observationID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation/%v", patientID, observationID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	prms["observationID"] = []string{fmt.Sprintf("%v", observationID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	deleteCtx, err := app.NewDeleteObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}

	// Perform action
	err = ctrl.Delete(deleteCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var ok bool
		mt, ok = resp.(error)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of error", resp)
		}
	}

	// Return results
	return rw, mt
}

// DeleteObservationNoContent runs the method Delete of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func DeleteObservationNoContent(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, observationID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation/%v", patientID, observationID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	prms["observationID"] = []string{fmt.Sprintf("%v", observationID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	deleteCtx, err := app.NewDeleteObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}

	// Perform action
	err = ctrl.Delete(deleteCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 204 {
		t.Errorf("invalid response status code: got %+v, expected 204", rw.Code)
	}

	// Return results
	return rw
}

// DeleteObservationNotFound runs the method Delete of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func DeleteObservationNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, observationID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation/%v", patientID, observationID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	prms["observationID"] = []string{fmt.Sprintf("%v", observationID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	deleteCtx, err := app.NewDeleteObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}

	// Perform action
	err = ctrl.Delete(deleteCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// ListObservationBadRequest runs the method List of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListObservationBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string, code []string) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	{
		sliceVal := code
		query["code"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation", patientID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	{
		sliceVal := code
		prms["code"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	listCtx, err := app.NewListObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}

	// Perform action
	err = ctrl.List(listCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var ok bool
		mt, ok = resp.(error)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of error", resp)
		}
	}

	// Return results
	return rw, mt
}

// ListObservationNotFound runs the method List of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListObservationNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string, code []string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	{
		sliceVal := code
		query["code"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation", patientID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	{
		sliceVal := code
		prms["code"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	listCtx, err := app.NewListObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}

	// Perform action
	err = ctrl.List(listCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// ListObservationOK runs the method List of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListObservationOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string, code []string) (http.ResponseWriter, app.ObservationMediaCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	{
		sliceVal := code
		query["code"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation", patientID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	{
		sliceVal := code
		prms["code"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	listCtx, err := app.NewListObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}

	// Perform action
	err = ctrl.List(listCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.ObservationMediaCollection
	if resp != nil {
		var ok bool
		mt, ok = resp.(app.ObservationMediaCollection)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.ObservationMediaCollection", resp)
		}
		err = mt.Validate()
		if err != nil {
			t.Errorf("invalid response media type: %s", err)
		}
	}

	// Return results
	return rw, mt
}

// RateObservationBadRequest runs the method Rate of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func RateObservationBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, observationID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation/%v/actions/rate", patientID, observationID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	prms["observationID"] = []string{fmt.Sprintf("%v", observationID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	rateCtx, err := app.NewRateObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}

	// Perform action
	err = ctrl.Rate(rateCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var ok bool
		mt, ok = resp.(error)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of error", resp)
		}
	}

	// Return results
	return rw, mt
}

// RateObservationNoContent runs the method Rate of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func RateObservationNoContent(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, observationID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation/%v/actions/rate", patientID, observationID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	prms["observationID"] = []string{fmt.Sprintf("%v", observationID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	rateCtx, err := app.NewRateObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}

	// Perform action
	err = ctrl.Rate(rateCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 204 {
		t.Errorf("invalid response status code: got %+v, expected 204", rw.Code)
	}

	// Return results
	return rw
}

// RateObservationNotFound runs the method Rate of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func RateObservationNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, observationID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation/%v/actions/rate", patientID, observationID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	prms["observationID"] = []string{fmt.Sprintf("%v", observationID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	rateCtx, err := app.NewRateObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}

	// Perform action
	err = ctrl.Rate(rateCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// ShowObservationBadRequest runs the method Show of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowObservationBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, observationID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation/%v", patientID, observationID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	prms["observationID"] = []string{fmt.Sprintf("%v", observationID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	showCtx, err := app.NewShowObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}

	// Perform action
	err = ctrl.Show(showCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var ok bool
		mt, ok = resp.(error)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of error", resp)
		}
	}

	// Return results
	return rw, mt
}

// ShowObservationNotFound runs the method Show of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowObservationNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, observationID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation/%v", patientID, observationID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	prms["observationID"] = []string{fmt.Sprintf("%v", observationID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	showCtx, err := app.NewShowObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}

	// Perform action
	err = ctrl.Show(showCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// ShowObservationOK runs the method Show of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowObservationOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, observationID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string) (http.ResponseWriter, *app.ObservationMedia) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation/%v", patientID, observationID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	prms["observationID"] = []string{fmt.Sprintf("%v", observationID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	showCtx, err := app.NewShowObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}

	// Perform action
	err = ctrl.Show(showCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.ObservationMedia
	if resp != nil {
		var ok bool
		mt, ok = resp.(*app.ObservationMedia)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.ObservationMedia", resp)
		}
		err = mt.Validate()
		if err != nil {
			t.Errorf("invalid response media type: %s", err)
		}
	}

	// Return results
	return rw, mt
}

// UpdateObservationBadRequest runs the method Update of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func UpdateObservationBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, observationID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string, payload *app.ObservationPayload) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		return nil, e
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation/%v", patientID, observationID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	prms["observationID"] = []string{fmt.Sprintf("%v", observationID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	updateCtx, err := app.NewUpdateObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}
	updateCtx.Payload = payload

	// Perform action
	err = ctrl.Update(updateCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var ok bool
		mt, ok = resp.(error)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of error", resp)
		}
	}

	// Return results
	return rw, mt
}

// UpdateObservationNoContent runs the method Update of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func UpdateObservationNoContent(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, observationID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string, payload *app.ObservationPayload) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation/%v", patientID, observationID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	prms["observationID"] = []string{fmt.Sprintf("%v", observationID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	updateCtx, err := app.NewUpdateObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}
	updateCtx.Payload = payload

	// Perform action
	err = ctrl.Update(updateCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 204 {
		t.Errorf("invalid response status code: got %+v, expected 204", rw.Code)
	}

	// Return results
	return rw
}

// UpdateObservationNotFound runs the method Update of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func UpdateObservationNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, observationID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string, payload *app.ObservationPayload) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation/%v", patientID, observationID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	prms["observationID"] = []string{fmt.Sprintf("%v", observationID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	updateCtx, err := app.NewUpdateObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}
	updateCtx.Payload = payload

	// Perform action
	err = ctrl.Update(updateCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// WatchObservationBadRequest runs the method Watch of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func WatchObservationBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ObservationController, patientID int, observationID int, contained *string, containedType *string, count *int, elements *string, has *string, id *int, include *string, lastUpdate *time.Time, list *string, profile *string, query *string, revinclude *string, security *string, sort *string, summary *string, tag *string, text *string, type_ *string) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contained != nil {
		sliceVal := []string{*contained}
		query["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		query["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		query["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		query["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		query["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		query["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		query["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		query["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		query["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		query["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		query["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		query["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		query["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		query["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		query["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		query["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		query["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["_type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/nosh/patients/%v/observation/%v/watch", patientID, observationID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["patientID"] = []string{fmt.Sprintf("%v", patientID)}
	prms["observationID"] = []string{fmt.Sprintf("%v", observationID)}
	if contained != nil {
		sliceVal := []string{*contained}
		prms["_contained"] = sliceVal
	}
	if containedType != nil {
		sliceVal := []string{*containedType}
		prms["_containedType"] = sliceVal
	}
	if count != nil {
		sliceVal := []string{strconv.Itoa(*count)}
		prms["_count"] = sliceVal
	}
	if elements != nil {
		sliceVal := []string{*elements}
		prms["_elements"] = sliceVal
	}
	if has != nil {
		sliceVal := []string{*has}
		prms["_has"] = sliceVal
	}
	if id != nil {
		sliceVal := []string{strconv.Itoa(*id)}
		prms["_id"] = sliceVal
	}
	if include != nil {
		sliceVal := []string{*include}
		prms["_include"] = sliceVal
	}
	if lastUpdate != nil {
		sliceVal := []string{(*lastUpdate).Format(time.RFC3339)}
		prms["_lastUpdate"] = sliceVal
	}
	if list != nil {
		sliceVal := []string{*list}
		prms["_list"] = sliceVal
	}
	if profile != nil {
		sliceVal := []string{*profile}
		prms["_profile"] = sliceVal
	}
	if query != nil {
		sliceVal := []string{*query}
		prms["_query"] = sliceVal
	}
	if revinclude != nil {
		sliceVal := []string{*revinclude}
		prms["_revinclude"] = sliceVal
	}
	if security != nil {
		sliceVal := []string{*security}
		prms["_security"] = sliceVal
	}
	if sort != nil {
		sliceVal := []string{*sort}
		prms["_sort"] = sliceVal
	}
	if summary != nil {
		sliceVal := []string{*summary}
		prms["_summary"] = sliceVal
	}
	if tag != nil {
		sliceVal := []string{*tag}
		prms["_tag"] = sliceVal
	}
	if text != nil {
		sliceVal := []string{*text}
		prms["_text"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["_type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ObservationTest"), rw, req, prms)
	watchCtx, err := app.NewWatchObservationContext(goaCtx, service)
	if err != nil {
		panic("invalid test data " + err.Error()) // bug
	}

	// Perform action
	err = ctrl.Watch(watchCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %s, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var ok bool
		mt, ok = resp.(error)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of error", resp)
		}
	}

	// Return results
	return rw, mt
}
