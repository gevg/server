// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/goa-fhir/server/design
// --out=$(GOPATH)\src\github.com\goa-fhir\server
// --version=v1.1.0-dirty
//
// API "Secure": CLI Commands
//
// The content of this file is auto-generated, DO NOT MODIFY

package cli

import (
	"encoding/json"
	"fmt"
	"github.com/goa-fhir/server/client"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/spf13/cobra"
	"golang.org/x/net/context"
	"log"
	"net/url"
	"os"
	"path"
	"strconv"
	"strings"
	"time"
)

type (
	// CreateAllergyIntoleranceCommand is the command line data structure for the create action of AllergyIntolerance
	CreateAllergyIntoleranceCommand struct {
		Payload     string
		ContentType string
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// DeleteAllergyIntoleranceCommand is the command line data structure for the delete action of AllergyIntolerance
	DeleteAllergyIntoleranceCommand struct {
		Allergy string
		// Patient ID
		PatientID            int
		Contained            string
		ContainedType        string
		Count                int
		Elements             string
		Has                  string
		ID                   int
		Include              string
		LastUpdate           string
		List                 string
		Profile              string
		Query                string
		Revinclude           string
		Security             string
		Sort                 string
		Summary              string
		Tag                  string
		Text                 string
		Type                 string
		AllergyIntoleranceID int
		PrettyPrint          bool
	}

	// ListAllergyIntoleranceCommand is the command line data structure for the list action of AllergyIntolerance
	ListAllergyIntoleranceCommand struct {
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		// Filter by years
		Years       []int
		PrettyPrint bool
	}

	// RateAllergyIntoleranceCommand is the command line data structure for the rate action of AllergyIntolerance
	RateAllergyIntoleranceCommand struct {
		Payload     string
		ContentType string
		Allergy     string
		// Patient ID
		PatientID            int
		Contained            string
		ContainedType        string
		Count                int
		Elements             string
		Has                  string
		ID                   int
		Include              string
		LastUpdate           string
		List                 string
		Profile              string
		Query                string
		Revinclude           string
		Security             string
		Sort                 string
		Summary              string
		Tag                  string
		Text                 string
		Type                 string
		AllergyIntoleranceID int
		PrettyPrint          bool
	}

	// ReadAllergyIntoleranceCommand is the command line data structure for the read action of AllergyIntolerance
	ReadAllergyIntoleranceCommand struct {
		Allergy string
		// Patient ID
		PatientID            int
		Contained            string
		ContainedType        string
		Count                int
		Elements             string
		Has                  string
		ID                   int
		Include              string
		LastUpdate           string
		List                 string
		Profile              string
		Query                string
		Revinclude           string
		Security             string
		Sort                 string
		Summary              string
		Tag                  string
		Text                 string
		Type                 string
		AllergyIntoleranceID int
		PrettyPrint          bool
	}

	// UpdateAllergyIntoleranceCommand is the command line data structure for the update action of AllergyIntolerance
	UpdateAllergyIntoleranceCommand struct {
		Payload     string
		ContentType string
		Allergy     string
		// Patient ID
		PatientID            int
		Contained            string
		ContainedType        string
		Count                int
		Elements             string
		Has                  string
		ID                   int
		Include              string
		LastUpdate           string
		List                 string
		Profile              string
		Query                string
		Revinclude           string
		Security             string
		Sort                 string
		Summary              string
		Tag                  string
		Text                 string
		Type                 string
		AllergyIntoleranceID int
		PrettyPrint          bool
	}

	// WatchAllergyIntoleranceCommand is the command line data structure for the watch action of AllergyIntolerance
	WatchAllergyIntoleranceCommand struct {
		Allergy string
		// Patient ID
		PatientID            int
		Contained            string
		ContainedType        string
		Count                int
		Elements             string
		Has                  string
		ID                   int
		Include              string
		LastUpdate           string
		List                 string
		Profile              string
		Query                string
		Revinclude           string
		Security             string
		Sort                 string
		Summary              string
		Tag                  string
		Text                 string
		Type                 string
		AllergyIntoleranceID int
		PrettyPrint          bool
	}

	// CreateNutritionRequestCommand is the command line data structure for the create action of NutritionRequest
	CreateNutritionRequestCommand struct {
		Payload     string
		ContentType string
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// DeleteNutritionRequestCommand is the command line data structure for the delete action of NutritionRequest
	DeleteNutritionRequestCommand struct {
		NutritionRequestID int
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// ListNutritionRequestCommand is the command line data structure for the list action of NutritionRequest
	ListNutritionRequestCommand struct {
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		// Filter by years
		Years       []int
		PrettyPrint bool
	}

	// RateNutritionRequestCommand is the command line data structure for the rate action of NutritionRequest
	RateNutritionRequestCommand struct {
		Payload            string
		ContentType        string
		NutritionRequestID int
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// ReadNutritionRequestCommand is the command line data structure for the read action of NutritionRequest
	ReadNutritionRequestCommand struct {
		NutritionRequestID int
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// UpdateNutritionRequestCommand is the command line data structure for the update action of NutritionRequest
	UpdateNutritionRequestCommand struct {
		Payload            string
		ContentType        string
		NutritionRequestID int
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// WatchNutritionRequestCommand is the command line data structure for the watch action of NutritionRequest
	WatchNutritionRequestCommand struct {
		NutritionRequestID int
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// CreateObservationCommand is the command line data structure for the create action of Observation
	CreateObservationCommand struct {
		Payload     string
		ContentType string
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// DeleteObservationCommand is the command line data structure for the delete action of Observation
	DeleteObservationCommand struct {
		ObservationID int
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// ListObservationCommand is the command line data structure for the list action of Observation
	ListObservationCommand struct {
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		// Filter by code
		Code        []string
		PrettyPrint bool
	}

	// RateObservationCommand is the command line data structure for the rate action of Observation
	RateObservationCommand struct {
		ObservationID int
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// ShowObservationCommand is the command line data structure for the show action of Observation
	ShowObservationCommand struct {
		ObservationID int
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// UpdateObservationCommand is the command line data structure for the update action of Observation
	UpdateObservationCommand struct {
		Payload       string
		ContentType   string
		ObservationID int
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// WatchObservationCommand is the command line data structure for the watch action of Observation
	WatchObservationCommand struct {
		ObservationID int
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// SecureBasicCommand is the command line data structure for the secure action of basic
	SecureBasicCommand struct {
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// UnsecureBasicCommand is the command line data structure for the unsecure action of basic
	UnsecureBasicCommand struct {
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// HealthHealthCommand is the command line data structure for the health action of health
	HealthHealthCommand struct {
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// SecureJWTCommand is the command line data structure for the secure action of jwt
	SecureJWTCommand struct {
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		// Force auth failure via JWT validation middleware
		Fail        string
		PrettyPrint bool
	}

	// SigninJWTCommand is the command line data structure for the signin action of jwt
	SigninJWTCommand struct {
		Payload       string
		ContentType   string
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// SignupJWTCommand is the command line data structure for the signup action of jwt
	SignupJWTCommand struct {
		Payload       string
		ContentType   string
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// UnsecureJWTCommand is the command line data structure for the unsecure action of jwt
	UnsecureJWTCommand struct {
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// CreatePatientCommand is the command line data structure for the create action of patient
	CreatePatientCommand struct {
		Payload       string
		ContentType   string
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// DeletePatientCommand is the command line data structure for the delete action of patient
	DeletePatientCommand struct {
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// ReadPatientCommand is the command line data structure for the read action of patient
	ReadPatientCommand struct {
		Payload     string
		ContentType string
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// SearchPatientCommand is the command line data structure for the search action of patient
	SearchPatientCommand struct {
		Payload       string
		ContentType   string
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		// Filter by active
		Active string
		// Filter by birth date
		BirthDate []string
		// Filter by gender
		Gender string
		// Filter by name
		Name        []string
		PrettyPrint bool
	}

	// UpdatePatientCommand is the command line data structure for the update action of patient
	UpdatePatientCommand struct {
		Payload     string
		ContentType string
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// VreadPatientCommand is the command line data structure for the vread action of patient
	VreadPatientCommand struct {
		Payload     string
		ContentType string
		// Patient ID
		PatientID     int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// CreateUserCommand is the command line data structure for the create action of user
	CreateUserCommand struct {
		Payload       string
		ContentType   string
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// DeleteUserCommand is the command line data structure for the delete action of user
	DeleteUserCommand struct {
		// User ID
		UserID        int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// ListUserCommand is the command line data structure for the list action of user
	ListUserCommand struct {
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// ShowUserCommand is the command line data structure for the show action of user
	ShowUserCommand struct {
		// User ID
		UserID        int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// SigninUserCommand is the command line data structure for the signin action of user
	SigninUserCommand struct {
		Payload       string
		ContentType   string
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// SignupUserCommand is the command line data structure for the signup action of user
	SignupUserCommand struct {
		Payload       string
		ContentType   string
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// UpdateUserCommand is the command line data structure for the update action of user
	UpdateUserCommand struct {
		Payload     string
		ContentType string
		// User ID
		UserID        int
		Contained     string
		ContainedType string
		Count         int
		Elements      string
		Has           string
		ID            int
		Include       string
		LastUpdate    string
		List          string
		Profile       string
		Query         string
		Revinclude    string
		Security      string
		Sort          string
		Summary       string
		Tag           string
		Text          string
		Type          string
		PrettyPrint   bool
	}

	// DownloadCommand is the command line data structure for the download command.
	DownloadCommand struct {
		// OutFile is the path to the download output file.
		OutFile string
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "create",
		Short: `create action`,
	}
	tmp1 := new(CreateAllergyIntoleranceCommand)
	sub = &cobra.Command{
		Use:   `AllergyIntolerance ["/nosh/patients/PATIENTID/allergy.intolerance"]`,
		Short: ``,
		Long: `

Payload example:

{
   "category": "environment",
   "criticality": "CRITU",
   "identifier": [
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      },
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      },
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      }
   ],
   "lastOccurence": "2011-09-11T01:59:12-04:00",
   "meta": {
      "lastUpdated": "2005-05-02T19:46:08-04:00",
      "profile": "http://hane.com/daisy_howe",
      "security": {
         "code": "Quia placeat nisi.",
         "display": "Iste et odit.",
         "system": "Ipsum minima ipsam.",
         "userSelected": false,
         "version": "Nihil velit dolorum est."
      },
      "tag": {
         "code": "Quia placeat nisi.",
         "display": "Iste et odit.",
         "system": "Ipsum minima ipsam.",
         "userSelected": false,
         "version": "Nihil velit dolorum est."
      },
      "versionId": "Delectus et est."
   },
   "note": {
      "authorReference": {
         "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
         "reference": "Provident quam porro maiores."
      },
      "authorString": "Deserunt deserunt et ea culpa qui a.",
      "time": "1990-01-10T16:35:05-05:00"
   },
   "onset": "1970-06-24T06:05:39-04:00",
   "patient": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "reaction": {
      "certainty": "likely",
      "description": "Eum natus inventore optio.",
      "exposureRoute": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "manifestation": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "note": {
         "authorReference": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "authorString": "Deserunt deserunt et ea culpa qui a.",
         "time": "1990-01-10T16:35:05-05:00"
      },
      "onset": "2000-03-28T04:52:44-04:00",
      "severity": "moderate",
      "substance": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      }
   },
   "recordedDate": "2007-10-21T20:18:08-04:00",
   "recorder": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "reporter": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "status": "active",
   "type": "allergy"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp2 := new(CreateNutritionRequestCommand)
	sub = &cobra.Command{
		Use:   `NutritionRequest ["/nosh/patients/PATIENTID/nutrition.requests"]`,
		Short: ``,
		Long: `

Payload example:

{
   "allergyIntolerance": [
      {
         "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
         "reference": "Provident quam porro maiores."
      }
   ],
   "dateTime": "1998-09-23T01:45:12-04:00",
   "encounter": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "enteralFormula": {
      "additiveProductName": "Pariatur placeat labore nihil sint.",
      "additiveType": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "administrativeInstruction": "Et nihil ut impedit temporibus.",
      "baseFormulaType": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "baseFormulatProdcutName": "Molestiae ipsum incidunt nam.",
      "caloricDensity": {
         "code": "Voluptatum veritatis.",
         "comparator": "\u003c=",
         "system": "http://altenwerth.info/tre_schmitt",
         "unit": "Et omnis recusandae velit perferendis sit.",
         "value": 0.2868874286837466
      },
      "maxVolumeToDeliver": {
         "code": "Voluptatum veritatis.",
         "comparator": "\u003c=",
         "system": "http://altenwerth.info/tre_schmitt",
         "unit": "Et omnis recusandae velit perferendis sit.",
         "value": 0.2868874286837466
      },
      "routeofAdministration": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      }
   },
   "excludeFoodModifier": [
      {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      }
   ],
   "foodPreferenceModifier": [
      {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      }
   ],
   "identifier": [
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      },
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      },
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      }
   ],
   "meta": {
      "lastUpdated": "2005-05-02T19:46:08-04:00",
      "profile": "http://hane.com/daisy_howe",
      "security": {
         "code": "Quia placeat nisi.",
         "display": "Iste et odit.",
         "system": "Ipsum minima ipsam.",
         "userSelected": false,
         "version": "Nihil velit dolorum est."
      },
      "tag": {
         "code": "Quia placeat nisi.",
         "display": "Iste et odit.",
         "system": "Ipsum minima ipsam.",
         "userSelected": false,
         "version": "Nihil velit dolorum est."
      },
      "versionId": "Delectus et est."
   },
   "oralDiet": {
      "fluidConsistencyType": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "instruction": "Qui nulla sapiente.",
      "nutrient": {
         "amount": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         },
         "modifier": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         }
      },
      "schedule": {
         "code": "BID",
         "event": "2013-04-04T16:57:35-04:00",
         "repeat": {
            "extension": {
               "ValueAddress": {
                  "city": "Nihil ea omnis.",
                  "country": "Minus modi.",
                  "distinct": "Enim vitae deleniti modi qui sed.",
                  "line": [
                     "Dicta voluptatibus.",
                     "Dicta voluptatibus."
                  ],
                  "period": {
                     "end": "1997-04-01T15:52:35-04:00",
                     "start": "1982-07-20T00:14:16-04:00"
                  },
                  "postalCode": "Qui commodi.",
                  "state": "Consequatur laboriosam.",
                  "type": "postal",
                  "use": "work"
               },
               "ValueAnnotation": {
                  "authorReference": {
                     "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
                     "reference": "Provident quam porro maiores."
                  },
                  "authorString": "Deserunt deserunt et ea culpa qui a.",
                  "time": "1990-01-10T16:35:05-05:00"
               },
               "ValueAttachment": {
                  "contentType": "Distinctio corrupti nemo.",
                  "creation": "2001-09-06T02:20:58-04:00",
                  "data": "Non vel ea dolores.",
                  "hash": "Porro atque omnis ex voluptatem qui.",
                  "size": 8011890215336253633,
                  "title": "Cupiditate reprehenderit est harum."
               },
               "ValueBase64Binary": "Aperiam ut vitae aut aut vero saepe.",
               "ValueBoolean": false,
               "ValueCode": "Sed libero iusto perferendis vel.",
               "ValueCodeableConcept": {
                  "coding": [
                     {
                        "code": "Quia placeat nisi.",
                        "display": "Iste et odit.",
                        "system": "Ipsum minima ipsam.",
                        "userSelected": false,
                        "version": "Nihil velit dolorum est."
                     }
                  ],
                  "text": "In consectetur."
               },
               "ValueCoding": {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               },
               "ValueContactPoint": "Occaecati nihil eos est modi.",
               "ValueDate": "1974-03-22T03:21:59-04:00",
               "ValueDateTime": "2013-04-19T14:04:18-04:00",
               "ValueDecimal": 0.10619272293510269,
               "ValueHumanName": {
                  "family": [
                     "Et sunt eius perferendis modi.",
                     "Et sunt eius perferendis modi."
                  ],
                  "given": "Cupiditate eum aut ut quo.",
                  "period": {
                     "end": "1997-04-01T15:52:35-04:00",
                     "start": "1982-07-20T00:14:16-04:00"
                  },
                  "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
                  "suffix": "Quis voluptatem.",
                  "use": "anonymous"
               },
               "ValueId": "Odio aut suscipit.",
               "ValueIdentifier": {
                  "assigner": {
                     "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
                     "reference": "Provident quam porro maiores."
                  },
                  "period": {
                     "end": "1997-04-01T15:52:35-04:00",
                     "start": "1982-07-20T00:14:16-04:00"
                  },
                  "system": "http://green.net/henri.torp",
                  "type": {
                     "coding": [
                        {
                           "code": "Quia placeat nisi.",
                           "display": "Iste et odit.",
                           "system": "Ipsum minima ipsam.",
                           "userSelected": false,
                           "version": "Nihil velit dolorum est."
                        }
                     ],
                     "text": "In consectetur."
                  },
                  "use": "official",
                  "value": "Illum culpa aperiam omnis sapiente sit porro."
               },
               "ValueInstant": "2013-01-08T17:42:36-05:00",
               "ValueInteger": 1768018286066533448,
               "ValueMarkdown": "Sequi ut in molestiae in mollitia.",
               "ValueMeta": {
                  "lastUpdated": "2005-05-02T19:46:08-04:00",
                  "profile": "http://hane.com/daisy_howe",
                  "security": {
                     "code": "Quia placeat nisi.",
                     "display": "Iste et odit.",
                     "system": "Ipsum minima ipsam.",
                     "userSelected": false,
                     "version": "Nihil velit dolorum est."
                  },
                  "tag": {
                     "code": "Quia placeat nisi.",
                     "display": "Iste et odit.",
                     "system": "Ipsum minima ipsam.",
                     "userSelected": false,
                     "version": "Nihil velit dolorum est."
                  },
                  "versionId": "Delectus et est."
               },
               "ValueOid": "Incidunt veniam a expedita.",
               "ValuePeriod": {
                  "end": "1997-04-01T15:52:35-04:00",
                  "start": "1982-07-20T00:14:16-04:00"
               },
               "ValuePositiveInt": 0.7862623446098116,
               "ValueQuantity": {
                  "code": "Voluptatum veritatis.",
                  "comparator": "\u003c=",
                  "system": "http://altenwerth.info/tre_schmitt",
                  "unit": "Et omnis recusandae velit perferendis sit.",
                  "value": 0.2868874286837466
               },
               "ValueRange": "Nobis maiores et est suscipit modi.",
               "ValueRatio": 7240726778760362147,
               "ValueReference": {
                  "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
                  "reference": "Provident quam porro maiores."
               },
               "ValueSampledData": "Et quis eos earum.",
               "ValueSignature": "A modi qui autem et officiis.",
               "ValueString": "Non voluptatem.",
               "ValueTime": "2011-04-18T15:47:36-04:00",
               "ValueTiming": "1973-10-03T12:07:44-04:00",
               "ValueUnsignedInt": 0.3285550508005384,
               "ValueUri": "Debitis mollitia accusantium dolorem.",
               "url": "Eveniet cumque."
            },
            "id": "Temporibus quia vero fugiat eos."
         }
      },
      "texture": {
         "foodType": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "modifier": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         }
      },
      "type": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      }
   },
   "orderer": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "patient": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "status": "requested",
   "supplement": [
      {
         "instruction": "Laboriosam eveniet animi fugiat consequatur itaque.",
         "productName": "Cumque asperiores nihil fugit.",
         "quantity": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         },
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         }
      },
      {
         "instruction": "Laboriosam eveniet animi fugiat consequatur itaque.",
         "productName": "Cumque asperiores nihil fugit.",
         "quantity": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         },
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         }
      },
      {
         "instruction": "Laboriosam eveniet animi fugiat consequatur itaque.",
         "productName": "Cumque asperiores nihil fugit.",
         "quantity": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         },
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         }
      }
   ]
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp3 := new(CreateObservationCommand)
	sub = &cobra.Command{
		Use:   `Observation ["/nosh/patients/PATIENTID/observation"]`,
		Short: ``,
		Long: `

Payload example:

{
   "bodySite": {
      "coding": [
         {
            "code": "Quia placeat nisi.",
            "display": "Iste et odit.",
            "system": "Ipsum minima ipsam.",
            "userSelected": false,
            "version": "Nihil velit dolorum est."
         }
      ],
      "text": "In consectetur."
   },
   "category": {
      "coding": [
         {
            "code": "Quia placeat nisi.",
            "display": "Iste et odit.",
            "system": "Ipsum minima ipsam.",
            "userSelected": false,
            "version": "Nihil velit dolorum est."
         }
      ],
      "text": "In consectetur."
   },
   "code": {
      "coding": [
         {
            "code": "Quia placeat nisi.",
            "display": "Iste et odit.",
            "system": "Ipsum minima ipsam.",
            "userSelected": false,
            "version": "Nihil velit dolorum est."
         }
      ],
      "text": "In consectetur."
   },
   "comments": "Harum a officiis enim sint aut quibusdam.",
   "component": {
      "code": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "dataAbsentReason": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "normalReferenceRange": {
         "age": {
            "high": {
               "code": "Voluptatum veritatis.",
               "comparator": "\u003c=",
               "system": "http://altenwerth.info/tre_schmitt",
               "unit": "Et omnis recusandae velit perferendis sit.",
               "value": 0.2868874286837466
            },
            "low": {
               "code": "Voluptatum veritatis.",
               "comparator": "\u003c=",
               "system": "http://altenwerth.info/tre_schmitt",
               "unit": "Et omnis recusandae velit perferendis sit.",
               "value": 0.2868874286837466
            }
         },
         "high": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         },
         "low": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         },
         "meaning": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "text": "Enim praesentium in saepe accusantium."
      },
      "valueAttachment": {
         "contentType": "Distinctio corrupti nemo.",
         "creation": "2001-09-06T02:20:58-04:00",
         "data": "Non vel ea dolores.",
         "hash": "Porro atque omnis ex voluptatem qui.",
         "size": 8011890215336253633,
         "title": "Cupiditate reprehenderit est harum."
      },
      "valueCodeableConcept": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "valueDatTime": "1986-09-05T08:46:06-04:00",
      "valuePeriod": {
         "end": "1997-04-01T15:52:35-04:00",
         "start": "1982-07-20T00:14:16-04:00"
      },
      "valueQuantity": {
         "code": "Voluptatum veritatis.",
         "comparator": "\u003c=",
         "system": "http://altenwerth.info/tre_schmitt",
         "unit": "Et omnis recusandae velit perferendis sit.",
         "value": 0.2868874286837466
      },
      "valueRange": {
         "high": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         },
         "low": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         }
      },
      "valueSampledData": {
         "data": "Aut iure aut.",
         "dimensions": 3634548011998479894,
         "factor": 0.19807760817517442,
         "lowerLimit": 0.9407882801683942,
         "origin": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         },
         "period": 0.19865050477380938,
         "upperLimit": 0.07090705055025388
      },
      "valueString": "Dolores aut quaerat soluta.",
      "valueTime": "2011-01-26T20:39:21-05:00"
   },
   "dateAbsentReason": {
      "coding": [
         {
            "code": "Quia placeat nisi.",
            "display": "Iste et odit.",
            "system": "Ipsum minima ipsam.",
            "userSelected": false,
            "version": "Nihil velit dolorum est."
         }
      ],
      "text": "In consectetur."
   },
   "device": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "effectiveDateTime": "1970-10-09T08:05:14-04:00",
   "effectivePeriod": {
      "end": "1997-04-01T15:52:35-04:00",
      "start": "1982-07-20T00:14:16-04:00"
   },
   "encounter": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "identifier": [
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      },
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      },
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      }
   ],
   "interpretation": {
      "coding": [
         {
            "code": "Quia placeat nisi.",
            "display": "Iste et odit.",
            "system": "Ipsum minima ipsam.",
            "userSelected": false,
            "version": "Nihil velit dolorum est."
         }
      ],
      "text": "In consectetur."
   },
   "issued": "2015-06-01T07:00:18-04:00",
   "meta": {
      "lastUpdated": "2005-05-02T19:46:08-04:00",
      "profile": "http://hane.com/daisy_howe",
      "security": {
         "code": "Quia placeat nisi.",
         "display": "Iste et odit.",
         "system": "Ipsum minima ipsam.",
         "userSelected": false,
         "version": "Nihil velit dolorum est."
      },
      "tag": {
         "code": "Quia placeat nisi.",
         "display": "Iste et odit.",
         "system": "Ipsum minima ipsam.",
         "userSelected": false,
         "version": "Nihil velit dolorum est."
      },
      "versionId": "Delectus et est."
   },
   "method": {
      "coding": [
         {
            "code": "Quia placeat nisi.",
            "display": "Iste et odit.",
            "system": "Ipsum minima ipsam.",
            "userSelected": false,
            "version": "Nihil velit dolorum est."
         }
      ],
      "text": "In consectetur."
   },
   "performer": [
      {
         "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
         "reference": "Provident quam porro maiores."
      },
      {
         "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
         "reference": "Provident quam porro maiores."
      }
   ],
   "referenceRange": {
      "age": {
         "high": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         },
         "low": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         }
      },
      "high": {
         "code": "Voluptatum veritatis.",
         "comparator": "\u003c=",
         "system": "http://altenwerth.info/tre_schmitt",
         "unit": "Et omnis recusandae velit perferendis sit.",
         "value": 0.2868874286837466
      },
      "low": {
         "code": "Voluptatum veritatis.",
         "comparator": "\u003c=",
         "system": "http://altenwerth.info/tre_schmitt",
         "unit": "Et omnis recusandae velit perferendis sit.",
         "value": 0.2868874286837466
      },
      "meaning": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "text": "Enim praesentium in saepe accusantium."
   },
   "related": {
      "target": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "type": "Sunt id minima et est soluta."
   },
   "specimen": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "status": "preliminary",
   "valueAttachment": {
      "contentType": "Distinctio corrupti nemo.",
      "creation": "2001-09-06T02:20:58-04:00",
      "data": "Non vel ea dolores.",
      "hash": "Porro atque omnis ex voluptatem qui.",
      "size": 8011890215336253633,
      "title": "Cupiditate reprehenderit est harum."
   },
   "valueCodeableConcept": {
      "coding": [
         {
            "code": "Quia placeat nisi.",
            "display": "Iste et odit.",
            "system": "Ipsum minima ipsam.",
            "userSelected": false,
            "version": "Nihil velit dolorum est."
         }
      ],
      "text": "In consectetur."
   },
   "valueDatTime": "2008-04-11T17:14:39-04:00",
   "valuePeriod": {
      "end": "1997-04-01T15:52:35-04:00",
      "start": "1982-07-20T00:14:16-04:00"
   },
   "valueQuantity": {
      "code": "Voluptatum veritatis.",
      "comparator": "\u003c=",
      "system": "http://altenwerth.info/tre_schmitt",
      "unit": "Et omnis recusandae velit perferendis sit.",
      "value": 0.2868874286837466
   },
   "valueRange": {
      "high": {
         "code": "Voluptatum veritatis.",
         "comparator": "\u003c=",
         "system": "http://altenwerth.info/tre_schmitt",
         "unit": "Et omnis recusandae velit perferendis sit.",
         "value": 0.2868874286837466
      },
      "low": {
         "code": "Voluptatum veritatis.",
         "comparator": "\u003c=",
         "system": "http://altenwerth.info/tre_schmitt",
         "unit": "Et omnis recusandae velit perferendis sit.",
         "value": 0.2868874286837466
      }
   },
   "valueSampledData": {
      "data": "Aut iure aut.",
      "dimensions": 3634548011998479894,
      "factor": 0.19807760817517442,
      "lowerLimit": 0.9407882801683942,
      "origin": {
         "code": "Voluptatum veritatis.",
         "comparator": "\u003c=",
         "system": "http://altenwerth.info/tre_schmitt",
         "unit": "Et omnis recusandae velit perferendis sit.",
         "value": 0.2868874286837466
      },
      "period": 0.19865050477380938,
      "upperLimit": 0.07090705055025388
   },
   "valueString": "Dolorem porro ut eos molestias officiis qui.",
   "valueTime": "1997-07-22T18:33:28-04:00"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp4 := new(CreatePatientCommand)
	sub = &cobra.Command{
		Use:   `patient ["/nosh/patients"]`,
		Short: `This resource uses JWT to secure its endpoints`,
		Long: `This resource uses JWT to secure its endpoints

Payload example:

{
   "name": [
      {
         "family": [
            "Et sunt eius perferendis modi.",
            "Et sunt eius perferendis modi."
         ],
         "given": "Cupiditate eum aut ut quo.",
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
         "suffix": "Quis voluptatem.",
         "use": "anonymous"
      },
      {
         "family": [
            "Et sunt eius perferendis modi.",
            "Et sunt eius perferendis modi."
         ],
         "given": "Cupiditate eum aut ut quo.",
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
         "suffix": "Quis voluptatem.",
         "use": "anonymous"
      },
      {
         "family": [
            "Et sunt eius perferendis modi.",
            "Et sunt eius perferendis modi."
         ],
         "given": "Cupiditate eum aut ut quo.",
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
         "suffix": "Quis voluptatem.",
         "use": "anonymous"
      }
   ]
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp5 := new(CreateUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/nosh/users"]`,
		Short: `This resource uses JWT to secure its endpoints`,
		Long: `This resource uses JWT to secure its endpoints

Payload example:

{
   "email": "jim.smith@gmail.com",
   "password": "Quaerat et veniam molestiae."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp5.Run(c, args) },
	}
	tmp5.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp5.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "delete",
		Short: `delete action`,
	}
	tmp6 := new(DeleteAllergyIntoleranceCommand)
	sub = &cobra.Command{
		Use:   `AllergyIntolerance ["/nosh/patients/PATIENTID/allergy.intolerance/ALLERGY.intoleranceID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp6.Run(c, args) },
	}
	tmp6.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp6.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp7 := new(DeleteNutritionRequestCommand)
	sub = &cobra.Command{
		Use:   `NutritionRequest ["/nosh/patients/PATIENTID/nutrition.requests/NUTRITION_REQUESTID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp7.Run(c, args) },
	}
	tmp7.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp7.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp8 := new(DeleteObservationCommand)
	sub = &cobra.Command{
		Use:   `Observation ["/nosh/patients/PATIENTID/observation/OBSERVATIONID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp8.Run(c, args) },
	}
	tmp8.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp8.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp9 := new(DeletePatientCommand)
	sub = &cobra.Command{
		Use:   `patient ["/nosh/patients/PATIENTID"]`,
		Short: `This resource uses JWT to secure its endpoints`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp9.Run(c, args) },
	}
	tmp9.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp9.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp10 := new(DeleteUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/nosh/users/USERID"]`,
		Short: `This resource uses JWT to secure its endpoints`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp10.Run(c, args) },
	}
	tmp10.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp10.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "health",
		Short: `Perform health check.`,
	}
	tmp11 := new(HealthHealthCommand)
	sub = &cobra.Command{
		Use:   `health ["/nosh/_ah/health"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp11.Run(c, args) },
	}
	tmp11.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp11.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list",
		Short: `list action`,
	}
	tmp12 := new(ListAllergyIntoleranceCommand)
	sub = &cobra.Command{
		Use:   `AllergyIntolerance ["/nosh/patients/PATIENTID/allergy.intolerance"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp12.Run(c, args) },
	}
	tmp12.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp12.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp13 := new(ListNutritionRequestCommand)
	sub = &cobra.Command{
		Use:   `NutritionRequest ["/nosh/patients/PATIENTID/nutrition.requests"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp13.Run(c, args) },
	}
	tmp13.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp13.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp14 := new(ListObservationCommand)
	sub = &cobra.Command{
		Use:   `Observation ["/nosh/patients/PATIENTID/observation"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp14.Run(c, args) },
	}
	tmp14.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp14.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp15 := new(ListUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/nosh/users"]`,
		Short: `This resource uses JWT to secure its endpoints`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp15.Run(c, args) },
	}
	tmp15.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp15.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "rate",
		Short: `rate action`,
	}
	tmp16 := new(RateAllergyIntoleranceCommand)
	sub = &cobra.Command{
		Use:   `AllergyIntolerance ["/nosh/patients/PATIENTID/allergy.intolerance/ALLERGY.intoleranceID/actions/rate"]`,
		Short: ``,
		Long: `

Payload example:

{
   "rating": "Ullam et."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp16.Run(c, args) },
	}
	tmp16.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp16.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp17 := new(RateNutritionRequestCommand)
	sub = &cobra.Command{
		Use:   `NutritionRequest ["/nosh/patients/PATIENTID/nutrition.requests/NUTRITION_REQUESTID/actions/rate"]`,
		Short: ``,
		Long: `

Payload example:

{
   "rating": "Laboriosam nihil omnis."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp17.Run(c, args) },
	}
	tmp17.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp17.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp18 := new(RateObservationCommand)
	sub = &cobra.Command{
		Use:   `Observation ["/nosh/patients/PATIENTID/observation/OBSERVATIONID/actions/rate"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp18.Run(c, args) },
	}
	tmp18.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp18.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "read",
		Short: `read action`,
	}
	tmp19 := new(ReadAllergyIntoleranceCommand)
	sub = &cobra.Command{
		Use:   `AllergyIntolerance ["/nosh/patients/PATIENTID/allergy.intolerance/ALLERGY.intoleranceID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp19.Run(c, args) },
	}
	tmp19.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp19.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp20 := new(ReadNutritionRequestCommand)
	sub = &cobra.Command{
		Use:   `NutritionRequest ["/nosh/patients/PATIENTID/nutrition.requests/NUTRITION_REQUESTID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp20.Run(c, args) },
	}
	tmp20.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp20.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp21 := new(ReadPatientCommand)
	sub = &cobra.Command{
		Use:   `patient ["/nosh/patients/PATIENTID"]`,
		Short: `This resource uses JWT to secure its endpoints`,
		Long: `This resource uses JWT to secure its endpoints

Payload example:

{
   "active": false,
   "address": [
      {
         "city": "Nihil ea omnis.",
         "country": "Minus modi.",
         "distinct": "Enim vitae deleniti modi qui sed.",
         "line": [
            "Dicta voluptatibus.",
            "Dicta voluptatibus."
         ],
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "postalCode": "Qui commodi.",
         "state": "Consequatur laboriosam.",
         "type": "postal",
         "use": "work"
      }
   ],
   "animal": {
      "breed": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "genderStatus": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "species": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      }
   },
   "birthDate": "2007-05-02T15:49:30-04:00",
   "careProvider": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "communication": [
      {
         "careProvider": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "language": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "preferred": false
      }
   ],
   "contact": [
      {
         "address": {
            "city": "Nihil ea omnis.",
            "country": "Minus modi.",
            "distinct": "Enim vitae deleniti modi qui sed.",
            "line": [
               "Dicta voluptatibus.",
               "Dicta voluptatibus."
            ],
            "period": {
               "end": "1997-04-01T15:52:35-04:00",
               "start": "1982-07-20T00:14:16-04:00"
            },
            "postalCode": "Qui commodi.",
            "state": "Consequatur laboriosam.",
            "type": "postal",
            "use": "work"
         },
         "careProvider": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "gender": "other",
         "language": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "name": {
            "family": [
               "Et sunt eius perferendis modi.",
               "Et sunt eius perferendis modi."
            ],
            "given": "Cupiditate eum aut ut quo.",
            "period": {
               "end": "1997-04-01T15:52:35-04:00",
               "start": "1982-07-20T00:14:16-04:00"
            },
            "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
            "suffix": "Quis voluptatem.",
            "use": "anonymous"
         },
         "organization": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "preferred": true,
         "relationship": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "telecom": {
            "rank": 6922663900479996673,
            "system": "phone",
            "use": "work",
            "value": "Quibusdam dicta cumque."
         }
      },
      {
         "address": {
            "city": "Nihil ea omnis.",
            "country": "Minus modi.",
            "distinct": "Enim vitae deleniti modi qui sed.",
            "line": [
               "Dicta voluptatibus.",
               "Dicta voluptatibus."
            ],
            "period": {
               "end": "1997-04-01T15:52:35-04:00",
               "start": "1982-07-20T00:14:16-04:00"
            },
            "postalCode": "Qui commodi.",
            "state": "Consequatur laboriosam.",
            "type": "postal",
            "use": "work"
         },
         "careProvider": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "gender": "other",
         "language": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "name": {
            "family": [
               "Et sunt eius perferendis modi.",
               "Et sunt eius perferendis modi."
            ],
            "given": "Cupiditate eum aut ut quo.",
            "period": {
               "end": "1997-04-01T15:52:35-04:00",
               "start": "1982-07-20T00:14:16-04:00"
            },
            "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
            "suffix": "Quis voluptatem.",
            "use": "anonymous"
         },
         "organization": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "preferred": true,
         "relationship": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "telecom": {
            "rank": 6922663900479996673,
            "system": "phone",
            "use": "work",
            "value": "Quibusdam dicta cumque."
         }
      }
   ],
   "created_at": "2006-03-25T03:54:56-04:00",
   "created_by": "me@goa.design",
   "deceasedBoolean": true,
   "deceasedDateTime": "1992-07-17T20:16:40-04:00",
   "gender": "male",
   "href": "/patients/1",
   "id": 1,
   "identifier": [
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      }
   ],
   "link": [
      {
         "other": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "type": "replace"
      },
      {
         "other": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "type": "replace"
      }
   ],
   "managingOrganization": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "meta": {
      "lastUpdated": "2005-05-02T19:46:08-04:00",
      "profile": "http://hane.com/daisy_howe",
      "security": {
         "code": "Quia placeat nisi.",
         "display": "Iste et odit.",
         "system": "Ipsum minima ipsam.",
         "userSelected": false,
         "version": "Nihil velit dolorum est."
      },
      "tag": {
         "code": "Quia placeat nisi.",
         "display": "Iste et odit.",
         "system": "Ipsum minima ipsam.",
         "userSelected": false,
         "version": "Nihil velit dolorum est."
      },
      "versionId": "Delectus et est."
   },
   "multipleBirthBoolean": true,
   "multipleBirthInteger": 2104304148959728675,
   "name": [
      {
         "family": [
            "Et sunt eius perferendis modi.",
            "Et sunt eius perferendis modi."
         ],
         "given": "Cupiditate eum aut ut quo.",
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
         "suffix": "Quis voluptatem.",
         "use": "anonymous"
      },
      {
         "family": [
            "Et sunt eius perferendis modi.",
            "Et sunt eius perferendis modi."
         ],
         "given": "Cupiditate eum aut ut quo.",
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
         "suffix": "Quis voluptatem.",
         "use": "anonymous"
      }
   ],
   "photo": [
      {
         "contentType": "Distinctio corrupti nemo.",
         "creation": "2001-09-06T02:20:58-04:00",
         "data": "Non vel ea dolores.",
         "hash": "Porro atque omnis ex voluptatem qui.",
         "size": 8011890215336253633,
         "title": "Cupiditate reprehenderit est harum."
      },
      {
         "contentType": "Distinctio corrupti nemo.",
         "creation": "2001-09-06T02:20:58-04:00",
         "data": "Non vel ea dolores.",
         "hash": "Porro atque omnis ex voluptatem qui.",
         "size": 8011890215336253633,
         "title": "Cupiditate reprehenderit est harum."
      },
      {
         "contentType": "Distinctio corrupti nemo.",
         "creation": "2001-09-06T02:20:58-04:00",
         "data": "Non vel ea dolores.",
         "hash": "Porro atque omnis ex voluptatem qui.",
         "size": 8011890215336253633,
         "title": "Cupiditate reprehenderit est harum."
      }
   ]
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp21.Run(c, args) },
	}
	tmp21.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp21.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "search",
		Short: `List all bottles in account optionally filtering by year`,
	}
	tmp22 := new(SearchPatientCommand)
	sub = &cobra.Command{
		Use:   `patient [("/nosh/patients"|"/nosh/patients")]`,
		Short: `This resource uses JWT to secure its endpoints`,
		Long: `This resource uses JWT to secure its endpoints

Payload example:

{
   "active": false,
   "address": [
      {
         "city": "Nihil ea omnis.",
         "country": "Minus modi.",
         "distinct": "Enim vitae deleniti modi qui sed.",
         "line": [
            "Dicta voluptatibus.",
            "Dicta voluptatibus."
         ],
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "postalCode": "Qui commodi.",
         "state": "Consequatur laboriosam.",
         "type": "postal",
         "use": "work"
      }
   ],
   "animal": {
      "breed": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "genderStatus": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "species": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      }
   },
   "birthDate": "2007-05-02T15:49:30-04:00",
   "careProvider": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "communication": [
      {
         "careProvider": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "language": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "preferred": false
      }
   ],
   "contact": [
      {
         "address": {
            "city": "Nihil ea omnis.",
            "country": "Minus modi.",
            "distinct": "Enim vitae deleniti modi qui sed.",
            "line": [
               "Dicta voluptatibus.",
               "Dicta voluptatibus."
            ],
            "period": {
               "end": "1997-04-01T15:52:35-04:00",
               "start": "1982-07-20T00:14:16-04:00"
            },
            "postalCode": "Qui commodi.",
            "state": "Consequatur laboriosam.",
            "type": "postal",
            "use": "work"
         },
         "careProvider": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "gender": "other",
         "language": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "name": {
            "family": [
               "Et sunt eius perferendis modi.",
               "Et sunt eius perferendis modi."
            ],
            "given": "Cupiditate eum aut ut quo.",
            "period": {
               "end": "1997-04-01T15:52:35-04:00",
               "start": "1982-07-20T00:14:16-04:00"
            },
            "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
            "suffix": "Quis voluptatem.",
            "use": "anonymous"
         },
         "organization": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "preferred": true,
         "relationship": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "telecom": {
            "rank": 6922663900479996673,
            "system": "phone",
            "use": "work",
            "value": "Quibusdam dicta cumque."
         }
      },
      {
         "address": {
            "city": "Nihil ea omnis.",
            "country": "Minus modi.",
            "distinct": "Enim vitae deleniti modi qui sed.",
            "line": [
               "Dicta voluptatibus.",
               "Dicta voluptatibus."
            ],
            "period": {
               "end": "1997-04-01T15:52:35-04:00",
               "start": "1982-07-20T00:14:16-04:00"
            },
            "postalCode": "Qui commodi.",
            "state": "Consequatur laboriosam.",
            "type": "postal",
            "use": "work"
         },
         "careProvider": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "gender": "other",
         "language": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "name": {
            "family": [
               "Et sunt eius perferendis modi.",
               "Et sunt eius perferendis modi."
            ],
            "given": "Cupiditate eum aut ut quo.",
            "period": {
               "end": "1997-04-01T15:52:35-04:00",
               "start": "1982-07-20T00:14:16-04:00"
            },
            "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
            "suffix": "Quis voluptatem.",
            "use": "anonymous"
         },
         "organization": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "preferred": true,
         "relationship": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "telecom": {
            "rank": 6922663900479996673,
            "system": "phone",
            "use": "work",
            "value": "Quibusdam dicta cumque."
         }
      }
   ],
   "created_at": "2006-03-25T03:54:56-04:00",
   "created_by": "me@goa.design",
   "deceasedBoolean": true,
   "deceasedDateTime": "1992-07-17T20:16:40-04:00",
   "gender": "male",
   "href": "/patients/1",
   "id": 1,
   "identifier": [
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      }
   ],
   "link": [
      {
         "other": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "type": "replace"
      },
      {
         "other": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "type": "replace"
      }
   ],
   "managingOrganization": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "meta": {
      "lastUpdated": "2005-05-02T19:46:08-04:00",
      "profile": "http://hane.com/daisy_howe",
      "security": {
         "code": "Quia placeat nisi.",
         "display": "Iste et odit.",
         "system": "Ipsum minima ipsam.",
         "userSelected": false,
         "version": "Nihil velit dolorum est."
      },
      "tag": {
         "code": "Quia placeat nisi.",
         "display": "Iste et odit.",
         "system": "Ipsum minima ipsam.",
         "userSelected": false,
         "version": "Nihil velit dolorum est."
      },
      "versionId": "Delectus et est."
   },
   "multipleBirthBoolean": true,
   "multipleBirthInteger": 2104304148959728675,
   "name": [
      {
         "family": [
            "Et sunt eius perferendis modi.",
            "Et sunt eius perferendis modi."
         ],
         "given": "Cupiditate eum aut ut quo.",
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
         "suffix": "Quis voluptatem.",
         "use": "anonymous"
      },
      {
         "family": [
            "Et sunt eius perferendis modi.",
            "Et sunt eius perferendis modi."
         ],
         "given": "Cupiditate eum aut ut quo.",
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
         "suffix": "Quis voluptatem.",
         "use": "anonymous"
      }
   ],
   "photo": [
      {
         "contentType": "Distinctio corrupti nemo.",
         "creation": "2001-09-06T02:20:58-04:00",
         "data": "Non vel ea dolores.",
         "hash": "Porro atque omnis ex voluptatem qui.",
         "size": 8011890215336253633,
         "title": "Cupiditate reprehenderit est harum."
      },
      {
         "contentType": "Distinctio corrupti nemo.",
         "creation": "2001-09-06T02:20:58-04:00",
         "data": "Non vel ea dolores.",
         "hash": "Porro atque omnis ex voluptatem qui.",
         "size": 8011890215336253633,
         "title": "Cupiditate reprehenderit est harum."
      },
      {
         "contentType": "Distinctio corrupti nemo.",
         "creation": "2001-09-06T02:20:58-04:00",
         "data": "Non vel ea dolores.",
         "hash": "Porro atque omnis ex voluptatem qui.",
         "size": 8011890215336253633,
         "title": "Cupiditate reprehenderit est harum."
      }
   ]
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp22.Run(c, args) },
	}
	tmp22.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp22.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "secure",
		Short: `secure action`,
	}
	tmp23 := new(SecureBasicCommand)
	sub = &cobra.Command{
		Use:   `basic ["/nosh/basic"]`,
		Short: `This resource uses basic auth to secure its endpoints`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp23.Run(c, args) },
	}
	tmp23.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp23.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp24 := new(SecureJWTCommand)
	sub = &cobra.Command{
		Use:   `jwt ["/nosh/jwt"]`,
		Short: `This resource uses JWT to secure its endpoints`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp24.Run(c, args) },
	}
	tmp24.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp24.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "show",
		Short: `show action`,
	}
	tmp25 := new(ShowObservationCommand)
	sub = &cobra.Command{
		Use:   `Observation ["/nosh/patients/PATIENTID/observation/OBSERVATIONID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp25.Run(c, args) },
	}
	tmp25.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp25.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp26 := new(ShowUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/nosh/users/USERID"]`,
		Short: `This resource uses JWT to secure its endpoints`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp26.Run(c, args) },
	}
	tmp26.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp26.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "signin",
		Short: `signin action`,
	}
	tmp27 := new(SigninJWTCommand)
	sub = &cobra.Command{
		Use:   `jwt ["/nosh/jwt/signin"]`,
		Short: `This resource uses JWT to secure its endpoints`,
		Long: `This resource uses JWT to secure its endpoints

Payload example:

{
   "password": "Vel consequatur laborum fugit voluptatum et.",
   "username": "Enim repellendus aliquam et ullam nam."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp27.Run(c, args) },
	}
	tmp27.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp27.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp28 := new(SigninUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/nosh/users/jwt/signin"]`,
		Short: `This resource uses JWT to secure its endpoints`,
		Long: `This resource uses JWT to secure its endpoints

Payload example:

{
   "password": "Eaque labore veritatis sit nam dolorem sunt.",
   "username": "jim"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp28.Run(c, args) },
	}
	tmp28.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp28.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "signup",
		Short: `signup action`,
	}
	tmp29 := new(SignupJWTCommand)
	sub = &cobra.Command{
		Use:   `jwt ["/nosh/jwt/signup"]`,
		Short: `This resource uses JWT to secure its endpoints`,
		Long: `This resource uses JWT to secure its endpoints

Payload example:

{
   "address_city": "Soluta corrupti.",
   "address_line": "Fugiat est iusto nemo et quidem veniam.",
   "address_postal_code": "Consequatur quas tempore.",
   "address_state": "Commodi qui qui dolores qui voluptatem.",
   "email": "Laborum sunt.",
   "first_name": "Commodi autem molestiae asperiores consequatur animi.",
   "last_name": "Quod dolor distinctio suscipit ut perspiciatis.",
   "password": "Nostrum quaerat quas debitis illo.",
   "username": "Maiores suscipit in in reiciendis."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp29.Run(c, args) },
	}
	tmp29.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp29.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp30 := new(SignupUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/nosh/users/jwt/signup"]`,
		Short: `This resource uses JWT to secure its endpoints`,
		Long: `This resource uses JWT to secure its endpoints

Payload example:

{
   "address_city": "Carmel",
   "address_line": "533 Worth Ct",
   "address_postal_code": 46032,
   "address_state": "IN",
   "email": "jim.smith@gmail.com",
   "first_name": "Jim",
   "last_name": "Smith",
   "password": "Non molestiae voluptatum iure repellat.",
   "username": "jim"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp30.Run(c, args) },
	}
	tmp30.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp30.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "unsecure",
		Short: `unsecure action`,
	}
	tmp31 := new(UnsecureBasicCommand)
	sub = &cobra.Command{
		Use:   `basic ["/nosh/basic/unsecure"]`,
		Short: `This resource uses basic auth to secure its endpoints`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp31.Run(c, args) },
	}
	tmp31.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp31.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp32 := new(UnsecureJWTCommand)
	sub = &cobra.Command{
		Use:   `jwt ["/nosh/jwt/unsecure"]`,
		Short: `This resource uses JWT to secure its endpoints`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp32.Run(c, args) },
	}
	tmp32.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp32.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update",
		Short: `update action`,
	}
	tmp33 := new(UpdateAllergyIntoleranceCommand)
	sub = &cobra.Command{
		Use:   `AllergyIntolerance ["/nosh/patients/PATIENTID/allergy.intolerance/ALLERGY.intoleranceID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "category": "environment",
   "criticality": "CRITU",
   "identifier": [
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      },
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      },
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      }
   ],
   "lastOccurence": "2011-09-11T01:59:12-04:00",
   "meta": {
      "lastUpdated": "2005-05-02T19:46:08-04:00",
      "profile": "http://hane.com/daisy_howe",
      "security": {
         "code": "Quia placeat nisi.",
         "display": "Iste et odit.",
         "system": "Ipsum minima ipsam.",
         "userSelected": false,
         "version": "Nihil velit dolorum est."
      },
      "tag": {
         "code": "Quia placeat nisi.",
         "display": "Iste et odit.",
         "system": "Ipsum minima ipsam.",
         "userSelected": false,
         "version": "Nihil velit dolorum est."
      },
      "versionId": "Delectus et est."
   },
   "note": {
      "authorReference": {
         "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
         "reference": "Provident quam porro maiores."
      },
      "authorString": "Deserunt deserunt et ea culpa qui a.",
      "time": "1990-01-10T16:35:05-05:00"
   },
   "onset": "1970-06-24T06:05:39-04:00",
   "patient": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "reaction": {
      "certainty": "likely",
      "description": "Eum natus inventore optio.",
      "exposureRoute": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "manifestation": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "note": {
         "authorReference": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "authorString": "Deserunt deserunt et ea culpa qui a.",
         "time": "1990-01-10T16:35:05-05:00"
      },
      "onset": "2000-03-28T04:52:44-04:00",
      "severity": "moderate",
      "substance": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      }
   },
   "recordedDate": "2007-10-21T20:18:08-04:00",
   "recorder": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "reporter": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "status": "active",
   "type": "allergy"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp33.Run(c, args) },
	}
	tmp33.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp33.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp34 := new(UpdateNutritionRequestCommand)
	sub = &cobra.Command{
		Use:   `NutritionRequest ["/nosh/patients/PATIENTID/nutrition.requests/NUTRITION_REQUESTID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "allergyIntolerance": [
      {
         "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
         "reference": "Provident quam porro maiores."
      }
   ],
   "dateTime": "1998-09-23T01:45:12-04:00",
   "encounter": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "enteralFormula": {
      "additiveProductName": "Pariatur placeat labore nihil sint.",
      "additiveType": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "administrativeInstruction": "Et nihil ut impedit temporibus.",
      "baseFormulaType": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "baseFormulatProdcutName": "Molestiae ipsum incidunt nam.",
      "caloricDensity": {
         "code": "Voluptatum veritatis.",
         "comparator": "\u003c=",
         "system": "http://altenwerth.info/tre_schmitt",
         "unit": "Et omnis recusandae velit perferendis sit.",
         "value": 0.2868874286837466
      },
      "maxVolumeToDeliver": {
         "code": "Voluptatum veritatis.",
         "comparator": "\u003c=",
         "system": "http://altenwerth.info/tre_schmitt",
         "unit": "Et omnis recusandae velit perferendis sit.",
         "value": 0.2868874286837466
      },
      "routeofAdministration": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      }
   },
   "excludeFoodModifier": [
      {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      }
   ],
   "foodPreferenceModifier": [
      {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      }
   ],
   "identifier": [
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      },
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      },
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      }
   ],
   "meta": {
      "lastUpdated": "2005-05-02T19:46:08-04:00",
      "profile": "http://hane.com/daisy_howe",
      "security": {
         "code": "Quia placeat nisi.",
         "display": "Iste et odit.",
         "system": "Ipsum minima ipsam.",
         "userSelected": false,
         "version": "Nihil velit dolorum est."
      },
      "tag": {
         "code": "Quia placeat nisi.",
         "display": "Iste et odit.",
         "system": "Ipsum minima ipsam.",
         "userSelected": false,
         "version": "Nihil velit dolorum est."
      },
      "versionId": "Delectus et est."
   },
   "oralDiet": {
      "fluidConsistencyType": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "instruction": "Qui nulla sapiente.",
      "nutrient": {
         "amount": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         },
         "modifier": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         }
      },
      "schedule": {
         "code": "BID",
         "event": "2013-04-04T16:57:35-04:00",
         "repeat": {
            "extension": {
               "ValueAddress": {
                  "city": "Nihil ea omnis.",
                  "country": "Minus modi.",
                  "distinct": "Enim vitae deleniti modi qui sed.",
                  "line": [
                     "Dicta voluptatibus.",
                     "Dicta voluptatibus."
                  ],
                  "period": {
                     "end": "1997-04-01T15:52:35-04:00",
                     "start": "1982-07-20T00:14:16-04:00"
                  },
                  "postalCode": "Qui commodi.",
                  "state": "Consequatur laboriosam.",
                  "type": "postal",
                  "use": "work"
               },
               "ValueAnnotation": {
                  "authorReference": {
                     "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
                     "reference": "Provident quam porro maiores."
                  },
                  "authorString": "Deserunt deserunt et ea culpa qui a.",
                  "time": "1990-01-10T16:35:05-05:00"
               },
               "ValueAttachment": {
                  "contentType": "Distinctio corrupti nemo.",
                  "creation": "2001-09-06T02:20:58-04:00",
                  "data": "Non vel ea dolores.",
                  "hash": "Porro atque omnis ex voluptatem qui.",
                  "size": 8011890215336253633,
                  "title": "Cupiditate reprehenderit est harum."
               },
               "ValueBase64Binary": "Aperiam ut vitae aut aut vero saepe.",
               "ValueBoolean": false,
               "ValueCode": "Sed libero iusto perferendis vel.",
               "ValueCodeableConcept": {
                  "coding": [
                     {
                        "code": "Quia placeat nisi.",
                        "display": "Iste et odit.",
                        "system": "Ipsum minima ipsam.",
                        "userSelected": false,
                        "version": "Nihil velit dolorum est."
                     }
                  ],
                  "text": "In consectetur."
               },
               "ValueCoding": {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               },
               "ValueContactPoint": "Occaecati nihil eos est modi.",
               "ValueDate": "1974-03-22T03:21:59-04:00",
               "ValueDateTime": "2013-04-19T14:04:18-04:00",
               "ValueDecimal": 0.10619272293510269,
               "ValueHumanName": {
                  "family": [
                     "Et sunt eius perferendis modi.",
                     "Et sunt eius perferendis modi."
                  ],
                  "given": "Cupiditate eum aut ut quo.",
                  "period": {
                     "end": "1997-04-01T15:52:35-04:00",
                     "start": "1982-07-20T00:14:16-04:00"
                  },
                  "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
                  "suffix": "Quis voluptatem.",
                  "use": "anonymous"
               },
               "ValueId": "Odio aut suscipit.",
               "ValueIdentifier": {
                  "assigner": {
                     "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
                     "reference": "Provident quam porro maiores."
                  },
                  "period": {
                     "end": "1997-04-01T15:52:35-04:00",
                     "start": "1982-07-20T00:14:16-04:00"
                  },
                  "system": "http://green.net/henri.torp",
                  "type": {
                     "coding": [
                        {
                           "code": "Quia placeat nisi.",
                           "display": "Iste et odit.",
                           "system": "Ipsum minima ipsam.",
                           "userSelected": false,
                           "version": "Nihil velit dolorum est."
                        }
                     ],
                     "text": "In consectetur."
                  },
                  "use": "official",
                  "value": "Illum culpa aperiam omnis sapiente sit porro."
               },
               "ValueInstant": "2013-01-08T17:42:36-05:00",
               "ValueInteger": 1768018286066533448,
               "ValueMarkdown": "Sequi ut in molestiae in mollitia.",
               "ValueMeta": {
                  "lastUpdated": "2005-05-02T19:46:08-04:00",
                  "profile": "http://hane.com/daisy_howe",
                  "security": {
                     "code": "Quia placeat nisi.",
                     "display": "Iste et odit.",
                     "system": "Ipsum minima ipsam.",
                     "userSelected": false,
                     "version": "Nihil velit dolorum est."
                  },
                  "tag": {
                     "code": "Quia placeat nisi.",
                     "display": "Iste et odit.",
                     "system": "Ipsum minima ipsam.",
                     "userSelected": false,
                     "version": "Nihil velit dolorum est."
                  },
                  "versionId": "Delectus et est."
               },
               "ValueOid": "Incidunt veniam a expedita.",
               "ValuePeriod": {
                  "end": "1997-04-01T15:52:35-04:00",
                  "start": "1982-07-20T00:14:16-04:00"
               },
               "ValuePositiveInt": 0.7862623446098116,
               "ValueQuantity": {
                  "code": "Voluptatum veritatis.",
                  "comparator": "\u003c=",
                  "system": "http://altenwerth.info/tre_schmitt",
                  "unit": "Et omnis recusandae velit perferendis sit.",
                  "value": 0.2868874286837466
               },
               "ValueRange": "Nobis maiores et est suscipit modi.",
               "ValueRatio": 7240726778760362147,
               "ValueReference": {
                  "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
                  "reference": "Provident quam porro maiores."
               },
               "ValueSampledData": "Et quis eos earum.",
               "ValueSignature": "A modi qui autem et officiis.",
               "ValueString": "Non voluptatem.",
               "ValueTime": "2011-04-18T15:47:36-04:00",
               "ValueTiming": "1973-10-03T12:07:44-04:00",
               "ValueUnsignedInt": 0.3285550508005384,
               "ValueUri": "Debitis mollitia accusantium dolorem.",
               "url": "Eveniet cumque."
            },
            "id": "Temporibus quia vero fugiat eos."
         }
      },
      "texture": {
         "foodType": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "modifier": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         }
      },
      "type": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      }
   },
   "orderer": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "patient": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "status": "requested",
   "supplement": [
      {
         "instruction": "Laboriosam eveniet animi fugiat consequatur itaque.",
         "productName": "Cumque asperiores nihil fugit.",
         "quantity": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         },
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         }
      },
      {
         "instruction": "Laboriosam eveniet animi fugiat consequatur itaque.",
         "productName": "Cumque asperiores nihil fugit.",
         "quantity": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         },
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         }
      },
      {
         "instruction": "Laboriosam eveniet animi fugiat consequatur itaque.",
         "productName": "Cumque asperiores nihil fugit.",
         "quantity": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         },
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         }
      }
   ]
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp34.Run(c, args) },
	}
	tmp34.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp34.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp35 := new(UpdateObservationCommand)
	sub = &cobra.Command{
		Use:   `Observation ["/nosh/patients/PATIENTID/observation/OBSERVATIONID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "bodySite": {
      "coding": [
         {
            "code": "Quia placeat nisi.",
            "display": "Iste et odit.",
            "system": "Ipsum minima ipsam.",
            "userSelected": false,
            "version": "Nihil velit dolorum est."
         }
      ],
      "text": "In consectetur."
   },
   "category": {
      "coding": [
         {
            "code": "Quia placeat nisi.",
            "display": "Iste et odit.",
            "system": "Ipsum minima ipsam.",
            "userSelected": false,
            "version": "Nihil velit dolorum est."
         }
      ],
      "text": "In consectetur."
   },
   "code": {
      "coding": [
         {
            "code": "Quia placeat nisi.",
            "display": "Iste et odit.",
            "system": "Ipsum minima ipsam.",
            "userSelected": false,
            "version": "Nihil velit dolorum est."
         }
      ],
      "text": "In consectetur."
   },
   "comments": "Harum a officiis enim sint aut quibusdam.",
   "component": {
      "code": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "dataAbsentReason": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "normalReferenceRange": {
         "age": {
            "high": {
               "code": "Voluptatum veritatis.",
               "comparator": "\u003c=",
               "system": "http://altenwerth.info/tre_schmitt",
               "unit": "Et omnis recusandae velit perferendis sit.",
               "value": 0.2868874286837466
            },
            "low": {
               "code": "Voluptatum veritatis.",
               "comparator": "\u003c=",
               "system": "http://altenwerth.info/tre_schmitt",
               "unit": "Et omnis recusandae velit perferendis sit.",
               "value": 0.2868874286837466
            }
         },
         "high": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         },
         "low": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         },
         "meaning": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "text": "Enim praesentium in saepe accusantium."
      },
      "valueAttachment": {
         "contentType": "Distinctio corrupti nemo.",
         "creation": "2001-09-06T02:20:58-04:00",
         "data": "Non vel ea dolores.",
         "hash": "Porro atque omnis ex voluptatem qui.",
         "size": 8011890215336253633,
         "title": "Cupiditate reprehenderit est harum."
      },
      "valueCodeableConcept": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "valueDatTime": "1986-09-05T08:46:06-04:00",
      "valuePeriod": {
         "end": "1997-04-01T15:52:35-04:00",
         "start": "1982-07-20T00:14:16-04:00"
      },
      "valueQuantity": {
         "code": "Voluptatum veritatis.",
         "comparator": "\u003c=",
         "system": "http://altenwerth.info/tre_schmitt",
         "unit": "Et omnis recusandae velit perferendis sit.",
         "value": 0.2868874286837466
      },
      "valueRange": {
         "high": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         },
         "low": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         }
      },
      "valueSampledData": {
         "data": "Aut iure aut.",
         "dimensions": 3634548011998479894,
         "factor": 0.19807760817517442,
         "lowerLimit": 0.9407882801683942,
         "origin": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         },
         "period": 0.19865050477380938,
         "upperLimit": 0.07090705055025388
      },
      "valueString": "Dolores aut quaerat soluta.",
      "valueTime": "2011-01-26T20:39:21-05:00"
   },
   "dateAbsentReason": {
      "coding": [
         {
            "code": "Quia placeat nisi.",
            "display": "Iste et odit.",
            "system": "Ipsum minima ipsam.",
            "userSelected": false,
            "version": "Nihil velit dolorum est."
         }
      ],
      "text": "In consectetur."
   },
   "device": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "effectiveDateTime": "1970-10-09T08:05:14-04:00",
   "effectivePeriod": {
      "end": "1997-04-01T15:52:35-04:00",
      "start": "1982-07-20T00:14:16-04:00"
   },
   "encounter": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "identifier": [
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      },
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      },
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      }
   ],
   "interpretation": {
      "coding": [
         {
            "code": "Quia placeat nisi.",
            "display": "Iste et odit.",
            "system": "Ipsum minima ipsam.",
            "userSelected": false,
            "version": "Nihil velit dolorum est."
         }
      ],
      "text": "In consectetur."
   },
   "issued": "2015-06-01T07:00:18-04:00",
   "meta": {
      "lastUpdated": "2005-05-02T19:46:08-04:00",
      "profile": "http://hane.com/daisy_howe",
      "security": {
         "code": "Quia placeat nisi.",
         "display": "Iste et odit.",
         "system": "Ipsum minima ipsam.",
         "userSelected": false,
         "version": "Nihil velit dolorum est."
      },
      "tag": {
         "code": "Quia placeat nisi.",
         "display": "Iste et odit.",
         "system": "Ipsum minima ipsam.",
         "userSelected": false,
         "version": "Nihil velit dolorum est."
      },
      "versionId": "Delectus et est."
   },
   "method": {
      "coding": [
         {
            "code": "Quia placeat nisi.",
            "display": "Iste et odit.",
            "system": "Ipsum minima ipsam.",
            "userSelected": false,
            "version": "Nihil velit dolorum est."
         }
      ],
      "text": "In consectetur."
   },
   "performer": [
      {
         "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
         "reference": "Provident quam porro maiores."
      },
      {
         "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
         "reference": "Provident quam porro maiores."
      }
   ],
   "referenceRange": {
      "age": {
         "high": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         },
         "low": {
            "code": "Voluptatum veritatis.",
            "comparator": "\u003c=",
            "system": "http://altenwerth.info/tre_schmitt",
            "unit": "Et omnis recusandae velit perferendis sit.",
            "value": 0.2868874286837466
         }
      },
      "high": {
         "code": "Voluptatum veritatis.",
         "comparator": "\u003c=",
         "system": "http://altenwerth.info/tre_schmitt",
         "unit": "Et omnis recusandae velit perferendis sit.",
         "value": 0.2868874286837466
      },
      "low": {
         "code": "Voluptatum veritatis.",
         "comparator": "\u003c=",
         "system": "http://altenwerth.info/tre_schmitt",
         "unit": "Et omnis recusandae velit perferendis sit.",
         "value": 0.2868874286837466
      },
      "meaning": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "text": "Enim praesentium in saepe accusantium."
   },
   "related": {
      "target": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "type": "Sunt id minima et est soluta."
   },
   "specimen": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "status": "preliminary",
   "valueAttachment": {
      "contentType": "Distinctio corrupti nemo.",
      "creation": "2001-09-06T02:20:58-04:00",
      "data": "Non vel ea dolores.",
      "hash": "Porro atque omnis ex voluptatem qui.",
      "size": 8011890215336253633,
      "title": "Cupiditate reprehenderit est harum."
   },
   "valueCodeableConcept": {
      "coding": [
         {
            "code": "Quia placeat nisi.",
            "display": "Iste et odit.",
            "system": "Ipsum minima ipsam.",
            "userSelected": false,
            "version": "Nihil velit dolorum est."
         }
      ],
      "text": "In consectetur."
   },
   "valueDatTime": "2008-04-11T17:14:39-04:00",
   "valuePeriod": {
      "end": "1997-04-01T15:52:35-04:00",
      "start": "1982-07-20T00:14:16-04:00"
   },
   "valueQuantity": {
      "code": "Voluptatum veritatis.",
      "comparator": "\u003c=",
      "system": "http://altenwerth.info/tre_schmitt",
      "unit": "Et omnis recusandae velit perferendis sit.",
      "value": 0.2868874286837466
   },
   "valueRange": {
      "high": {
         "code": "Voluptatum veritatis.",
         "comparator": "\u003c=",
         "system": "http://altenwerth.info/tre_schmitt",
         "unit": "Et omnis recusandae velit perferendis sit.",
         "value": 0.2868874286837466
      },
      "low": {
         "code": "Voluptatum veritatis.",
         "comparator": "\u003c=",
         "system": "http://altenwerth.info/tre_schmitt",
         "unit": "Et omnis recusandae velit perferendis sit.",
         "value": 0.2868874286837466
      }
   },
   "valueSampledData": {
      "data": "Aut iure aut.",
      "dimensions": 3634548011998479894,
      "factor": 0.19807760817517442,
      "lowerLimit": 0.9407882801683942,
      "origin": {
         "code": "Voluptatum veritatis.",
         "comparator": "\u003c=",
         "system": "http://altenwerth.info/tre_schmitt",
         "unit": "Et omnis recusandae velit perferendis sit.",
         "value": 0.2868874286837466
      },
      "period": 0.19865050477380938,
      "upperLimit": 0.07090705055025388
   },
   "valueString": "Dolorem porro ut eos molestias officiis qui.",
   "valueTime": "1997-07-22T18:33:28-04:00"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp35.Run(c, args) },
	}
	tmp35.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp35.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp36 := new(UpdatePatientCommand)
	sub = &cobra.Command{
		Use:   `patient ["/nosh/patients/PATIENTID"]`,
		Short: `This resource uses JWT to secure its endpoints`,
		Long: `This resource uses JWT to secure its endpoints

Payload example:

{
   "name": [
      {
         "family": [
            "Et sunt eius perferendis modi.",
            "Et sunt eius perferendis modi."
         ],
         "given": "Cupiditate eum aut ut quo.",
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
         "suffix": "Quis voluptatem.",
         "use": "anonymous"
      },
      {
         "family": [
            "Et sunt eius perferendis modi.",
            "Et sunt eius perferendis modi."
         ],
         "given": "Cupiditate eum aut ut quo.",
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
         "suffix": "Quis voluptatem.",
         "use": "anonymous"
      }
   ]
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp36.Run(c, args) },
	}
	tmp36.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp36.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp37 := new(UpdateUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/nosh/users/USERID"]`,
		Short: `This resource uses JWT to secure its endpoints`,
		Long: `This resource uses JWT to secure its endpoints

Payload example:

{
   "email": "jim.smith@gmail.com",
   "password": "Numquam deserunt consequatur aliquam."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp37.Run(c, args) },
	}
	tmp37.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp37.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "vread",
		Short: `Retrieve patient with given id. IDs 1 and 2 pre-exist in the system.`,
	}
	tmp38 := new(VreadPatientCommand)
	sub = &cobra.Command{
		Use:   `patient ["/nosh/patients/PATIENTID"]`,
		Short: `This resource uses JWT to secure its endpoints`,
		Long: `This resource uses JWT to secure its endpoints

Payload example:

{
   "active": false,
   "address": [
      {
         "city": "Nihil ea omnis.",
         "country": "Minus modi.",
         "distinct": "Enim vitae deleniti modi qui sed.",
         "line": [
            "Dicta voluptatibus.",
            "Dicta voluptatibus."
         ],
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "postalCode": "Qui commodi.",
         "state": "Consequatur laboriosam.",
         "type": "postal",
         "use": "work"
      }
   ],
   "animal": {
      "breed": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "genderStatus": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      },
      "species": {
         "coding": [
            {
               "code": "Quia placeat nisi.",
               "display": "Iste et odit.",
               "system": "Ipsum minima ipsam.",
               "userSelected": false,
               "version": "Nihil velit dolorum est."
            }
         ],
         "text": "In consectetur."
      }
   },
   "birthDate": "2007-05-02T15:49:30-04:00",
   "careProvider": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "communication": [
      {
         "careProvider": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "language": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "preferred": false
      }
   ],
   "contact": [
      {
         "address": {
            "city": "Nihil ea omnis.",
            "country": "Minus modi.",
            "distinct": "Enim vitae deleniti modi qui sed.",
            "line": [
               "Dicta voluptatibus.",
               "Dicta voluptatibus."
            ],
            "period": {
               "end": "1997-04-01T15:52:35-04:00",
               "start": "1982-07-20T00:14:16-04:00"
            },
            "postalCode": "Qui commodi.",
            "state": "Consequatur laboriosam.",
            "type": "postal",
            "use": "work"
         },
         "careProvider": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "gender": "other",
         "language": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "name": {
            "family": [
               "Et sunt eius perferendis modi.",
               "Et sunt eius perferendis modi."
            ],
            "given": "Cupiditate eum aut ut quo.",
            "period": {
               "end": "1997-04-01T15:52:35-04:00",
               "start": "1982-07-20T00:14:16-04:00"
            },
            "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
            "suffix": "Quis voluptatem.",
            "use": "anonymous"
         },
         "organization": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "preferred": true,
         "relationship": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "telecom": {
            "rank": 6922663900479996673,
            "system": "phone",
            "use": "work",
            "value": "Quibusdam dicta cumque."
         }
      },
      {
         "address": {
            "city": "Nihil ea omnis.",
            "country": "Minus modi.",
            "distinct": "Enim vitae deleniti modi qui sed.",
            "line": [
               "Dicta voluptatibus.",
               "Dicta voluptatibus."
            ],
            "period": {
               "end": "1997-04-01T15:52:35-04:00",
               "start": "1982-07-20T00:14:16-04:00"
            },
            "postalCode": "Qui commodi.",
            "state": "Consequatur laboriosam.",
            "type": "postal",
            "use": "work"
         },
         "careProvider": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "gender": "other",
         "language": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "name": {
            "family": [
               "Et sunt eius perferendis modi.",
               "Et sunt eius perferendis modi."
            ],
            "given": "Cupiditate eum aut ut quo.",
            "period": {
               "end": "1997-04-01T15:52:35-04:00",
               "start": "1982-07-20T00:14:16-04:00"
            },
            "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
            "suffix": "Quis voluptatem.",
            "use": "anonymous"
         },
         "organization": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "preferred": true,
         "relationship": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "telecom": {
            "rank": 6922663900479996673,
            "system": "phone",
            "use": "work",
            "value": "Quibusdam dicta cumque."
         }
      }
   ],
   "created_at": "2006-03-25T03:54:56-04:00",
   "created_by": "me@goa.design",
   "deceasedBoolean": true,
   "deceasedDateTime": "1992-07-17T20:16:40-04:00",
   "gender": "male",
   "href": "/patients/1",
   "id": 1,
   "identifier": [
      {
         "assigner": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "system": "http://green.net/henri.torp",
         "type": {
            "coding": [
               {
                  "code": "Quia placeat nisi.",
                  "display": "Iste et odit.",
                  "system": "Ipsum minima ipsam.",
                  "userSelected": false,
                  "version": "Nihil velit dolorum est."
               }
            ],
            "text": "In consectetur."
         },
         "use": "official",
         "value": "Illum culpa aperiam omnis sapiente sit porro."
      }
   ],
   "link": [
      {
         "other": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "type": "replace"
      },
      {
         "other": {
            "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
            "reference": "Provident quam porro maiores."
         },
         "type": "replace"
      }
   ],
   "managingOrganization": {
      "display": "Enim at eligendi ullam officiis reprehenderit perspiciatis.",
      "reference": "Provident quam porro maiores."
   },
   "meta": {
      "lastUpdated": "2005-05-02T19:46:08-04:00",
      "profile": "http://hane.com/daisy_howe",
      "security": {
         "code": "Quia placeat nisi.",
         "display": "Iste et odit.",
         "system": "Ipsum minima ipsam.",
         "userSelected": false,
         "version": "Nihil velit dolorum est."
      },
      "tag": {
         "code": "Quia placeat nisi.",
         "display": "Iste et odit.",
         "system": "Ipsum minima ipsam.",
         "userSelected": false,
         "version": "Nihil velit dolorum est."
      },
      "versionId": "Delectus et est."
   },
   "multipleBirthBoolean": true,
   "multipleBirthInteger": 2104304148959728675,
   "name": [
      {
         "family": [
            "Et sunt eius perferendis modi.",
            "Et sunt eius perferendis modi."
         ],
         "given": "Cupiditate eum aut ut quo.",
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
         "suffix": "Quis voluptatem.",
         "use": "anonymous"
      },
      {
         "family": [
            "Et sunt eius perferendis modi.",
            "Et sunt eius perferendis modi."
         ],
         "given": "Cupiditate eum aut ut quo.",
         "period": {
            "end": "1997-04-01T15:52:35-04:00",
            "start": "1982-07-20T00:14:16-04:00"
         },
         "prefix": "Qui veritatis molestiae eos consequatur quo similique.",
         "suffix": "Quis voluptatem.",
         "use": "anonymous"
      }
   ],
   "photo": [
      {
         "contentType": "Distinctio corrupti nemo.",
         "creation": "2001-09-06T02:20:58-04:00",
         "data": "Non vel ea dolores.",
         "hash": "Porro atque omnis ex voluptatem qui.",
         "size": 8011890215336253633,
         "title": "Cupiditate reprehenderit est harum."
      },
      {
         "contentType": "Distinctio corrupti nemo.",
         "creation": "2001-09-06T02:20:58-04:00",
         "data": "Non vel ea dolores.",
         "hash": "Porro atque omnis ex voluptatem qui.",
         "size": 8011890215336253633,
         "title": "Cupiditate reprehenderit est harum."
      },
      {
         "contentType": "Distinctio corrupti nemo.",
         "creation": "2001-09-06T02:20:58-04:00",
         "data": "Non vel ea dolores.",
         "hash": "Porro atque omnis ex voluptatem qui.",
         "size": 8011890215336253633,
         "title": "Cupiditate reprehenderit est harum."
      }
   ]
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp38.Run(c, args) },
	}
	tmp38.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp38.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "watch",
		Short: `watch action`,
	}
	tmp39 := new(WatchAllergyIntoleranceCommand)
	sub = &cobra.Command{
		Use:   `AllergyIntolerance ["/nosh/patients/PATIENTID/allergy.intolerance/ALLERGY.intoleranceID/watch"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp39.Run(c, args) },
	}
	tmp39.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp39.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp40 := new(WatchNutritionRequestCommand)
	sub = &cobra.Command{
		Use:   `NutritionRequest ["/nosh/patients/PATIENTID/nutrition.requests/NUTRITION_REQUESTID/watch"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp40.Run(c, args) },
	}
	tmp40.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp40.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp41 := new(WatchObservationCommand)
	sub = &cobra.Command{
		Use:   `Observation ["/nosh/patients/PATIENTID/observation/OBSERVATIONID/watch"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp41.Run(c, args) },
	}
	tmp41.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp41.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)

	dl := new(DownloadCommand)
	dlc := &cobra.Command{
		Use:   "download [PATH]",
		Short: "Download file with given path",
		RunE: func(cmd *cobra.Command, args []string) error {
			return dl.Run(c, args)
		},
	}
	dlc.Flags().StringVar(&dl.OutFile, "out", "", "Output file")
	app.AddCommand(dlc)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run downloads files with given paths.
func (cmd *DownloadCommand) Run(c *client.Client, args []string) error {
	var (
		fnf func(context.Context, string) (int64, error)
		fnd func(context.Context, string, string) (int64, error)

		rpath   = args[0]
		outfile = cmd.OutFile
		logger  = goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
		ctx     = goa.WithLogger(context.Background(), logger)
		err     error
	)

	if rpath[0] != '/' {
		rpath = "/" + rpath
	}
	if rpath == "/ui" {
		fnf = c.DownloadUI
		if outfile == "" {
			outfile = "index.html"
		}
		goto found
	}
	if rpath == "/swagger.json" {
		fnf = c.DownloadSwaggerJSON
		if outfile == "" {
			outfile = "swagger.json"
		}
		goto found
	}
	if strings.HasPrefix(rpath, "/js/") {
		fnd = c.DownloadJs
		rpath = rpath[4:]
		if outfile == "" {
			_, outfile = path.Split(rpath)
		}
		goto found
	}
	return fmt.Errorf("don't know how to download %s", rpath)
found:
	ctx = goa.WithLogContext(ctx, "file", outfile)
	if fnf != nil {
		_, err = fnf(ctx, outfile)
	} else {
		_, err = fnd(ctx, rpath, outfile)
	}
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	return nil
}

// Run makes the HTTP request corresponding to the CreateAllergyIntoleranceCommand command.
func (cmd *CreateAllergyIntoleranceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/allergy.intolerance", cmd.PatientID)
	}
	var payload client.CreateAllergyIntolerancePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp42 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp42, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.CreateAllergyIntolerance(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp42, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateAllergyIntoleranceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the DeleteAllergyIntoleranceCommand command.
func (cmd *DeleteAllergyIntoleranceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/allergy.intolerance/%v.intoleranceID", cmd.PatientID, url.QueryEscape(cmd.Allergy))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp43 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp43, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.DeleteAllergyIntolerance(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp43, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type), intFlagVal("allergy.intoleranceID", cmd.AllergyIntoleranceID))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteAllergyIntoleranceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var allergy string
	cc.Flags().StringVar(&cmd.Allergy, "allergy", allergy, ``)
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
	var allergyIntoleranceID int
	cc.Flags().IntVar(&cmd.AllergyIntoleranceID, "allergy.intoleranceID", allergyIntoleranceID, ``)
}

// Run makes the HTTP request corresponding to the ListAllergyIntoleranceCommand command.
func (cmd *ListAllergyIntoleranceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/allergy.intolerance", cmd.PatientID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp44 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp44, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.ListAllergyIntolerance(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp44, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type), cmd.Years)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListAllergyIntoleranceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
	var years []int
	cc.Flags().IntSliceVar(&cmd.Years, "years", years, `Filter by years`)
}

// Run makes the HTTP request corresponding to the RateAllergyIntoleranceCommand command.
func (cmd *RateAllergyIntoleranceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/allergy.intolerance/%v.intoleranceID/actions/rate", cmd.PatientID, url.QueryEscape(cmd.Allergy))
	}
	var payload client.RateAllergyIntolerancePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp45 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp45, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.RateAllergyIntolerance(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp45, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type), intFlagVal("allergy.intoleranceID", cmd.AllergyIntoleranceID))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RateAllergyIntoleranceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var allergy string
	cc.Flags().StringVar(&cmd.Allergy, "allergy", allergy, ``)
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
	var allergyIntoleranceID int
	cc.Flags().IntVar(&cmd.AllergyIntoleranceID, "allergy.intoleranceID", allergyIntoleranceID, ``)
}

// Run makes the HTTP request corresponding to the ReadAllergyIntoleranceCommand command.
func (cmd *ReadAllergyIntoleranceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/allergy.intolerance/%v.intoleranceID", cmd.PatientID, url.QueryEscape(cmd.Allergy))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp46 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp46, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.ReadAllergyIntolerance(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp46, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type), intFlagVal("allergy.intoleranceID", cmd.AllergyIntoleranceID))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ReadAllergyIntoleranceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var allergy string
	cc.Flags().StringVar(&cmd.Allergy, "allergy", allergy, ``)
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
	var allergyIntoleranceID int
	cc.Flags().IntVar(&cmd.AllergyIntoleranceID, "allergy.intoleranceID", allergyIntoleranceID, ``)
}

// Run makes the HTTP request corresponding to the UpdateAllergyIntoleranceCommand command.
func (cmd *UpdateAllergyIntoleranceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/allergy.intolerance/%v.intoleranceID", cmd.PatientID, url.QueryEscape(cmd.Allergy))
	}
	var payload client.AllergyIntolerancePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp47 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp47, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.UpdateAllergyIntolerance(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp47, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type), intFlagVal("allergy.intoleranceID", cmd.AllergyIntoleranceID))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateAllergyIntoleranceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var allergy string
	cc.Flags().StringVar(&cmd.Allergy, "allergy", allergy, ``)
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
	var allergyIntoleranceID int
	cc.Flags().IntVar(&cmd.AllergyIntoleranceID, "allergy.intoleranceID", allergyIntoleranceID, ``)
}

// Run establishes a websocket connection for the WatchAllergyIntoleranceCommand command.
func (cmd *WatchAllergyIntoleranceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/allergy.intolerance/%v.intoleranceID/watch", cmd.PatientID, url.QueryEscape(cmd.Allergy))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp48 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp48, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	ws, err := c.WatchAllergyIntolerance(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp48, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type), intFlagVal("allergy.intoleranceID", cmd.AllergyIntoleranceID))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}
	go goaclient.WSWrite(ws)
	goaclient.WSRead(ws)

	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *WatchAllergyIntoleranceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var allergy string
	cc.Flags().StringVar(&cmd.Allergy, "allergy", allergy, ``)
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
	var allergyIntoleranceID int
	cc.Flags().IntVar(&cmd.AllergyIntoleranceID, "allergy.intoleranceID", allergyIntoleranceID, ``)
}

// Run makes the HTTP request corresponding to the CreateNutritionRequestCommand command.
func (cmd *CreateNutritionRequestCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/nutrition.requests", cmd.PatientID)
	}
	var payload client.CreateNutritionRequestPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp49 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp49, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.CreateNutritionRequest(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp49, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateNutritionRequestCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the DeleteNutritionRequestCommand command.
func (cmd *DeleteNutritionRequestCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/nutrition.requests/%v", cmd.PatientID, cmd.NutritionRequestID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp50 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp50, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.DeleteNutritionRequest(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp50, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteNutritionRequestCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var nutritionRequestID int
	cc.Flags().IntVar(&cmd.NutritionRequestID, "nutrition_requestID", nutritionRequestID, ``)
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the ListNutritionRequestCommand command.
func (cmd *ListNutritionRequestCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/nutrition.requests", cmd.PatientID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp51 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp51, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.ListNutritionRequest(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp51, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type), cmd.Years)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListNutritionRequestCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
	var years []int
	cc.Flags().IntSliceVar(&cmd.Years, "years", years, `Filter by years`)
}

// Run makes the HTTP request corresponding to the RateNutritionRequestCommand command.
func (cmd *RateNutritionRequestCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/nutrition.requests/%v/actions/rate", cmd.PatientID, cmd.NutritionRequestID)
	}
	var payload client.RateNutritionRequestPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp52 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp52, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.RateNutritionRequest(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp52, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RateNutritionRequestCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var nutritionRequestID int
	cc.Flags().IntVar(&cmd.NutritionRequestID, "nutrition_requestID", nutritionRequestID, ``)
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the ReadNutritionRequestCommand command.
func (cmd *ReadNutritionRequestCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/nutrition.requests/%v", cmd.PatientID, cmd.NutritionRequestID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp53 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp53, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.ReadNutritionRequest(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp53, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ReadNutritionRequestCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var nutritionRequestID int
	cc.Flags().IntVar(&cmd.NutritionRequestID, "nutrition_requestID", nutritionRequestID, ``)
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the UpdateNutritionRequestCommand command.
func (cmd *UpdateNutritionRequestCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/nutrition.requests/%v", cmd.PatientID, cmd.NutritionRequestID)
	}
	var payload client.NutritionRequestPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp54 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp54, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.UpdateNutritionRequest(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp54, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateNutritionRequestCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var nutritionRequestID int
	cc.Flags().IntVar(&cmd.NutritionRequestID, "nutrition_requestID", nutritionRequestID, ``)
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run establishes a websocket connection for the WatchNutritionRequestCommand command.
func (cmd *WatchNutritionRequestCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/nutrition.requests/%v/watch", cmd.PatientID, cmd.NutritionRequestID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp55 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp55, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	ws, err := c.WatchNutritionRequest(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp55, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}
	go goaclient.WSWrite(ws)
	goaclient.WSRead(ws)

	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *WatchNutritionRequestCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var nutritionRequestID int
	cc.Flags().IntVar(&cmd.NutritionRequestID, "nutrition_requestID", nutritionRequestID, ``)
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the CreateObservationCommand command.
func (cmd *CreateObservationCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/observation", cmd.PatientID)
	}
	var payload client.CreateObservationPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp56 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp56, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.CreateObservation(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp56, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateObservationCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the DeleteObservationCommand command.
func (cmd *DeleteObservationCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/observation/%v", cmd.PatientID, cmd.ObservationID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp57 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp57, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.DeleteObservation(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp57, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteObservationCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var observationID int
	cc.Flags().IntVar(&cmd.ObservationID, "observationID", observationID, ``)
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the ListObservationCommand command.
func (cmd *ListObservationCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/observation", cmd.PatientID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp58 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp58, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.ListObservation(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp58, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type), cmd.Code)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListObservationCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
	var code []string
	cc.Flags().StringSliceVar(&cmd.Code, "code", code, `Filter by code`)
}

// Run makes the HTTP request corresponding to the RateObservationCommand command.
func (cmd *RateObservationCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/observation/%v/actions/rate", cmd.PatientID, cmd.ObservationID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp59 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp59, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.RateObservation(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp59, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RateObservationCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var observationID int
	cc.Flags().IntVar(&cmd.ObservationID, "observationID", observationID, ``)
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the ShowObservationCommand command.
func (cmd *ShowObservationCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/observation/%v", cmd.PatientID, cmd.ObservationID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp60 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp60, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.ShowObservation(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp60, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowObservationCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var observationID int
	cc.Flags().IntVar(&cmd.ObservationID, "observationID", observationID, ``)
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the UpdateObservationCommand command.
func (cmd *UpdateObservationCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/observation/%v", cmd.PatientID, cmd.ObservationID)
	}
	var payload client.ObservationPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp61 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp61, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.UpdateObservation(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp61, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateObservationCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var observationID int
	cc.Flags().IntVar(&cmd.ObservationID, "observationID", observationID, ``)
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run establishes a websocket connection for the WatchObservationCommand command.
func (cmd *WatchObservationCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v/observation/%v/watch", cmd.PatientID, cmd.ObservationID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp62 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp62, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	ws, err := c.WatchObservation(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp62, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}
	go goaclient.WSWrite(ws)
	goaclient.WSRead(ws)

	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *WatchObservationCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var observationID int
	cc.Flags().IntVar(&cmd.ObservationID, "observationID", observationID, ``)
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the SecureBasicCommand command.
func (cmd *SecureBasicCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nosh/basic"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp63 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp63, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.SecureBasic(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp63, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SecureBasicCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the UnsecureBasicCommand command.
func (cmd *UnsecureBasicCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nosh/basic/unsecure"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp64 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp64, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.UnsecureBasic(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp64, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UnsecureBasicCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the HealthHealthCommand command.
func (cmd *HealthHealthCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nosh/_ah/health"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp65 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp65, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.HealthHealth(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp65, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *HealthHealthCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the SecureJWTCommand command.
func (cmd *SecureJWTCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nosh/jwt"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp66 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp66, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	var tmp67 *bool
	if cmd.Fail != "" {
		var err error
		tmp67, err = boolVal(cmd.Fail)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--fail", "err", err)
			return err
		}
	}
	resp, err := c.SecureJWT(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp66, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type), tmp67)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SecureJWTCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
	var fail string
	cc.Flags().StringVar(&cmd.Fail, "fail", fail, `Force auth failure via JWT validation middleware`)
}

// Run makes the HTTP request corresponding to the SigninJWTCommand command.
func (cmd *SigninJWTCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nosh/jwt/signin"
	}
	var payload client.SigninJWTPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp68 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp68, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.SigninJWT(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp68, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SigninJWTCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the SignupJWTCommand command.
func (cmd *SignupJWTCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nosh/jwt/signup"
	}
	var payload client.SignupJWTPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp69 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp69, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.SignupJWT(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp69, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SignupJWTCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the UnsecureJWTCommand command.
func (cmd *UnsecureJWTCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nosh/jwt/unsecure"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp70 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp70, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.UnsecureJWT(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp70, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UnsecureJWTCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the CreatePatientCommand command.
func (cmd *CreatePatientCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nosh/patients"
	}
	var payload client.CreatePatientPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp71 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp71, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.CreatePatient(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp71, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreatePatientCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the DeletePatientCommand command.
func (cmd *DeletePatientCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v", cmd.PatientID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp72 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp72, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.DeletePatient(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp72, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeletePatientCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the ReadPatientCommand command.
func (cmd *ReadPatientCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v", cmd.PatientID)
	}
	var payload client.PatientPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp73 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp73, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.ReadPatient(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp73, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ReadPatientCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the SearchPatientCommand command.
func (cmd *SearchPatientCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nosh/patients"
	}
	var payload client.PatientPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp74 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp74, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	var tmp75 *bool
	if cmd.Active != "" {
		var err error
		tmp75, err = boolVal(cmd.Active)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--active", "err", err)
			return err
		}
	}
	var tmp76 []time.Time
	if cmd.BirthDate != nil {
		var err error
		tmp76, err = timeArray(cmd.BirthDate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into []time.Time value", "flag", "--birthDate", "err", err)
			return err
		}
	}
	resp, err := c.SearchPatient(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp74, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type), tmp75, tmp76, stringFlagVal("gender", cmd.Gender), cmd.Name)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SearchPatientCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
	var active string
	cc.Flags().StringVar(&cmd.Active, "active", active, `Filter by active`)
	var birthDate []string
	cc.Flags().StringSliceVar(&cmd.BirthDate, "birthDate", birthDate, `Filter by birth date`)
	var gender string
	cc.Flags().StringVar(&cmd.Gender, "gender", gender, `Filter by gender`)
	var name []string
	cc.Flags().StringSliceVar(&cmd.Name, "name", name, `Filter by name`)
}

// Run makes the HTTP request corresponding to the UpdatePatientCommand command.
func (cmd *UpdatePatientCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v", cmd.PatientID)
	}
	var payload client.UpdatePatientPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp77 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp77, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.UpdatePatient(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp77, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdatePatientCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the VreadPatientCommand command.
func (cmd *VreadPatientCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/patients/%v", cmd.PatientID)
	}
	var payload client.PatientPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp78 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp78, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.VreadPatient(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp78, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *VreadPatientCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var patientID int
	cc.Flags().IntVar(&cmd.PatientID, "patientID", patientID, `Patient ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the CreateUserCommand command.
func (cmd *CreateUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nosh/users"
	}
	var payload client.CreateUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp79 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp79, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.CreateUser(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp79, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the DeleteUserCommand command.
func (cmd *DeleteUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/users/%v", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp80 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp80, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.DeleteUser(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp80, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userID", userID, `User ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the ListUserCommand command.
func (cmd *ListUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nosh/users"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp81 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp81, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.ListUser(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp81, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the ShowUserCommand command.
func (cmd *ShowUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/users/%v", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp82 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp82, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.ShowUser(ctx, path, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp82, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userID", userID, `User ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the SigninUserCommand command.
func (cmd *SigninUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nosh/users/jwt/signin"
	}
	var payload client.SigninUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp83 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp83, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.SigninUser(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp83, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SigninUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the SignupUserCommand command.
func (cmd *SignupUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nosh/users/jwt/signup"
	}
	var payload client.SignupUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp84 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp84, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.SignupUser(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp84, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SignupUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}

// Run makes the HTTP request corresponding to the UpdateUserCommand command.
func (cmd *UpdateUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nosh/users/%v", cmd.UserID)
	}
	var payload client.UpdateUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp85 *time.Time
	if cmd.LastUpdate != "" {
		var err error
		tmp85, err = timeVal(cmd.LastUpdate)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--_lastUpdate", "err", err)
			return err
		}
	}
	resp, err := c.UpdateUser(ctx, path, &payload, stringFlagVal("_contained", cmd.Contained), stringFlagVal("_containedType", cmd.ContainedType), intFlagVal("_count", cmd.Count), stringFlagVal("_elements", cmd.Elements), stringFlagVal("_has", cmd.Has), intFlagVal("_id", cmd.ID), stringFlagVal("_include", cmd.Include), tmp85, stringFlagVal("_list", cmd.List), stringFlagVal("_profile", cmd.Profile), stringFlagVal("_query", cmd.Query), stringFlagVal("_revinclude", cmd.Revinclude), stringFlagVal("_security", cmd.Security), stringFlagVal("_sort", cmd.Sort), stringFlagVal("_summary", cmd.Summary), stringFlagVal("_tag", cmd.Tag), stringFlagVal("_text", cmd.Text), stringFlagVal("_type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userID", userID, `User ID`)
	var contained string
	cc.Flags().StringVar(&cmd.Contained, "_contained", contained, ``)
	var containedType string
	cc.Flags().StringVar(&cmd.ContainedType, "_containedType", containedType, ``)
	var count int
	cc.Flags().IntVar(&cmd.Count, "_count", count, ``)
	var elements string
	cc.Flags().StringVar(&cmd.Elements, "_elements", elements, ``)
	var has string
	cc.Flags().StringVar(&cmd.Has, "_has", has, ``)
	var id int
	cc.Flags().IntVar(&cmd.ID, "_id", id, ``)
	var include string
	cc.Flags().StringVar(&cmd.Include, "_include", include, ``)
	var lastUpdate string
	cc.Flags().StringVar(&cmd.LastUpdate, "_lastUpdate", lastUpdate, ``)
	var list string
	cc.Flags().StringVar(&cmd.List, "_list", list, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "_profile", profile, ``)
	var query string
	cc.Flags().StringVar(&cmd.Query, "_query", query, ``)
	var revinclude string
	cc.Flags().StringVar(&cmd.Revinclude, "_revinclude", revinclude, ``)
	var security string
	cc.Flags().StringVar(&cmd.Security, "_security", security, ``)
	var sort string
	cc.Flags().StringVar(&cmd.Sort, "_sort", sort, ``)
	var summary string
	cc.Flags().StringVar(&cmd.Summary, "_summary", summary, ``)
	var tag string
	cc.Flags().StringVar(&cmd.Tag, "_tag", tag, ``)
	var text string
	cc.Flags().StringVar(&cmd.Text, "_text", text, ``)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "_type", type_, ``)
}
