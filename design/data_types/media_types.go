package design

import (
	. "github.com/goadesign/goa/design"
	. "github.com/goadesign/goa/design/apidsl"
)

var BackboneElement = MediaType("application/vnd.backbone.element+json", func() {
	Attributes(func() {
		Reference(BackboneElementPayload)
		Attribute("element")
		Attribute("modifierExtension")
	})
	View("default", func() {
		Description("Default view for BackboneElement")
		Attribute("element")
		Attribute("modifierExtension")
	})
})
var Element = MediaType("application/vnd.element+json", func() {
	Attributes(func() {
		Reference(ElementPayload)
		Attribute("id")
		Attribute("extension")
	})
	View("default", func() {
		Description("Default view for Element")
		Attribute("id")
		Attribute("extension")
	})
})
var Extension = MediaType("application/vnd.extension+json", func() {
	Attributes(func() {
		Description("Default view for Extension element")
		Reference(ExtensionPayload)
		Attribute("url")
		Attribute("ValueAddress")
		Attribute("ValueAnnotation")
		Attribute("ValueAttachment")
		Attribute("ValueBase64Binary")
		Attribute("ValueBoolean")
		Attribute("ValueCode")
		Attribute("ValueCodeableConcept")
		Attribute("ValueCoding")
		Attribute("ValueContactPoint")
		Attribute("ValueDate")
		Attribute("ValueDateTime")
		Attribute("ValueDecimal")
		Attribute("ValueHumanName")
		Attribute("ValueId")
		Attribute("ValueIdentifier")
		Attribute("ValueInstant")
		Attribute("ValueInteger")
		Attribute("ValueMarkdown")
		Attribute("ValueMeta")
		Attribute("ValueOid")
		Attribute("ValuePeriod")
		Attribute("ValuePositiveInt")
		Attribute("ValueQuantity")
		Attribute("ValueRange")
		Attribute("ValueRatio")
		Attribute("ValueReference")
		Attribute("ValueSampledData")
		Attribute("ValueSignature")
		Attribute("ValueString")
		Attribute("ValueTime")
		Attribute("ValueTiming")
		Attribute("ValueUnsignedInt")
		Attribute("ValueUri")
	})
	View("default", func() {
		Description("Default view for Extension element")
		Attribute("url")
		Attribute("ValueAddress")
		Attribute("ValueAnnotation")
		Attribute("ValueAttachment")
		Attribute("ValueBase64Binary")
		Attribute("ValueBoolean")
		Attribute("ValueCode")
		Attribute("ValueCodeableConcept")
		Attribute("ValueCoding")
		Attribute("ValueContactPoint")
		Attribute("ValueDate")
		Attribute("ValueDateTime")
		Attribute("ValueDecimal")
		Attribute("ValueHumanName")
		Attribute("ValueId")
		Attribute("ValueIdentifier")
		Attribute("ValueInstant")
		Attribute("ValueInteger")
		Attribute("ValueMarkdown")
		Attribute("ValueMeta")
		Attribute("ValueOid")
		Attribute("ValuePeriod")
		Attribute("ValuePositiveInt")
		Attribute("ValueQuantity")
		Attribute("ValueRange")
		Attribute("ValueRatio")
		Attribute("ValueReference")
		Attribute("ValueSampledData")
		Attribute("ValueSignature")
		Attribute("ValueString")
		Attribute("ValueTime")
		Attribute("ValueTiming")
		Attribute("ValueUnsignedInt")
		Attribute("ValueUri")
	})
})





var Address = MediaType("application/vnd.address+json", func() {
	Attributes(func() {
		Reference(AddressPayload)
		Attribute("use")
		Attribute("type")
		Attribute("line")
		Attribute("city")
		Attribute("distinct")
		Attribute("state")
		Attribute("postalCode")
		Attribute("country")
	})
	View("default", func() {
		Description("Default view for Address data type")
		Attribute("use")
		Attribute("type")
		Attribute("line")
		Attribute("city")
		Attribute("distinct")
		Attribute("state")
		Attribute("postalCode")
		Attribute("country")
	})
})
var Annotation = MediaType("application/vnd.annotation+json", func() {
	Attributes(func() {
		Reference(AnnotationPayload)
		Attribute("authorReference")
		Attribute("authorString")
		Attribute("time")
	})
	View("default", func() {
		Description("Default view for Annotation data type")
		Attribute("authorReference")
		Attribute("authorString")
		Attribute("time")
	})
})
var Attachment = MediaType("application/vnd.attachment+json", func() {
	Attributes(func() {
		Reference(AttachmentPayload)
		Attribute("contentType")
		Attribute("data")
		Attribute("size")
		Attribute("hash")
		Attribute("title")
		Attribute("creation")
	})
	View("default", func() {
		Description("Default view for attachment data type")
		Required("contentType")
		Attribute("contentType")
		Attribute("data")
		Attribute("size")
		Attribute("hash")
		Attribute("title")
		Attribute("creation")
	})
})
var Coding = MediaType("application/vnd.coding+json", func() {
	Attributes(func() {
		Reference(CodingPayload)
		Attribute("system")
		Attribute("version")
		Attribute("code")
		Attribute("display")
		Attribute("userSelected")
	})
	View("default", func() {
		Description("Default view for coding data type")
		Attribute("system")
		Attribute("version")
		Attribute("code")
		Attribute("display")
		Attribute("userSelected")
	})
})
var CodeableConcept = MediaType("application/vnd.codeable.concept+json", func() {
	Attributes(func() {
		Reference(CodeableConceptPayload)
		Attribute("coding")
		Attribute("text")
	})
	View("default", func() {
		Description("Default view for CodeableConcept data type")
		Attribute("coding")
		Attribute("text")
	})
})
var ContactPoint = MediaType("application/vnd.contact.point+json", func() {
	Attributes(func() {
		Reference(ContactPointPayload)
		Attribute("system")
		Attribute("value")
		Attribute("use")
		Attribute("rank")
	})
	View("default", func() {
		Description("Default view for ContactPoint data type")
		Attribute("system")
		Attribute("value")
		Attribute("use")
		Attribute("rank")
	})
})

//Goa has a function named Reference. Changed to HL7Reference
var HL7Reference = MediaType("application/vnd.reference+json", func() {
	Attributes(func() {
		Reference(HL7ReferencePayload)
		Attribute("reference")
		Attribute("display")
	})
	View("default", func() {
		Description("Default view for Referece data type.")
		Attribute("reference")
		Attribute("display")
	})
})
var HumanName = MediaType("application/vnd.human.name+json", func() {
	Reference(HumanNamePayload)
	Attributes(func() {
		Attribute("use")
		Attribute("family")
		Attribute("given")
		Attribute("prefix")
		Attribute("suffix")
		Attribute("period")
	})
	View("default", func() {
		Description("A reference to a code defined by a terminology system")
		Required("use")
		Attribute("use")
		Attribute("family")
		Attribute("given")
		Attribute("prefix")
		Attribute("suffix")
		Attribute("period")
	})
})
var Identifier = MediaType("application/vnd.identifier+json", func() {
	Reference(IdentifierPayload)
	Attributes(func() {
		Attribute("CodeableConcept")
		Attribute("period")
		Attribute("assigner")
	})
	View("default", func() {
		Description("Default view for identifier resource")
		Attribute("CodeableConcept")
		Attribute("period")
		Attribute("assigner")
	})
})
var Meta = MediaType("application/vnd.meta+json", func() {
	Attributes(func() {
		Reference(MetaPayload)
		Attribute("versionId")
		Attribute("lastUpdated")
		Attribute("profile")
		Attribute("security")
		Attribute("tag")
	})
	View("default", func() {
		Description("Default view for Meta data type")
		Attribute("versionId")
		Attribute("lastUpdated")
		Attribute("profile")
		Attribute("security")
		Attribute("tag")
	})
})
var Period = MediaType("application/vnd.period+json", func() {
	Description("A time period defined by a start and end date and optionally time.")
	Attributes(func() {
		Reference(PeriodPayload)
		Attribute("start")
		Attribute("end")
	})
	View("default", func() {
		Attribute("start")
		Attribute("end")
	})
})
var Quantity = MediaType("application/vnd.quantity+json", func() {
	Attributes(func() {
		Reference(QuantityPayload)
		Attribute("value")
		Attribute("comparator")
		Attribute("unit")
		Attribute("system")
		Attribute("code")
	})
	View("default", func() {
		Description("A reference to a code defined by a terminology system")
		Required("comparator")
		Attribute("value")
		Attribute("comparator")
		Attribute("unit")
		Attribute("system")
		Attribute("code")
	})
})
var Range = MediaType("application/vnd.range+json", func() {
	Attributes(func() {
		Reference(RangePayload)
		Attribute("low")
		Attribute("high")
	})
	View("default", func() {
		Description("Default view for Range data type")
		Attribute("low")
		Attribute("high")
	})
})
var Ratio = MediaType("application/vnd.ratio+json", func() {
	Attributes(func() {
		Reference(RatioPayload)
		Attribute("numerator")
		Attribute("denominator")
	})
	View("default", func() {
		Description("Default view for Ratio data type")
		Attribute("numerator")
		Attribute("denominator")
	})
})

//This is currently an Element.
var Repeat = MediaType("application/vnd.repeat+json", func() {
	Attributes(func() {
		Reference(RepeatPayload)
		Attribute("bounds")
		Attribute("count")
		Attribute("duration")
		Attribute("durationUnits")
		Attribute("frequency")
		Attribute("frequencyMax")
		Attribute("period")
		Attribute("periodMax")
		Attribute("periodUnits")
		Attribute("when")
	})
	View("default", func() {
		Description("Default view of Repeat element")
		Attribute("bounds")
		Attribute("count")
		Attribute("duration")
		Attribute("durationUnits")
		Attribute("frequency")
		Attribute("frequencyMax")
		Attribute("period")
		Attribute("periodMax")
		Attribute("periodUnits")
		Attribute("when")
	})
})
var SampleData = MediaType("application/vnd.sample.data+json", func() {
	Attributes(func() {
		Reference(SampleDataPayload)
		Attribute("origin")
		Attribute("period")
		Attribute("factor")
		Attribute("lowerLimit")
		Attribute("upperLimit")
		Attribute("dimensions")
		Attribute("data")
	})
	View("default", func() {
		Description("Default view of Repeat element")
		Attribute("origin")
		Attribute("period")
		Attribute("factor")
		Attribute("lowerLimit")
		Attribute("upperLimit")
		Attribute("dimensions")
		Attribute("data")
	})
})
var Timing = MediaType("application/vnd.timing+json", func() {
	Attributes(func() {
		Reference(TimingPayload)
		Attribute("event")
		Attribute("repeat")
		Attribute("code")
	})
	View("default", func() {
		Description("Default view of Timing data type")
		Attribute("event")
		Attribute("repeat")
		Attribute("code")
	})
})
