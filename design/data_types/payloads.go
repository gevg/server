package design

import (
	. "github.com/goadesign/goa/design/apidsl"
)

var BackboneElementPayload = Type("BackboneElementPayload", func() {
	Reference(BackboneElement)
	Attribute("element")
	Attribute("modifierExtension")
})
var ElementPayload = Type("ElementPayload", func() {
	Reference(Element)
	Attribute("id")
	Attribute("extension")
})
var ExtensionPayload = Type("ExtensionPayload", func() {
	Description("Default view for Extension element")
	Reference(Extension)
	Attribute("url")
	Attribute("ValueAddress")
	Attribute("ValueAnnotation")
	Attribute("ValueAttachment")
	Attribute("ValueBase64Binary")
	Attribute("ValueBoolean")
	Attribute("ValueCode")
	Attribute("ValueCodeableConcept")
	Attribute("ValueCoding")
	Attribute("ValueContactPoint")
	Attribute("ValueDate")
	Attribute("ValueDateTime")
	Attribute("ValueDecimal")
	Attribute("ValueHumanName")
	Attribute("ValueId")
	Attribute("ValueIdentifier")
	Attribute("ValueInstant")
	Attribute("ValueInteger")
	Attribute("ValueMarkdown")
	Attribute("ValueMeta")
	Attribute("ValueOid")
	Attribute("ValuePeriod")
	Attribute("ValuePositiveInt")
	Attribute("ValueQuantity")
	Attribute("ValueRange")
	Attribute("ValueRatio")
	Attribute("ValueReference")
	Attribute("ValueSampledData")
	Attribute("ValueSignature")
	Attribute("ValueString")
	Attribute("ValueTime")
	Attribute("ValueTiming")
	Attribute("ValueUnsignedInt")
	Attribute("ValueUri")
})

var AddressPayload = Type("AddressPayload", func() {
	Reference(Address)
	Attribute("use")
	Attribute("type")
		Attribute("text")
	Attribute("line")
	Attribute("city")
	Attribute("distinct")
	Attribute("state")
	Attribute("postalCode")
	Attribute("country")
})
var AnnotationPayload = Type("AnnotationPayload", func() {
	Reference(Annotation)
	Attribute("authorReference")
	Attribute("authorString")
	Attribute("time")

})
var AttachmentPayload = Type("AttachmentPayload", func() {
	Reference(Attachment)
	Attribute("contentType")
	Attribute("data")
	Attribute("size")
	Attribute("hash")
	Attribute("title")
	Attribute("creation")
})
var CodingPayload = Type("CodingPayload", func() {
	Reference(Coding)
	Attribute("system")
	Attribute("version")
	Attribute("code")
	Attribute("display")
	Attribute("userSelected")
})
var CodeableConceptPayload = Type("CodeableConceptPayload", func() {
	Reference(CodeableConcept)
	Attribute("coding")
	Attribute("text")
})
var ContactPointPayload = Type("ContactPointPayload", func() {
	Reference(ContactPoint)
	Attribute("system")
	Attribute("value")
	Attribute("use")
	Attribute("rank")
})

//Goa has a function named Reference. Changed to HL7Reference
var HL7ReferencePayload = Type("HL7ReferencePayload", func() {
	Reference(HL7Reference)
	Attribute("reference")
	Attribute("display")
})
var HumanNamePayload = Type("HumanNamePayload", func() {
	Reference(HumanName)
	Attribute("use")
	Attribute("family")
	Attribute("given")
	Attribute("prefix")
	Attribute("suffix")
	Attribute("period")
})
var IdentifierPayload = Type("IdentifierPayload", func() {
	Reference(Identifier)
	Attribute("use")
	Attribute("type")
	Attribute("system")
	Attribute("value")
	Attribute("period")
	Attribute("assigner")
})
var MetaPayload = Type("MetaPayload", func() {
	Reference(Meta)
	Attribute("versionId")
	Attribute("lastUpdated")
	Attribute("profile")
	Attribute("security")
	Attribute("tag")
})
var PeriodPayload = Type("PeriodPayload", func() {
	Reference(Period)
	Attribute("start")
	Attribute("end")

})
var QuantityPayload = Type("QuantityPayload", func() {
	Reference(Quantity)
	Attribute("value")
	Attribute("comparator")
	Attribute("unit")
	Attribute("system")
	Attribute("code")

})
var RangePayload = Type("RangePayload", func() {
	Reference(Range)
	Attribute("low")
	Attribute("high")

})
var RatioPayload = Type("RatioPayload", func() {
	Reference(Ratio)
	Attribute("numerator")
	Attribute("denominator")

})

//This is currently an Element.
var RepeatPayload = Type("RepeatPayload", func() {
	Reference(Repeat)
	Attribute("bounds")
	Attribute("count")
	Attribute("duration")
	Attribute("durationUnits")
	Attribute("frequency")
	Attribute("frequencyMax")
	Attribute("period")
	Attribute("periodMax")
	Attribute("periodUnits")
	Attribute("when")

})
var SampleDataPayload = Type("SampleDataPayload", func() {
	Reference(SampleData)
	Attribute("origin")
	Attribute("period")
	Attribute("factor")
	Attribute("lowerLimit")
	Attribute("upperLimit")
	Attribute("dimensions")
	Attribute("data")

})
var TimingPayload = Type("TimingPayload", func() {
	Reference(Timing)
	Attribute("event")
	Attribute("repeat")
	Attribute("code")

})
